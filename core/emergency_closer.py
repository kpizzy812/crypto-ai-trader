# core/emergency_closer.py
"""
–≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–π –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö
"""
import asyncio
from typing import Dict, List, Optional
from decimal import Decimal
from datetime import datetime
from loguru import logger

from core.portfolio import Portfolio
from core.event_bus import EventBus, Event, EventType


class EmergencyPositionCloser:
    """–°–∏—Å—Ç–µ–º–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–π"""

    def __init__(self, portfolio: Portfolio, event_bus: EventBus):
        self.portfolio = portfolio
        self.event_bus = event_bus
        self.exchange_manager = None  # –ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–∑–≤–Ω–µ
        self.is_emergency_mode = False
        self.closure_attempts = {}

    def set_exchange_manager(self, exchange_manager):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –±–∏—Ä–∂"""
        self.exchange_manager = exchange_manager

    async def emergency_close_all_positions(self, reason: str = "Emergency stop") -> Dict:
        """–≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π"""

        if self.is_emergency_mode:
            logger.warning("‚ö†Ô∏è –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ —É–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ")
            return {'status': 'already_in_progress'}

        self.is_emergency_mode = True

        logger.critical(f"üö® –≠–ö–°–¢–†–ï–ù–ù–û–ï –ó–ê–ö–†–´–¢–ò–ï –í–°–ï–• –ü–û–ó–ò–¶–ò–ô: {reason}")

        try:
            positions_to_close = list(self.portfolio.positions.values())

            if not positions_to_close:
                logger.info("‚úÖ –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è")
                return {'status': 'success', 'closed_positions': 0}

            logger.info(f"üîÑ –ó–∞–∫—Ä—ã—Ç–∏–µ {len(positions_to_close)} –ø–æ–∑–∏—Ü–∏–π...")

            # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–∫—Ä—ã—Ç–∏—è
            results = {
                'status': 'in_progress',
                'total_positions': len(positions_to_close),
                'successfully_closed': 0,
                'failed_to_close': 0,
                'errors': []
            }

            # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–π
            close_tasks = []
            for position in positions_to_close:
                task = asyncio.create_task(
                    self._close_single_position_emergency(position, reason)
                )
                close_tasks.append(task)

            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
            close_results = await asyncio.gather(*close_tasks, return_exceptions=True)

            # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            for i, result in enumerate(close_results):
                if isinstance(result, Exception):
                    results['failed_to_close'] += 1
                    results['errors'].append(str(result))
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏ {positions_to_close[i].id}: {result}")
                elif result.get('success'):
                    results['successfully_closed'] += 1
                    logger.info(f"‚úÖ –ü–æ–∑–∏—Ü–∏—è {result['position_id']} –∑–∞–∫—Ä—ã—Ç–∞")
                else:
                    results['failed_to_close'] += 1
                    results['errors'].append(result.get('error', 'Unknown error'))

            # –§–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
            if results['successfully_closed'] == results['total_positions']:
                results['status'] = 'success'
                logger.info(f"üéâ –í—Å–µ {results['successfully_closed']} –ø–æ–∑–∏—Ü–∏–π —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç—ã")
            elif results['successfully_closed'] > 0:
                results['status'] = 'partial_success'
                logger.warning(f"‚ö†Ô∏è –ó–∞–∫—Ä—ã—Ç–æ {results['successfully_closed']} –∏–∑ {results['total_positions']} –ø–æ–∑–∏—Ü–∏–π")
            else:
                results['status'] = 'failed'
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å –Ω–∏ –æ–¥–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏")

            # –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏—è
            await self.event_bus.publish(Event(
                type=EventType.EMERGENCY_STOP,
                data={
                    'reason': reason,
                    'results': results,
                    'timestamp': datetime.utcnow().isoformat()
                },
                source="EmergencyCloser"
            ))

            return results

        except Exception as e:
            logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è: {e}")
            return {
                'status': 'critical_error',
                'error': str(e),
                'timestamp': datetime.utcnow().isoformat()
            }
        finally:
            self.is_emergency_mode = False

    async def _close_single_position_emergency(self, position, reason: str) -> Dict:
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –æ–¥–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ –≤ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ"""

        max_attempts = 3
        position_id = position.id

        if position_id in self.closure_attempts:
            self.closure_attempts[position_id] += 1
        else:
            self.closure_attempts[position_id] = 1

        for attempt in range(1, max_attempts + 1):
            try:
                logger.info(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ {attempt}/{max_attempts} –∑–∞–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏—é {position_id}")

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—É—é —Å—Ç–æ—Ä–æ–Ω—É
                close_side = 'sell' if position.side == 'long' else 'buy'

                # –†–∞–∑–º–µ—â–∞–µ–º —Ä—ã–Ω–æ—á–Ω—ã–π –æ—Ä–¥–µ—Ä –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ
                if self.exchange_manager:
                    result = await self.exchange_manager.place_order(
                        symbol=position.symbol,
                        side=close_side,
                        order_type='market',
                        quantity=float(position.quantity),
                        strategy=f'emergency_close_{reason}'
                    )

                    if result:
                        # –ñ–¥–µ–º –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
                        await asyncio.sleep(2)

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–∫—Ä—ã–ª–∞—Å—å –ª–∏ –ø–æ–∑–∏—Ü–∏—è
                        if position_id not in self.portfolio.positions:
                            return {
                                'success': True,
                                'position_id': position_id,
                                'attempt': attempt,
                                'method': 'exchange_order'
                            }
                        else:
                            logger.warning(f"‚ö†Ô∏è –ü–æ–∑–∏—Ü–∏—è {position_id} –Ω–µ –∑–∞–∫—Ä—ã–ª–∞—Å—å –ø–æ—Å–ª–µ –æ—Ä–¥–µ—Ä–∞")

                else:
                    # –ï—Å–ª–∏ –Ω–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –±–∏—Ä–∂ - –∑–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ
                    logger.warning(f"‚ö†Ô∏è –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏ {position_id} –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ (–Ω–µ—Ç exchange_manager)")

                    # –≠–º—É–ª–∏—Ä—É–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–ª—É—á–∏–ª–∏ –±—ã —Å –±–∏—Ä–∂–∏)
                    current_price = position.entry_price * Decimal("1.001")  # +0.1%

                    closed_position = await self.portfolio.close_position(position_id, current_price)

                    if closed_position:
                        return {
                            'success': True,
                            'position_id': position_id,
                            'attempt': attempt,
                            'method': 'programmatic',
                            'note': 'Closed programmatically due to missing exchange manager'
                        }

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ø—ã—Ç–∫–∏ {attempt} –∑–∞–∫—Ä—ã—Ç–∏—è {position_id}: {e}")

                if attempt < max_attempts:
                    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
                    await asyncio.sleep(attempt * 2)
                continue

        # –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ—É–¥–∞—á–Ω—ã
        return {
            'success': False,
            'position_id': position_id,
            'error': f'Failed to close after {max_attempts} attempts',
            'attempts_made': max_attempts
        }

    async def force_close_position(self, position_id: str, reason: str = "Manual force close") -> Dict:
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏"""

        if position_id not in self.portfolio.positions:
            return {
                'success': False,
                'error': f'Position {position_id} not found'
            }

        position = self.portfolio.positions[position_id]

        logger.warning(f"‚ö†Ô∏è –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏ {position_id}: {reason}")

        try:
            result = await self._close_single_position_emergency(position, reason)

            if result['success']:
                logger.info(f"‚úÖ –ü–æ–∑–∏—Ü–∏—è {position_id} –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã—Ç–∞")

                # –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏—è
                await self.event_bus.publish(Event(
                    type=EventType.POSITION_CLOSED,
                    data={
                        'position_id': position_id,
                        'symbol': position.symbol,
                        'reason': reason,
                        'method': 'force_close',
                        'timestamp': datetime.utcnow().isoformat()
                    },
                    source="EmergencyCloser"
                ))

            return result

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è {position_id}: {e}")
            return {
                'success': False,
                'error': str(e)
            }

    async def emergency_reduce_position_sizes(self, reduction_percent: float = 50.0) -> Dict:
        """–≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ —É–º–µ–Ω—å—à–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤ –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π"""

        logger.warning(f"‚ö†Ô∏è –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ —É–º–µ–Ω—å—à–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π –Ω–∞ {reduction_percent}%")

        results = {
            'total_positions': 0,
            'successfully_reduced': 0,
            'errors': []
        }

        try:
            positions = list(self.portfolio.positions.values())
            results['total_positions'] = len(positions)

            for position in positions:
                try:
                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è
                    reduction_quantity = position.quantity * Decimal(str(reduction_percent / 100))

                    if reduction_quantity < Decimal("0.001"):  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                        continue

                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–æ—Ä–æ–Ω—É –¥–ª—è —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è
                    close_side = 'sell' if position.side == 'long' else 'buy'

                    if self.exchange_manager:
                        # –†–∞–∑–º–µ—â–∞–µ–º –æ—Ä–¥–µ—Ä –Ω–∞ —á–∞—Å—Ç–∏—á–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ
                        result = await self.exchange_manager.place_order(
                            symbol=position.symbol,
                            side=close_side,
                            order_type='market',
                            quantity=float(reduction_quantity),
                            strategy='emergency_reduce'
                        )

                        if result:
                            results['successfully_reduced'] += 1
                            logger.info(f"‚úÖ –£–º–µ–Ω—å—à–µ–Ω–∞ –ø–æ–∑–∏—Ü–∏—è {position.id} –Ω–∞ {reduction_percent}%")
                    else:
                        # –ü—Ä–æ–≥—Ä–∞–º–º–Ω–æ–µ —É–º–µ–Ω—å—à–µ–Ω–∏–µ
                        position.quantity -= reduction_quantity
                        results['successfully_reduced'] += 1
                        logger.info(f"‚úÖ –ü—Ä–æ–≥—Ä–∞–º–º–Ω–æ —É–º–µ–Ω—å—à–µ–Ω–∞ –ø–æ–∑–∏—Ü–∏—è {position.id}")

                except Exception as e:
                    results['errors'].append(f"Position {position.id}: {str(e)}")
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–º–µ–Ω—å—à–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ {position.id}: {e}")

            return results

        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —É–º–µ–Ω—å—à–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π: {e}")
            return {
                'status': 'critical_error',
                'error': str(e)
            }

    async def get_emergency_status(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã"""
        return {
            'is_emergency_mode': self.is_emergency_mode,
            'closure_attempts': dict(self.closure_attempts),
            'exchange_manager_available': self.exchange_manager is not None,
            'open_positions_count': len(self.portfolio.positions),
            'timestamp': datetime.utcnow().isoformat()
        }

    async def reset_emergency_state(self):
        """–°–±—Ä–æ—Å —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        logger.info("üîÑ –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è")
        self.is_emergency_mode = False
        self.closure_attempts.clear()

    async def test_emergency_system(self) -> Dict:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã"""
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –∑–∞–∫—Ä—ã—Ç–∏—è")

        checks = {
            'exchange_manager': self.exchange_manager is not None,
            'portfolio_accessible': hasattr(self.portfolio, 'positions'),
            'event_bus_accessible': hasattr(self.event_bus, 'publish'),
            'emergency_mode_clear': not self.is_emergency_mode
        }

        all_checks_passed = all(checks.values())

        return {
            'system_ready': all_checks_passed,
            'checks': checks,
            'timestamp': datetime.utcnow().isoformat(),
            'recommendation': 'System ready for emergency operations' if all_checks_passed
            else 'Some components need attention before emergency operations'
        }