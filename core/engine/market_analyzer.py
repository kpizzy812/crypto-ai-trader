# core/engine/market_analyzer.py
"""
–ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
"""
import pandas as pd
from typing import Dict, Optional
from loguru import logger

from config.trading_config import TradingConfig
from core.event_bus import EventBus, Event, EventType
from data.processors.technical_processor import TechnicalProcessor
from ai.openai_analyzer import OpenAIAnalyzer
from ai.mock_analyzer import MockAIAnalyzer


class MarketAnalyzer:
    """–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""

    def __init__(self, trading_config: TradingConfig, event_bus: EventBus):
        self.trading_config = trading_config
        self.event_bus = event_bus
        self.technical_processor = TechnicalProcessor()

        # AI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self.ai_analyzer = None
        self.mock_analyzer = MockAIAnalyzer()

        # –ö—ç—à –¥–∞–Ω–Ω—ã—Ö
        self.market_data_cache = {}
        self.analysis_cache = {}

    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞"""
        logger.info("üìä –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ —Ä—ã–Ω–∫–∞")

        # –ü–æ–ø—ã—Ç–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ OpenAI
        try:
            self.ai_analyzer = OpenAIAnalyzer()
            logger.info("‚úÖ OpenAI –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –≥–æ—Ç–æ–≤")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è OpenAI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Mock: {e}")

    async def analyze_symbol(self, symbol: str):
        """–ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–∏–º–≤–æ–ª–∞"""
        try:
            # 1. –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            market_data = await self._get_market_data(symbol)
            if market_data.empty:
                logger.warning(f"‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}")
                return

            # 2. –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
            processed_data = self._perform_technical_analysis(market_data)

            # 3. AI –∞–Ω–∞–ª–∏–∑
            ai_analysis = await self._perform_ai_analysis(processed_data, symbol)

            # 4. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∫—ç—à
            self.analysis_cache[symbol] = {
                'market_data': processed_data,
                'ai_analysis': ai_analysis,
                'timestamp': pd.Timestamp.now()
            }

            # 5. –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏—è —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞
            await self.event_bus.publish(Event(
                type=EventType.AI_ANALYSIS_COMPLETE,
                data={
                    'symbol': symbol,
                    'analysis': ai_analysis,
                    'technical_data': processed_data.tail(1).to_dict('records')[0]
                },
                source="MarketAnalyzer"
            ))

            logger.debug(f"üìä –ê–Ω–∞–ª–∏–∑ {symbol} –∑–∞–≤–µ—Ä—à–µ–Ω: {ai_analysis.get('action', 'HOLD')}")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {symbol}: {e}")

    async def _get_market_data(self, symbol: str) -> pd.DataFrame:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            from core.engine.exchange_manager import ExchangeManager

            # –ü–æ–ª—É—á–∞–µ–º exchange_manager –∏–∑ event_bus –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
            # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —ç—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å dependency injection
            # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É
            logger.warning("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")

            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            from utils.helpers import create_sample_data
            return create_sample_data(symbol, periods=100)

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö {symbol}: {e}")
            return pd.DataFrame()

    def _perform_technical_analysis(self, market_data: pd.DataFrame) -> pd.DataFrame:
        """–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑"""
        try:
            return self.technical_processor.process_ohlcv(
                market_data,
                self.trading_config.technical_indicators
            )
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {e}")
            return market_data

    async def _perform_ai_analysis(self, processed_data: pd.DataFrame, symbol: str) -> Dict:
        """AI –∞–Ω–∞–ª–∏–∑"""
        try:
            if self.ai_analyzer:
                # –†–µ–∞–ª—å–Ω—ã–π OpenAI –∞–Ω–∞–ª–∏–∑
                analysis = await self.ai_analyzer.analyze_market(processed_data, symbol)
            else:
                # Mock –∞–Ω–∞–ª–∏–∑
                analysis = await self.mock_analyzer.analyze_market(processed_data, symbol)

            # –£–ª—É—á—à–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            enhanced_analysis = await self._enhance_analysis(analysis, processed_data)

            return enhanced_analysis

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ AI –∞–Ω–∞–ª–∏–∑–∞ {symbol}: {e}")
            return {'action': 'HOLD', 'confidence': 0.0, 'reasoning': '–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞'}

    async def _enhance_analysis(self, ai_analysis: Dict,
                                technical_data: pd.DataFrame) -> Dict:
        """–£–ª—É—á—à–µ–Ω–∏–µ AI –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
        enhanced = ai_analysis.copy()

        # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
        enhanced['technical_validation'] = self._validate_with_technicals(
            ai_analysis, technical_data
        )

        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        validation_score = enhanced['technical_validation']['score']
        original_confidence = enhanced.get('confidence', 0.5)

        enhanced['adjusted_confidence'] = (
                original_confidence * 0.7 + validation_score * 0.3
        )

        # –†–∏—Å–∫-—Å–∫–æ—Ä
        enhanced['risk_score'] = self._calculate_risk_score(technical_data, enhanced)

        # –í—Ä–µ–º–µ–Ω–Ω–æ–π –≥–æ—Ä–∏–∑–æ–Ω—Ç
        enhanced['time_horizon'] = self._determine_time_horizon(technical_data)

        return enhanced

    def _validate_with_technicals(self, ai_analysis: Dict,
                                  data: pd.DataFrame) -> Dict:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è AI –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏"""
        validation = {
            'score': 0.5,
            'confirmations': [],
            'conflicts': []
        }

        if len(data) < 20:
            return validation

        current = data.iloc[-1]
        ai_action = ai_analysis.get('action', 'HOLD')

        # RSI –≤–∞–ª–∏–¥–∞—Ü–∏—è
        if 'rsi' in current and not pd.isna(current['rsi']):
            rsi_signal = 'BUY' if current['rsi'] < 30 else 'SELL' if current['rsi'] > 70 else 'NEUTRAL'
            if rsi_signal == ai_action:
                validation['confirmations'].append('RSI –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç')
                validation['score'] += 0.1
            elif rsi_signal != 'NEUTRAL' and rsi_signal != ai_action:
                validation['conflicts'].append('RSI –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—Ç')
                validation['score'] -= 0.1

        # EMA –∫—Ä–æ—Å—Å–æ–≤–µ—Ä
        if all(x in current for x in ['ema_fast', 'ema_slow']):
            if not any(pd.isna(current[x]) for x in ['ema_fast', 'ema_slow']):
                ema_signal = 'BUY' if current['ema_fast'] > current['ema_slow'] else 'SELL'
                if ema_signal == ai_action:
                    validation['confirmations'].append('EMA –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç')
                    validation['score'] += 0.15
                else:
                    validation['conflicts'].append('EMA –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—Ç')
                    validation['score'] -= 0.15

        validation['score'] = max(0, min(1, validation['score']))
        return validation

    def _calculate_risk_score(self, data: pd.DataFrame, analysis: Dict) -> float:
        """–†–∞—Å—á–µ—Ç —Ä–∏—Å–∫-—Å–∫–æ—Ä–∞"""
        risk_score = 0.5

        # –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
        if len(data) >= 20:
            volatility = data['close'].pct_change().tail(20).std()
            if volatility > 0.05:
                risk_score += 0.2
            elif volatility < 0.01:
                risk_score -= 0.1

        # –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å AI
        confidence = analysis.get('adjusted_confidence', 0.5)
        if confidence < 0.6:
            risk_score += 0.2
        elif confidence > 0.8:
            risk_score -= 0.1

        return max(0, min(1, risk_score))

    def _determine_time_horizon(self, data: pd.DataFrame) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞"""
        if len(data) < 50:
            return 'short'

        # –ü—Ä–æ—Å—Ç–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
        volatility = data['close'].pct_change().tail(20).std()

        if volatility > 0.05:
            return 'short'  # –í—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å - –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ
        elif volatility < 0.02:
            return 'medium'  # –ù–∏–∑–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å - –º–æ–∂–µ–º –¥–µ—Ä–∂–∞—Ç—å –¥–æ–ª—å—à–µ
        else:
            return 'short'

    def get_cached_analysis(self, symbol: str) -> Optional[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
        return self.analysis_cache.get(symbol)

    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞"""
        logger.info("üìä –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ —Ä—ã–Ω–∫–∞")
        self.market_data_cache.clear()
        self.analysis_cache.clear()