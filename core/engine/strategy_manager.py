# core/engine/strategy_manager.py
"""
–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤—ã–º–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏
"""
from typing import List, Dict
from loguru import logger

from config.trading_config import TradingConfig
from core.event_bus import EventBus, Event, EventType
from trading.strategies.simple_momentum import SimpleMomentumStrategy
from trading.strategies.ai_driven import AIDrivenStrategy


class StrategyManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"""

    def __init__(self, trading_config: TradingConfig, event_bus: EventBus):
        self.trading_config = trading_config
        self.event_bus = event_bus
        self.strategies = []

    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"""
        logger.info("üéØ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π")

        await self._initialize_momentum_strategy()
        await self._initialize_ai_strategy()

        logger.info(f"‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: {len(self.strategies)}")

        # –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
        self.event_bus.subscribe(EventType.AI_ANALYSIS_COMPLETE, self._on_analysis_complete)

    async def _initialize_momentum_strategy(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–º–µ–Ω—Ç—É–º —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        try:
            momentum_config = {
                'indicators': self.trading_config.technical_indicators,
                'position_size_percent': self.trading_config.risk.max_position_size_percent,
                'confidence_threshold': 0.6
            }

            momentum_strategy = SimpleMomentumStrategy(momentum_config)
            momentum_strategy.active = True  # –ê–∫—Ç–∏–≤–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            self.strategies.append(momentum_strategy)

            logger.info("‚úÖ SimpleMomentum —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Momentum —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {e}")

    async def _initialize_ai_strategy(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        try:
            ai_config = {
                'min_confidence': 0.7,
                'use_news': True,
                'risk_multiplier': 1.0,
                'technical_indicators': self.trading_config.technical_indicators
            }

            ai_strategy = AIDrivenStrategy(ai_config, self.event_bus)
            ai_strategy.active = False  # –í–∫–ª—é—á–∞–µ—Ç—Å—è –≤—Ä—É—á–Ω—É—é
            self.strategies.append(ai_strategy)

            logger.info("‚úÖ AI-Driven —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ AI —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {e}")

    async def _on_analysis_complete(self, event: Event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ - –∑–∞–ø—É—Å–∫ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"""
        data = event.data
        symbol = data['symbol']
        analysis = data['analysis']
        technical_data = data.get('technical_data', {})

        # –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
        for strategy in self.strategies:
            if not strategy.active:
                continue

            try:
                await self._run_strategy(strategy, symbol, analysis, technical_data)
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ {strategy.name} –¥–ª—è {symbol}: {e}")

    async def _run_strategy(self, strategy, symbol: str, analysis: Dict, technical_data: Dict):
        """–ó–∞–ø—É—Å–∫ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""

        try:
            # –°–æ–∑–¥–∞–µ–º DataFrame –∏–∑ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            import pandas as pd

            # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –∞ –Ω–µ –æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞
            # –≠—Ç–æ —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
            mock_data = pd.DataFrame([technical_data])

            # –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            strategy_analysis = await strategy.analyze(mock_data, symbol)

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π –≤—Ö–æ–¥–∞
            if await strategy.should_enter(strategy_analysis):
                # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–∞ –æ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
                await self._generate_strategy_signal(strategy, symbol, strategy_analysis)

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π –≤—ã—Ö–æ–¥–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏)
            await self._check_exit_conditions(strategy, symbol, strategy_analysis)

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ {strategy.name}: {e}")

    async def _generate_strategy_signal(self, strategy, symbol: str, analysis: Dict):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–∞ –æ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""

        signal_data = {
            'symbol': symbol,
            'strategy': strategy.name,
            'action': analysis.get('recommendation', 'HOLD'),
            'confidence': analysis.get('confidence', 0),
            'analysis': analysis,
            'source': 'strategy'
        }

        # –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
        await self.event_bus.publish(Event(
            type=EventType.SIGNAL_GENERATED,
            data=signal_data,
            source=f"Strategy_{strategy.name}"
        ))

        logger.info(f"üìà –°—Ç—Ä–∞—Ç–µ–≥–∏—è {strategy.name}: {symbol} {analysis.get('recommendation', 'HOLD')}")

    async def _check_exit_conditions(self, strategy, symbol: str, analysis: Dict):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π –≤—ã—Ö–æ–¥–∞ –¥–ª—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""

        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π
        # –í —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        pass

    async def get_active_strategies(self) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"""
        return [strategy.name for strategy in self.strategies if strategy.active]

    async def toggle_strategy(self, strategy_name: str, active: bool) -> bool:
        """–í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        for strategy in self.strategies:
            if strategy.name == strategy_name:
                strategy.active = active
                logger.info(f"üéØ –°—Ç—Ä–∞—Ç–µ–≥–∏—è {strategy_name}: {'–≤–∫–ª—é—á–µ–Ω–∞' if active else '–≤—ã–∫–ª—é—á–µ–Ω–∞'}")
                return True

        logger.warning(f"‚ö†Ô∏è –°—Ç—Ä–∞—Ç–µ–≥–∏—è {strategy_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return False

    async def get_strategy_config(self, strategy_name: str) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        for strategy in self.strategies:
            if strategy.name == strategy_name:
                return strategy.config
        return {}

    async def update_strategy_config(self, strategy_name: str, new_config: Dict) -> bool:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        for strategy in self.strategies:
            if strategy.name == strategy_name:
                strategy.config.update(new_config)
                logger.info(f"üéØ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ {strategy_name} –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
                return True
        return False

    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"""
        logger.info("üéØ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π")

        for strategy in self.strategies:
            strategy.active = False

        self.strategies.clear()