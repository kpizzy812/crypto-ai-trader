# core/engine/signal_processor.py
"""
–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –∏ –ø—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏–π
"""
from typing import Dict, Optional
from decimal import Decimal
from loguru import logger


from core.event_bus import EventBus, Event, EventType
from risk.risk_manager import RiskManager


class SignalProcessor:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"""

    def __init__(self, event_bus: EventBus, risk_manager: RiskManager):
        self.event_bus = event_bus
        self.risk_manager = risk_manager
        self.pending_signals = {}

    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ —Å–∏–≥–Ω–∞–ª–æ–≤"""
        logger.info("‚ö° –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ —Å–∏–≥–Ω–∞–ª–æ–≤")

        # –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è –∞–Ω–∞–ª–∏–∑–∞
        self.event_bus.subscribe(EventType.AI_ANALYSIS_COMPLETE, self._on_analysis_complete)

    async def _on_analysis_complete(self, event: Event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
        data = event.data
        symbol = data['symbol']
        analysis = data['analysis']

        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞
            signal = await self._evaluate_signal(symbol, analysis)

            if signal:
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∏—Å–∫–∞
                if await self._validate_risk(signal):
                    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
                    await self._generate_trading_signal(signal)
                else:
                    logger.info(f"‚ö†Ô∏è –°–∏–≥–Ω–∞–ª {symbol} –æ—Ç–∫–ª–æ–Ω–µ–Ω —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–µ—Ä–æ–º")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–∞ {symbol}: {e}")

    async def _evaluate_signal(self, symbol: str, analysis: Dict) -> Optional[Dict]:
        """–û—Ü–µ–Ω–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞"""

        action = analysis.get('action', 'HOLD')
        confidence = analysis.get('adjusted_confidence', 0)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑–æ–≤—ã—Ö —É—Å–ª–æ–≤–∏–π
        if action == 'HOLD':
            return None

        if confidence < 0.6:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
            logger.debug(f"üìä {symbol}: –ù–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å {confidence:.2f}")
            return None

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        tech_validation = analysis.get('technical_validation', {})
        if tech_validation.get('score', 0) < 0.3:
            logger.debug(f"üìä {symbol}: –°–ª–∞–±–∞—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è")
            return None

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞
        signal = {
            'symbol': symbol,
            'action': action.lower(),  # buy/sell
            'confidence': confidence,
            'analysis': analysis,
            'priority': self._calculate_priority(analysis),
            'metadata': {
                'risk_score': analysis.get('risk_score', 0.5),
                'time_horizon': analysis.get('time_horizon', 'short'),
                'reasoning': analysis.get('reasoning', '')
            }
        }

        return signal

    def _calculate_priority(self, analysis: Dict) -> int:
        """–†–∞—Å—á–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ —Å–∏–≥–Ω–∞–ª–∞ (1-10)"""

        confidence = analysis.get('adjusted_confidence', 0)
        risk_score = analysis.get('risk_score', 0.5)

        # –í—ã—Å–æ–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å + –Ω–∏–∑–∫–∏–π —Ä–∏—Å–∫ = –≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        priority = int((confidence * 10) - (risk_score * 5))

        return max(1, min(10, priority))

    async def _validate_risk(self, signal: Dict) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–∞ —á–µ—Ä–µ–∑ —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–µ—Ä"""

        try:
            symbol = signal['symbol']
            action = signal['action']

            # –ü—Ä–∏–º–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∏—Å–∫–∞
            # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –Ω—É–∂–Ω–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å exchange_manager
            # –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã
            estimated_price = Decimal("45000")  # –ó–∞–≥–ª—É—à–∫–∞
            estimated_quantity = Decimal("0.001")  # –ó–∞–≥–ª—É—à–∫–∞

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–µ—Ä
            risk_ok = await self.risk_manager.check_position_risk(
                symbol=symbol,
                side=action,
                entry_price=estimated_price,
                quantity=estimated_quantity
            )

            if not risk_ok:
                return False

            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∏—Å–∫-—Å–∫–æ—Ä–∞
            risk_score = signal['metadata']['risk_score']
            if risk_score > 0.8:
                logger.warning(f"‚ö†Ô∏è –í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫-—Å–∫–æ—Ä –¥–ª—è {symbol}: {risk_score}")
                return False

            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ä–∏—Å–∫–∞: {e}")
            return False

    async def _generate_trading_signal(self, signal: Dict):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞"""

        symbol = signal['symbol']

        try:
            # –†–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏
            position_size = await self._calculate_position_size(signal)

            if position_size <= 0:
                logger.warning(f"‚ö†Ô∏è –ù—É–ª–µ–≤–æ–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è {symbol}")
                return

            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
            trading_signal = {
                'symbol': symbol,
                'action': signal['action'],
                'quantity': float(position_size),
                'confidence': signal['confidence'],
                'priority': signal['priority'],
                'strategy': 'ai_driven',  # –ò–ª–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∏–∑ –∞–Ω–∞–ª–∏–∑–∞
                'risk_score': signal['metadata']['risk_score'],
                'reasoning': signal['metadata']['reasoning'],
                'timestamp': str(pd.Timestamp.now())
            }

            # –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–∞
            await self.event_bus.publish(Event(
                type=EventType.SIGNAL_GENERATED,
                data=trading_signal,
                source="SignalProcessor"
            ))

            logger.info(f"üéØ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —Å–∏–≥–Ω–∞–ª: {symbol} {signal['action'].upper()} "
                        f"(—Ä–∞–∑–º–µ—Ä: {position_size:.4f}, —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {signal['confidence']:.1%})")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞ {symbol}: {e}")

    async def _calculate_position_size(self, signal: Dict) -> float:
        """–†–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏"""

        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è
            portfolio_stats = await self.risk_manager.portfolio.get_portfolio_stats()
            available_balance = float(portfolio_stats['available_balance'])

            # –ë–∞–∑–æ–≤—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –¥–µ–ø–æ–∑–∏—Ç–∞
            base_percent = 2.0  # 2% –±–∞–∑–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä

            # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –Ω–∞ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
            confidence = signal['confidence']
            adjusted_percent = base_percent * confidence

            # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –Ω–∞ —Ä–∏—Å–∫
            risk_score = signal['metadata']['risk_score']
            risk_multiplier = 1.0 - (risk_score * 0.5)  # –°–Ω–∏–∂–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø—Ä–∏ –≤—ã—Å–æ–∫–æ–º —Ä–∏—Å–∫–µ

            final_percent = adjusted_percent * risk_multiplier

            # –†–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞ –≤ USD
            position_value = available_balance * (final_percent / 100)

            # –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Ü–µ–Ω–∞ (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–ª—É—á–∞—Ç—å —Å –±–∏—Ä–∂–∏)
            estimated_price = 45000.0  # –ó–∞–≥–ª—É—à–∫–∞

            # –†–∞–∑–º–µ—Ä –≤ –±–∞–∑–æ–≤–æ–π –≤–∞–ª—é—Ç–µ
            position_size = position_value / estimated_price

            return max(0.001, position_size)  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏: {e}")
            return 0.0

    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ —Å–∏–≥–Ω–∞–ª–æ–≤"""
        logger.info("‚ö° –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ —Å–∏–≥–Ω–∞–ª–æ–≤")
        self.pending_signals.clear()