# core/engine/signal_processor.py
"""
–£–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä —Å–∏–≥–Ω–∞–ª–æ–≤ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –¥–∞–Ω–Ω—ã—Ö
"""
from typing import Dict, Optional
from decimal import Decimal
from loguru import logger
import json

from core.event_bus import EventBus, Event, EventType
from risk.risk_manager import RiskManager
from models.trading_signals import (
    AIAnalysisResult, TradingSignal, SignalType,
    create_signal_from_analysis, validate_analysis_event_data
)


class EnhancedSignalProcessor:
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"""

    def __init__(self, event_bus: EventBus, risk_manager: RiskManager):
        self.event_bus = event_bus
        self.risk_manager = risk_manager
        self.processed_signals = {}
        self.signal_history = []

    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞"""
        logger.info("‚ö° –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ —Å–∏–≥–Ω–∞–ª–æ–≤")

        # –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
        self.event_bus.subscribe(EventType.AI_ANALYSIS_COMPLETE, self._on_analysis_complete_safe)

    async def _on_analysis_complete_safe(self, event: Event):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
        try:
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥—è—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
            if not hasattr(event, 'data') or not event.data:
                logger.warning("‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω event –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö")
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
            required_fields = ['symbol', 'analysis']
            missing_fields = [field for field in required_fields if field not in event.data]

            if missing_fields:
                logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: {missing_fields}")
                return

            # –í–∞–ª–∏–¥–∞—Ü–∏—è —á–µ—Ä–µ–∑ Pydantic –º–æ–¥–µ–ª—å
            validated_data = validate_analysis_event_data(event.data)

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            await self._process_validated_analysis(validated_data)

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–Ω–∞–ª–∏–∑–∞: {e}")
            logger.error(f"Event data: {json.dumps(event.data, default=str, indent=2)}")

    async def _process_validated_analysis(self, data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
        symbol = data.symbol
        analysis = data.analysis

        logger.info(f"üìä –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è {symbol}: {analysis.action}")

        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞
            signal = await self._evaluate_signal_safe(symbol, analysis)

            if signal:
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∏—Å–∫–∞
                if await self._validate_risk_safe(signal):
                    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
                    await self._generate_trading_signal_safe(signal)
                else:
                    logger.info(f"‚ö†Ô∏è –°–∏–≥–Ω–∞–ª {symbol} –æ—Ç–∫–ª–æ–Ω–µ–Ω —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–µ—Ä–æ–º")
            else:
                logger.debug(f"üìä {symbol}: –ù–µ—Ç —É—Å–ª–æ–≤–∏–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∏–Ω–≥–∞ –∞–Ω–∞–ª–∏–∑–∞ {symbol}: {e}")

    async def _evaluate_signal_safe(self, symbol: str, analysis: AIAnalysisResult) -> Optional[TradingSignal]:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ —Å–∏–≥–Ω–∞–ª–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑–æ–≤—ã—Ö —É—Å–ª–æ–≤–∏–π
            if analysis.action == SignalType.HOLD:
                return None

            confidence = analysis.adjusted_confidence or analysis.confidence
            if confidence < 0.6:
                logger.debug(f"üìä {symbol}: –ù–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å {confidence:.2f}")
                return None

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            if analysis.technical_validation:
                tech_score = analysis.technical_validation.score
                if tech_score < 0.3:
                    logger.debug(f"üìä {symbol}: –°–ª–∞–±–∞—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è {tech_score:.2f}")
                    return None

            # –†–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏
            position_size = await self._calculate_position_size_safe(analysis, confidence)

            if position_size <= 0:
                logger.warning(f"‚ö†Ô∏è –ù—É–ª–µ–≤–æ–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è {symbol}")
                return None

            # –°–æ–∑–¥–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞
            signal = create_signal_from_analysis(
                analysis=analysis,
                quantity=position_size,
                strategy="ai_driven"
            )

            return signal

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏ —Å–∏–≥–Ω–∞–ª–∞ {symbol}: {e}")
            return None

    async def _calculate_position_size_safe(self, analysis: AIAnalysisResult, confidence: float) -> Decimal:
        """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏"""
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è
            portfolio_stats = await self.risk_manager.portfolio.get_portfolio_stats()
            available_balance = float(portfolio_stats['available_balance'])

            if available_balance <= 0:
                logger.warning("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏")
                return Decimal("0")

            # –ë–∞–∑–æ–≤—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –¥–µ–ø–æ–∑–∏—Ç–∞
            base_percent = 2.0  # 2% –±–∞–∑–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä

            # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –Ω–∞ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
            adjusted_percent = base_percent * confidence

            # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –Ω–∞ —Ä–∏—Å–∫
            risk_score = analysis.risk_score or 0.5
            risk_multiplier = max(0.1, 1.0 - (risk_score * 0.5))  # –°–Ω–∏–∂–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø—Ä–∏ –≤—ã—Å–æ–∫–æ–º —Ä–∏—Å–∫–µ

            final_percent = adjusted_percent * risk_multiplier

            # –†–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞ –≤ USD
            position_value = available_balance * (final_percent / 100)

            # –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Ü–µ–Ω–∞ (–¥–æ–ª–∂–Ω–∞ –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –∏–∑ –∞–Ω–∞–ª–∏–∑–∞)
            estimated_price = float(analysis.entry_price or Decimal("45000"))  # Fallback

            # –†–∞–∑–º–µ—Ä –≤ –±–∞–∑–æ–≤–æ–π –≤–∞–ª—é—Ç–µ
            position_size = position_value / estimated_price

            return Decimal(str(max(0.001, position_size)))  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏: {e}")
            return Decimal("0")

    async def _validate_risk_safe(self, signal: TradingSignal) -> bool:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∏—Å–∫–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–µ—Ä
            risk_ok = await self.risk_manager.check_position_risk(
                symbol=signal.symbol,
                side=signal.action.value.lower(),
                entry_price=signal.position_size_usd / signal.quantity,  # –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Ü–µ–Ω–∞
                quantity=signal.quantity
            )

            if not risk_ok:
                return False

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∏—Å–∫-—Å–∫–æ—Ä–∞
            if signal.risk_score > 0.8:
                logger.warning(f"‚ö†Ô∏è –í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫-—Å–∫–æ—Ä –¥–ª—è {signal.symbol}: {signal.risk_score}")
                return False

            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ä–∏—Å–∫–∞: {e}")
            return False

    async def _generate_trading_signal_safe(self, signal: TradingSignal):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞"""
        try:
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
            self.signal_history.append({
                'timestamp': signal.generated_at,
                'signal': signal,
                'processed': True
            })

            # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏
            if len(self.signal_history) > 1000:
                self.signal_history = self.signal_history[-500:]

            # –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏—è
            await self.event_bus.publish(Event(
                type=EventType.SIGNAL_GENERATED,
                data={
                    'symbol': signal.symbol,
                    'action': signal.action.value,
                    'quantity': float(signal.quantity),
                    'confidence': signal.confidence,
                    'priority': signal.priority,
                    'strategy': signal.strategy,
                    'risk_score': signal.risk_score,
                    'reasoning': signal.reasoning,
                    'timestamp': signal.generated_at.isoformat(),
                    'metadata': signal.metadata
                },
                source="EnhancedSignalProcessor"
            ))

            logger.info(f"üéØ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —Å–∏–≥–Ω–∞–ª: {signal.symbol} {signal.action.value} "
                        f"(—Ä–∞–∑–º–µ—Ä: {signal.quantity:.4f}, —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {signal.confidence:.1%})")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞: {e}")

    async def get_signal_statistics(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤"""
        try:
            total_signals = len(self.signal_history)

            if total_signals == 0:
                return {
                    'total_signals': 0,
                    'avg_confidence': 0,
                    'most_active_symbol': None,
                    'signal_distribution': {}
                }

            # –†–∞—Å—á–µ—Ç —Å—Ä–µ–¥–Ω–µ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
            avg_confidence = sum(s['signal'].confidence for s in self.signal_history) / total_signals

            # –°–∞–º—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π —Å–∏–º–≤–æ–ª
            symbol_counts = {}
            action_counts = {'BUY': 0, 'SELL': 0, 'HOLD': 0}

            for record in self.signal_history:
                symbol = record['signal'].symbol
                action = record['signal'].action.value

                symbol_counts[symbol] = symbol_counts.get(symbol, 0) + 1
                action_counts[action] = action_counts.get(action, 0) + 1

            most_active_symbol = max(symbol_counts.items(), key=lambda x: x[1])[0] if symbol_counts else None

            return {
                'total_signals': total_signals,
                'avg_confidence': avg_confidence,
                'most_active_symbol': most_active_symbol,
                'signal_distribution': action_counts,
                'symbols_traded': list(symbol_counts.keys()),
                'recent_signals': len([s for s in self.signal_history[-20:]]),  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 20
            }

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")
            return {'error': str(e)}

    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞"""
        logger.info("‚ö° –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ —Å–∏–≥–Ω–∞–ª–æ–≤")

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats = await self.get_signal_statistics()
        logger.info(f"üìä –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤: {stats}")

        self.processed_signals.clear()
        self.signal_history.clear()


# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ TradingEngine
class EventDataFixer:
    """–ü–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π"""

    @staticmethod
    def fix_analysis_data(data: Dict) -> Dict:
        """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è Event Bus"""
        fixed_data = data.copy()

        # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ analysis —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        if 'analysis' in fixed_data:
            analysis = fixed_data['analysis']

            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è
            if 'action' not in analysis:
                analysis['action'] = 'HOLD'

            if 'confidence' not in analysis:
                analysis['confidence'] = 0.0

            if 'reasoning' not in analysis:
                analysis['reasoning'] = '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö'

            if 'symbol' not in analysis:
                analysis['symbol'] = fixed_data.get('symbol', 'UNKNOWN')

        return fixed_data