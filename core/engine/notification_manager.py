# core/engine/notification_manager.py
"""
–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ —á–µ—Ä–µ–∑ Telegram –∏ –¥—Ä—É–≥–∏–µ –∫–∞–Ω–∞–ª—ã
"""
from typing import Optional
from loguru import logger

from config.settings import Settings
from core.event_bus import EventBus, Event, EventType
from notifications.telegram_bot import TelegramBot


class NotificationManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""

    def __init__(self, settings: Settings, event_bus: EventBus):
        self.settings = settings
        self.event_bus = event_bus
        self.telegram_bot: Optional[TelegramBot] = None

    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        logger.info("üì± –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")

        await self._initialize_telegram()
        self._subscribe_to_events()

    async def _initialize_telegram(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞"""

        if not self.settings.telegram_bot_token:
            logger.info("‚ö†Ô∏è Telegram Bot Token –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return

        try:
            self.telegram_bot = TelegramBot(
                self.settings.telegram_bot_token,
                self.event_bus
            )
            await self.telegram_bot.start()
            logger.info("‚úÖ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Telegram –±–æ—Ç–∞: {e}")

    def _subscribe_to_events(self):
        """–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""

        # –¢–æ—Ä–≥–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è
        self.event_bus.subscribe(EventType.SIGNAL_GENERATED, self._on_signal_generated)
        self.event_bus.subscribe(EventType.ORDER_PLACED, self._on_order_placed)
        self.event_bus.subscribe(EventType.ORDER_FILLED, self._on_order_filled)
        self.event_bus.subscribe(EventType.POSITION_OPENED, self._on_position_opened)
        self.event_bus.subscribe(EventType.POSITION_CLOSED, self._on_position_closed)

        # –°–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
        self.event_bus.subscribe(EventType.RISK_ALERT, self._on_risk_alert)
        self.event_bus.subscribe(EventType.SYSTEM_ERROR, self._on_system_error)

    async def _on_signal_generated(self, event: Event):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç–æ—Ä–≥–æ–≤–æ–º —Å–∏–≥–Ω–∞–ª–µ"""
        data = event.data

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–∏–ª—å–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
        confidence = data.get('confidence', 0)
        if confidence < 0.7:
            return

        message = f"""
üéØ <b>–¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª</b>

–°–∏–º–≤–æ–ª: <b>{data.get('symbol', 'N/A')}</b>
–î–µ–π—Å—Ç–≤–∏–µ: <b>{data.get('action', 'N/A').upper()}</b>
–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.1%}
–°—Ç—Ä–∞—Ç–µ–≥–∏—è: <i>{data.get('strategy', 'N/A')}</i>

{data.get('reasoning', '')}
"""

        await self._send_notification(message, priority="high")

    async def _on_order_placed(self, event: Event):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–∞–∑–º–µ—â–µ–Ω–Ω–æ–º –æ—Ä–¥–µ—Ä–µ"""
        data = event.data

        message = f"""
üìù <b>–û—Ä–¥–µ—Ä —Ä–∞–∑–º–µ—â–µ–Ω</b>

–°–∏–º–≤–æ–ª: <b>{data.get('symbol', 'N/A')}</b>
–¢–∏–ø: {data.get('side', 'N/A').upper()}
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {data.get('quantity', 'N/A')}
–°—Ç—Ä–∞—Ç–µ–≥–∏—è: <i>{data.get('strategy', 'N/A')}</i>
"""

        await self._send_notification(message, priority="medium")

    async def _on_order_filled(self, event: Event):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏—Å–ø–æ–ª–Ω–µ–Ω–Ω–æ–º –æ—Ä–¥–µ—Ä–µ"""
        data = event.data

        message = f"""
‚úÖ <b>–û—Ä–¥–µ—Ä –∏—Å–ø–æ–ª–Ω–µ–Ω</b>

–°–∏–º–≤–æ–ª: <b>{data.get('symbol', 'N/A')}</b>
–¢–∏–ø: {data.get('side', 'N/A').upper()}
–¶–µ–Ω–∞: ${data.get('price', 0):.2f}
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {data.get('quantity', 'N/A')}
"""

        await self._send_notification(message, priority="high")

    async def _on_position_opened(self, event: Event):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–∫—Ä—ã—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏"""
        data = event.data

        message = f"""
üü¢ <b>–ü–æ–∑–∏—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∞</b>

–°–∏–º–≤–æ–ª: <b>{data.get('symbol', 'N/A')}</b>
–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {data.get('side', 'N/A').upper()}
–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: ${data.get('entry_price', 0):.2f}
–û–±—ä–µ–º: {data.get('quantity', 'N/A')}
–°—Ç—Ä–∞—Ç–µ–≥–∏—è: <i>{data.get('strategy', 'N/A')}</i>
"""

        await self._send_notification(message, priority="high")

    async def _on_position_closed(self, event: Event):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–∫—Ä—ã—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏"""
        data = event.data

        pnl = data.get('pnl', 0)
        pnl_percent = data.get('pnl_percent', 0)

        emoji = "üü¢" if pnl > 0 else "üî¥" if pnl < 0 else "‚ö™"

        message = f"""
{emoji} <b>–ü–æ–∑–∏—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞</b>

–°–∏–º–≤–æ–ª: <b>{data.get('symbol', 'N/A')}</b>
PnL: <code>${pnl:+.2f} ({pnl_percent:+.2f}%)</code>
–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {data.get('duration', 'N/A')}
–°—Ç—Ä–∞—Ç–µ–≥–∏—è: <i>{data.get('strategy', 'N/A')}</i>
"""

        await self._send_notification(message, priority="high")

    async def _on_risk_alert(self, event: Event):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–∏—Å–∫-–∞–ª–µ—Ä—Ç–µ"""
        data = event.data

        message = f"""
‚ö†Ô∏è <b>–†–ò–°–ö –ê–õ–ï–†–¢</b>

–¢–∏–ø: {data.get('type', 'N/A')}
–£—Ä–æ–≤–µ–Ω—å: {data.get('level', 'N/A')}

{data.get('message', '–ü—Ä–µ–≤—ã—à–µ–Ω —É—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞')}

<i>–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–∑–∏—Ü–∏–∏</i>
"""

        await self._send_notification(message, priority="critical")

    async def _on_system_error(self, event: Event):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–∏—Å—Ç–µ–º–Ω–æ–π –æ—à–∏–±–∫–µ"""
        data = event.data

        message = f"""
üî¥ <b>–°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞</b>

–ö–æ–º–ø–æ–Ω–µ–Ω—Ç: {data.get('component', 'N/A')}
–û—à–∏–±–∫–∞: {data.get('error', 'N/A')}

<i>–°–∏—Å—Ç–µ–º–∞ –ø—ã—Ç–∞–µ—Ç—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É...</i>
"""

        await self._send_notification(message, priority="critical")

    async def _send_notification(self, message: str, priority: str = "medium"):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞–Ω–∞–ª—ã"""

        try:
            # Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            if self.telegram_bot:
                await self._send_telegram_notification(message, priority)

            # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ –∫–∞–Ω–∞–ª—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:
            # - Email
            # - Discord
            # - Slack
            # - Push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

    async def _send_telegram_notification(self, message: str, priority: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram"""

        try:
            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
            if priority == "low" and not self._should_send_low_priority():
                return

            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
            await self.telegram_bot._broadcast(message)

            logger.debug(f"üì± Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {priority})")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

    def _should_send_low_priority(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∏–∑–∫–æ–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""

        # –ú–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ª–æ–≥–∏–∫—É —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:
        # - –í—Ä–µ–º—è —Å—É—Ç–æ–∫
        # - –ß–∞—Å—Ç–æ—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        # - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        return True  # –ü–æ–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ

    async def send_custom_notification(self, message: str, priority: str = "medium"):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""

        logger.info(f"üì± –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {priority}")
        await self._send_notification(message, priority)

    async def send_daily_report(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""

        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        report = """
üìä <b>–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç</b>

üí∞ –ü–æ—Ä—Ç—Ñ–µ–ª—å: $10,500 (+2.5%)
üìà –û—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π: 3
‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: 8/12 (66.7%)
‚ö†Ô∏è –ú–∞–∫—Å. –ø—Ä–æ—Å–∞–¥–∫–∞: -1.2%

üéØ –õ—É—á—à–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: SimpleMomentum (+3.1%)
"""

        await self._send_notification(report, priority="medium")

    async def send_system_status(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã"""

        status_message = """
ü§ñ <b>–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã</b>

üü¢ –¢–æ—Ä–≥–æ–≤—ã–π –¥–≤–∏–∂–æ–∫: –ê–∫—Ç–∏–≤–µ–Ω
üü¢ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∏—Ä–∂–∞–º: OK
üü¢ AI –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä: –†–∞–±–æ—Ç–∞–µ—Ç
üü° –†–∏—Å–∫-—Å–∫–æ—Ä: 25/100

‚è± –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: 4—á 23–º
"""

        await self._send_notification(status_message, priority="low")

    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        logger.info("üì± –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
        shutdown_message = """
üõë <b>–°–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞</b>

–¢–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É.
–í—Å–µ –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–∫—Ä—ã—Ç—ã.

<i>–î–æ –≤—Å—Ç—Ä–µ—á–∏! üëã</i>
"""

        await self._send_notification(shutdown_message, priority="high")

        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Telegram –±–æ—Ç–∞
        if self.telegram_bot:
            await self.telegram_bot.stop()