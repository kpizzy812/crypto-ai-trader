# core/engine/exchange_manager.py - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
"""
–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è–º–∏ –∫ –±–∏—Ä–∂–∞–º - –ò–°–ü–†–ê–í–õ–ï–ù–û
"""
from typing import Dict, List, Optional
from loguru import logger
import asyncio

from config.settings import Settings
from core.event_bus import EventBus, Event, EventType
from core.order_manager import OrderManager
from exchange.bybit_client import BybitClient
from exchange.binance_client import BinanceClient


class ExchangeManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –±–∏—Ä–∂–∞–º - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø"""

    def __init__(self, settings: Settings, event_bus: EventBus):
        self.settings = settings
        self.event_bus = event_bus
        self.exchanges = {}
        self.order_managers = {}
        self._connection_status = {}

    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –±–∏—Ä–∂–∞–º"""
        logger.info("üîå –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –±–∏—Ä–∂–∞–º")

        # –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
        await self._initialize_bybit()
        await self._initialize_binance()

        if not self.exchanges:
            logger.warning("‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –±–∏—Ä–∂–∞–º!")
            logger.info("‚ÑπÔ∏è –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –µ—Å–ª–∏ API –∫–ª—é—á–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏")
        else:
            logger.info(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ –±–∏—Ä–∂–∞–º: {list(self.exchanges.keys())}")

    async def _initialize_bybit(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Bybit"""
        if not self.settings.bybit_api_key or not self.settings.bybit_api_secret:
            logger.info("‚ö†Ô∏è Bybit API –∫–ª—é—á–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
            return

        try:
            logger.info("üîÑ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Bybit...")

            bybit_client = BybitClient(
                self.settings.bybit_api_key,
                self.settings.bybit_api_secret,
                self.settings.bybit_testnet
            )

            # –¢–∞–π–º–∞—É—Ç –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            await asyncio.wait_for(bybit_client.connect(), timeout=30.0)

            # –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            try:
                balance = await asyncio.wait_for(bybit_client.get_balance(), timeout=10.0)
                logger.info(f"‚úÖ Bybit –±–∞–ª–∞–Ω—Å –ø–æ–ª—É—á–µ–Ω: {len(balance)} –∞–∫—Ç–∏–≤–æ–≤")
            except Exception as balance_error:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å Bybit: {balance_error}")
                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º, —Ç–∞–∫ –∫–∞–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å

            self.exchanges['bybit'] = bybit_client
            self.order_managers['bybit'] = OrderManager(bybit_client, self.event_bus)
            await self.order_managers['bybit'].start()
            self._connection_status['bybit'] = True

            logger.info("‚úÖ Bybit –ø–æ–¥–∫–ª—é—á–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ç–æ—Ä–≥–æ–≤–ª–µ")

        except asyncio.TimeoutError:
            logger.error("‚ùå Timeout –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Bybit")
            self._connection_status['bybit'] = False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Bybit: {e}")
            self._connection_status['bybit'] = False

    async def _initialize_binance(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Binance"""
        if not self.settings.binance_api_key or not self.settings.binance_api_secret:
            logger.info("‚ö†Ô∏è Binance API –∫–ª—é—á–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
            return

        try:
            logger.info("üîÑ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Binance...")

            binance_client = BinanceClient(
                self.settings.binance_api_key,
                self.settings.binance_api_secret,
                self.settings.binance_testnet
            )

            # –¢–∞–π–º–∞—É—Ç –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            await asyncio.wait_for(binance_client.connect(), timeout=30.0)

            # –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            try:
                balance = await asyncio.wait_for(binance_client.get_balance(), timeout=10.0)
                logger.info(f"‚úÖ Binance –±–∞–ª–∞–Ω—Å –ø–æ–ª—É—á–µ–Ω: {len(balance)} –∞–∫—Ç–∏–≤–æ–≤")
            except Exception as balance_error:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å Binance: {balance_error}")

            self.exchanges['binance'] = binance_client
            self.order_managers['binance'] = OrderManager(binance_client, self.event_bus)
            await self.order_managers['binance'].start()
            self._connection_status['binance'] = True

            logger.info("‚úÖ Binance –ø–æ–¥–∫–ª—é—á–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ç–æ—Ä–≥–æ–≤–ª–µ")

        except asyncio.TimeoutError:
            logger.error("‚ùå Timeout –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Binance")
            self._connection_status['binance'] = False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Binance: {e}")
            self._connection_status['binance'] = False

    async def get_market_data(self, symbol: str, timeframe: str, limit: int = 100):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å –ø–µ—Ä–≤–æ–π –¥–æ—Å—Ç—É–ø–Ω–æ–π –±–∏—Ä–∂–∏"""
        if not self.exchanges:
            logger.warning("‚ö†Ô∏è –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –±–∏—Ä–∂, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ")
            from utils.helpers import create_sample_data
            return create_sample_data(symbol, periods=limit)

        # –ü—Ä–æ–±—É–µ–º –∫–∞–∂–¥—É—é –±–∏—Ä–∂—É –ø–æ –æ—á–µ—Ä–µ–¥–∏
        for exchange_name, exchange in self.exchanges.items():
            try:
                logger.debug(f"üì° –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö {symbol} —Å {exchange_name}")

                ohlcv = await asyncio.wait_for(
                    exchange.get_ohlcv(symbol, timeframe, limit),
                    timeout=15.0
                )

                if ohlcv and len(ohlcv) > 0:
                    import pandas as pd
                    df = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
                    df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
                    df.set_index('timestamp', inplace=True)

                    logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(df)} —Å–≤–µ—á–µ–π {symbol} —Å {exchange_name}")
                    return df

            except asyncio.TimeoutError:
                logger.warning(f"‚è∞ Timeout –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å {exchange_name}")
                continue
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å {exchange_name}: {e}")
                continue

        # –ï—Å–ª–∏ –≤—Å–µ –±–∏—Ä–∂–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã
        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è {symbol}, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–µ—Å—Ç–æ–≤—ã–µ")
        from utils.helpers import create_sample_data
        return create_sample_data(symbol, periods=limit)

    async def place_order(self, symbol: str, side: str, order_type: str,
                          quantity: float, price: float = None, strategy: str = "manual"):
        """–†–∞–∑–º–µ—â–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ —á–µ—Ä–µ–∑ –ø–µ—Ä–≤—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é –±–∏—Ä–∂—É"""
        if not self.order_managers:
            raise Exception("No order managers available")

        # –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é –±–∏—Ä–∂—É
        for exchange_name, order_manager in self.order_managers.items():
            try:
                from decimal import Decimal

                logger.info(f"üìù –†–∞–∑–º–µ—â–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ {symbol} {side} –Ω–∞ {exchange_name}")

                result = await order_manager.place_order(
                    symbol=symbol,
                    side=side,
                    order_type=order_type,
                    quantity=Decimal(str(quantity)),
                    price=Decimal(str(price)) if price else None,
                    strategy=strategy
                )

                logger.info(f"‚úÖ –û—Ä–¥–µ—Ä —Ä–∞–∑–º–µ—â–µ–Ω: {result.order.id}")
                return result

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞ –Ω–∞ {exchange_name}: {e}")
                continue

        raise Exception("Failed to place order on any exchange")

    async def get_connected_exchanges(self) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –±–∏—Ä–∂"""
        connected = []
        for name, status in self._connection_status.items():
            if status and name in self.exchanges:
                connected.append(name)
        return connected

    async def get_connection_status(self) -> Dict[str, bool]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π"""
        return self._connection_status.copy()

    async def test_all_connections(self) -> Dict[str, bool]:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π"""
        results = {}

        for exchange_name, exchange in self.exchanges.items():
            try:
                # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç - –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–∏–∫–µ—Ä–∞
                ticker = await asyncio.wait_for(
                    exchange.get_ticker("BTCUSDT"),
                    timeout=10.0
                )
                results[exchange_name] = ticker is not None
                logger.info(f"‚úÖ {exchange_name} connection test passed")

            except Exception as e:
                results[exchange_name] = False
                logger.warning(f"‚ö†Ô∏è {exchange_name} connection test failed: {e}")

        return results

    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π"""
        logger.info("üîå –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –±–∏—Ä–∂–∞–º")

        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ order managers
        for exchange_name, order_manager in self.order_managers.items():
            try:
                await order_manager.stop()
                logger.info(f"‚úÖ Order manager {exchange_name} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ order manager {exchange_name}: {e}")

        # –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –±–∏—Ä–∂–∞–º
        for exchange_name, exchange in self.exchanges.items():
            try:
                await exchange.disconnect()
                logger.info(f"‚úÖ {exchange_name} –æ—Ç–∫–ª—é—á–µ–Ω")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è {exchange_name}: {e}")

        self.exchanges.clear()
        self.order_managers.clear()
        self._connection_status.clear()

        logger.info("‚úÖ –í—Å–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∏—Ä–∂–∞–º –∑–∞–∫—Ä—ã—Ç—ã")

    async def get_balance_summary(self) -> Dict[str, Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –±–∞–ª–∞–Ω—Å–æ–≤ —Å–æ –≤—Å–µ—Ö –±–∏—Ä–∂"""
        summary = {}

        for exchange_name, exchange in self.exchanges.items():
            try:
                balance = await asyncio.wait_for(exchange.get_balance(), timeout=10.0)
                summary[exchange_name] = {
                    'connected': True,
                    'balances': balance,
                    'total_assets': len(balance)
                }
            except Exception as e:
                summary[exchange_name] = {
                    'connected': False,
                    'error': str(e),
                    'balances': {},
                    'total_assets': 0
                }

        return summary