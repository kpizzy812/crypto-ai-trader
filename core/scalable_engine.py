# core/scalable_engine.py
"""
–ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –¥–≤–∏–∂–∫–∞ –¥–ª—è –ø—Ä–∏–µ–º–∞ –¥–µ–ø–æ–∑–∏—Ç–æ–≤
"""
import asyncio
from typing import Dict, List, Optional, Any
from decimal import Decimal
from datetime import datetime
from loguru import logger
from dataclasses import dataclass
from enum import Enum

from config.settings import Settings
from config.trading_config import TradingConfig
from core.event_bus import EventBus, Event, EventType
from models.trading_signals import TradingSignal, MarketState


class AccountType(str, Enum):
    PERSONAL = "personal"
    CLIENT = "client"
    FUND = "fund"


@dataclass
class ClientAccount:
    """–ö–ª–∏–µ–Ω—Ç—Å–∫–∏–π –∞–∫–∫–∞—É–Ω—Ç"""
    id: str
    name: str
    account_type: AccountType
    initial_deposit: Decimal
    current_balance: Decimal
    allocated_strategies: List[str]
    risk_profile: str  # conservative, moderate, aggressive
    fee_rate: Decimal  # % –∫–æ–º–∏—Å—Å–∏—è —Å –ø—Ä–∏–±—ã–ª–∏
    created_at: datetime
    active: bool = True


class MultiAccountEngine:
    """–ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º—ã–π –¥–≤–∏–∂–æ–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏"""

    def __init__(self, settings: Settings, trading_config: TradingConfig):
        self.settings = settings
        self.trading_config = trading_config

        # Core –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self.event_bus = EventBus()
        self.accounts: Dict[str, ClientAccount] = {}
        self.account_portfolios = {}
        self.account_strategies = {}

        # –û–±—â–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—ã
        self.exchange_manager = None
        self.market_analyzer = None
        self.risk_manager = None

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.performance_tracker = PerformanceTracker()

        self.is_running = False

    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º—É–ª—å—Ç–∏-–∞–∫–∫–∞—É–Ω—Ç –¥–≤–∏–∂–∫–∞"""
        logger.info("üè¢ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ–≥–æ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –¥–≤–∏–∂–∫–∞")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—â–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        await self.event_bus.start()

        # –ó–∞–≥—Ä—É–∑–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        await self._load_client_accounts()

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—â–∏—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
        await self._initialize_shared_components()

        logger.info(f"‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {len(self.accounts)}")

    async def _load_client_accounts(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–ª–∏–µ–Ω—Ç—Å–∫–∏—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∏–∑ –±–∞–∑—ã"""
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        # –ü–æ–∫–∞ —Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã

        # –õ–∏—á–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç
        personal_account = ClientAccount(
            id="personal_001",
            name="Personal Trading",
            account_type=AccountType.PERSONAL,
            initial_deposit=Decimal("10000"),
            current_balance=Decimal("10000"),
            allocated_strategies=["AI_Driven", "SimpleMomentum"],
            risk_profile="moderate",
            fee_rate=Decimal("0"),  # –ë–µ–∑ –∫–æ–º–∏—Å—Å–∏–∏ –¥–ª—è –ª–∏—á–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
            created_at=datetime.utcnow()
        )

        self.accounts[personal_account.id] = personal_account
        logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω –ª–∏—á–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç: {personal_account.name}")

    async def add_client_account(self, account_data: Dict) -> str:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞"""

        account = ClientAccount(
            id=f"client_{len(self.accounts) + 1:03d}",
            name=account_data['name'],
            account_type=AccountType.CLIENT,
            initial_deposit=Decimal(str(account_data['deposit'])),
            current_balance=Decimal(str(account_data['deposit'])),
            allocated_strategies=account_data.get('strategies', ["AI_Driven"]),
            risk_profile=account_data.get('risk_profile', 'moderate'),
            fee_rate=Decimal(str(account_data.get('fee_rate', '0.20'))),  # 20% –∫–æ–º–∏—Å—Å–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            created_at=datetime.utcnow()
        )

        self.accounts[account.id] = account

        # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞
        await self._create_account_portfolio(account)

        logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–π –∞–∫–∫–∞—É–Ω—Ç: {account.name} (${account.initial_deposit})")

        return account.id

    async def _create_account_portfolio(self, account: ClientAccount):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞"""
        from core.portfolio import Portfolio

        # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Ä—Ç—Ñ–µ–ª—å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
        portfolio = Portfolio(initial_balance=account.current_balance)
        self.account_portfolios[account.id] = portfolio

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞
        strategies = await self._setup_account_strategies(account)
        self.account_strategies[account.id] = strategies

    async def _setup_account_strategies(self, account: ClientAccount) -> List:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞"""
        strategies = []

        for strategy_name in account.allocated_strategies:
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∏—Å–∫-–ø—Ä–æ—Ñ–∏–ª—è
            strategy_config = self._get_strategy_config(strategy_name, account.risk_profile)

            if strategy_name == "AI_Driven":
                from trading.strategies.ai_driven import AIDrivenStrategy
                strategy = AIDrivenStrategy(strategy_config, self.event_bus)
            elif strategy_name == "SimpleMomentum":
                from trading.strategies.simple_momentum import SimpleMomentumStrategy
                strategy = SimpleMomentumStrategy(strategy_config)

            strategy.account_id = account.id  # –ü—Ä–∏–≤—è–∑–∫–∞ –∫ –∞–∫–∫–∞—É–Ω—Ç—É
            strategy.active = True
            strategies.append(strategy)

        return strategies

    def _get_strategy_config(self, strategy_name: str, risk_profile: str) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–ª—è —Ä–∏—Å–∫-–ø—Ä–æ—Ñ–∏–ª—è"""

        base_config = self.trading_config.technical_indicators.copy()

        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ–¥ —Ä–∏—Å–∫-–ø—Ä–æ—Ñ–∏–ª—å
        if risk_profile == "conservative":
            return {
                **base_config,
                'position_size_percent': 1.0,  # 1% –ø–æ–∑–∏—Ü–∏–∏
                'min_confidence': 0.8,  # –í—ã—Å–æ–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
                'max_positions': 3,  # –ú–∞–∫—Å–∏–º—É–º 3 –ø–æ–∑–∏—Ü–∏–∏
                'risk_multiplier': 0.5  # –°–Ω–∏–∂–µ–Ω–Ω—ã–π —Ä–∏—Å–∫
            }
        elif risk_profile == "aggressive":
            return {
                **base_config,
                'position_size_percent': 3.0,  # 3% –ø–æ–∑–∏—Ü–∏–∏
                'min_confidence': 0.6,  # –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
                'max_positions': 8,  # –î–æ 8 –ø–æ–∑–∏—Ü–∏–π
                'risk_multiplier': 1.5  # –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π —Ä–∏—Å–∫
            }
        else:  # moderate
            return {
                **base_config,
                'position_size_percent': 2.0,  # 2% –ø–æ–∑–∏—Ü–∏–∏
                'min_confidence': 0.7,  # –•–æ—Ä–æ—à–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
                'max_positions': 5,  # –î–æ 5 –ø–æ–∑–∏—Ü–∏–π
                'risk_multiplier': 1.0  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ä–∏—Å–∫
            }

    async def start_trading(self):
        """–ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–ª–∏ –¥–ª—è –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
        if self.is_running:
            logger.warning("–î–≤–∏–∂–æ–∫ —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return

        await self.initialize()
        self.is_running = True

        logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–ª–∏ –¥–ª—è –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤")

        # –ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞
        try:
            while self.is_running:
                await self._trading_cycle()
                await asyncio.sleep(30)  # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥

        except KeyboardInterrupt:
            logger.info("‚èπÔ∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        finally:
            await self.stop()

    async def _trading_cycle(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ç–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª –¥–ª—è –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
        try:
            # –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ (–æ–±—â–∏–π –¥–ª—è –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤)
            market_analysis = await self._perform_market_analysis()

            # –¢–æ—Ä–≥–æ–≤–ª—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
            for account_id, account in self.accounts.items():
                if not account.active:
                    continue

                await self._trade_for_account(account_id, market_analysis)

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            await self.performance_tracker.update_stats(self.accounts, self.account_portfolios)

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–æ—Ä–≥–æ–≤–æ–º —Ü–∏–∫–ª–µ: {e}")

    async def _perform_market_analysis(self) -> Dict[str, MarketState]:
        """–û–±—â–∏–π –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ –¥–ª—è –≤—Å–µ—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä"""
        market_states = {}

        for trading_pair in self.trading_config.trading_pairs:
            if not trading_pair.enabled:
                continue

            try:
                # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                market_data = await self.exchange_manager.get_market_data(
                    trading_pair.symbol,
                    self.trading_config.primary_timeframe,
                    100
                )

                if not market_data.empty:
                    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä—ã–Ω–∫–∞
                    current_price = Decimal(str(market_data['close'].iloc[-1]))
                    volume_24h = Decimal(str(market_data['volume'].sum()))
                    price_change = float(
                        (market_data['close'].iloc[-1] - market_data['close'].iloc[0]) / market_data['close'].iloc[
                            0] * 100)

                    market_state = MarketState(
                        symbol=trading_pair.symbol,
                        current_price=current_price,
                        volume_24h=volume_24h,
                        price_change_24h=price_change,
                        timestamp=datetime.utcnow()
                    )

                    market_states[trading_pair.symbol] = market_state

                    # –ó–∞–ø—É—Å–∫ AI –∞–Ω–∞–ª–∏–∑–∞
                    await self.market_analyzer.analyze_symbol(trading_pair.symbol)

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {trading_pair.symbol}: {e}")

        return market_states

    async def _trade_for_account(self, account_id: str, market_analysis: Dict[str, MarketState]):
        """–¢–æ—Ä–≥–æ–≤–ª—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞"""
        try:
            account = self.accounts[account_id]
            portfolio = self.account_portfolios[account_id]
            strategies = self.account_strategies[account_id]

            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è
            portfolio_stats = await portfolio.get_portfolio_stats()

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞
            if not await self._check_account_limits(account, portfolio_stats):
                logger.warning(f"‚ö†Ô∏è –ê–∫–∫–∞—É–Ω—Ç {account.name} –ø—Ä–µ–≤—ã—Å–∏–ª –ª–∏–º–∏—Ç—ã")
                return

            # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞
            for strategy in strategies:
                if not strategy.active:
                    continue

                await self._execute_strategy_for_account(account_id, strategy, market_analysis)

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account_id}: {e}")

    async def _execute_strategy_for_account(self, account_id: str, strategy, market_analysis: Dict[str, MarketState]):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞"""
        try:
            for symbol, market_state in market_analysis.items():
                # –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑ –∫—ç—à–∞
                cached_analysis = self.market_analyzer.get_cached_analysis(symbol)

                if cached_analysis:
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
                    if await strategy.should_enter(cached_analysis['ai_analysis']):
                        await self._open_position_for_account(account_id, symbol, cached_analysis, strategy)

                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–∑–∏—Ü–∏–π
                    await self._check_exit_conditions_for_account(account_id, symbol, cached_analysis, strategy)

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ {strategy.name} –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account_id}: {e}")

    async def _open_position_for_account(self, account_id: str, symbol: str, analysis: Dict, strategy):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞"""
        try:
            account = self.accounts[account_id]
            portfolio = self.account_portfolios[account_id]

            # –†–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞
            position_size = await self._calculate_account_position_size(account, portfolio, analysis)

            if position_size > 0:
                # –†–∞–∑–º–µ—â–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ —á–µ—Ä–µ–∑ exchange_manager
                order = await self.exchange_manager.place_order(
                    symbol=symbol,
                    side=analysis['ai_analysis']['action'].lower(),
                    order_type="market",
                    quantity=float(position_size),
                    strategy=f"{strategy.name}_{account_id}"
                )

                logger.info(f"üìà –û—Ç–∫—Ä—ã—Ç–∞ –ø–æ–∑–∏—Ü–∏—è –¥–ª—è {account.name}: {symbol} {analysis['ai_analysis']['action']}")

                # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
                await self._send_account_notification(account, f"–û—Ç–∫—Ä—ã—Ç–∞ –ø–æ–∑–∏—Ü–∏—è {symbol}", "position_opened")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account_id}: {e}")

    async def _calculate_account_position_size(self, account: ClientAccount, portfolio, analysis: Dict) -> Decimal:
        """–†–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞"""
        try:
            portfolio_stats = await portfolio.get_portfolio_stats()
            available_balance = float(portfolio_stats['available_balance'])

            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞
            strategies = self.account_strategies[account.id]
            position_percent = 2.0  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é

            if strategies:
                position_percent = strategies[0].config.get('position_size_percent', 2.0)

            # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –Ω–∞ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å AI
            confidence = analysis['ai_analysis'].get('adjusted_confidence', 0.5)
            adjusted_percent = position_percent * confidence

            # –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –≤ USD
            position_value = available_balance * (adjusted_percent / 100)

            # –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Ü–µ–Ω–∞ (–Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∞—Ç—å –∏–∑ –∞–Ω–∞–ª–∏–∑–∞)
            estimated_price = 45000  # –ó–∞–≥–ª—É—à–∫–∞

            return Decimal(str(position_value / estimated_price))

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏: {e}")
            return Decimal("0")

    async def _check_account_limits(self, account: ClientAccount, portfolio_stats: Dict) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞"""
        try:
            current_balance = float(portfolio_stats['total_value'])
            initial_balance = float(account.initial_deposit)

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ—Å–∞–¥–∫–∏
            drawdown_percent = ((initial_balance - current_balance) / initial_balance) * 100

            if drawdown_percent > 20:  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞ 20%
                logger.warning(f"‚ö†Ô∏è –ê–∫–∫–∞—É–Ω—Ç {account.name} –ø—Ä–µ–≤—ã—Å–∏–ª –ª–∏–º–∏—Ç –ø—Ä–æ—Å–∞–¥–∫–∏: {drawdown_percent:.2f}%")
                return False

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞
            if current_balance < initial_balance * 0.5:  # –ú–∏–Ω–∏–º—É–º 50% –æ—Ç –¥–µ–ø–æ–∑–∏—Ç–∞
                logger.warning(f"‚ö†Ô∏è –ê–∫–∫–∞—É–Ω—Ç {account.name} –¥–æ—Å—Ç–∏–≥ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞")
                return False

            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–æ–≤: {e}")
            return False

    async def get_account_performance(self, account_id: str) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∞–∫–∫–∞—É–Ω—Ç–∞"""
        try:
            account = self.accounts.get(account_id)
            portfolio = self.account_portfolios.get(account_id)

            if not account or not portfolio:
                return {'error': 'Account not found'}

            portfolio_stats = await portfolio.get_portfolio_stats()

            # –†–∞—Å—á–µ—Ç –∫–æ–º–∏—Å—Å–∏–∏
            profit = float(portfolio_stats['total_pnl'])
            commission = 0

            if profit > 0 and account.account_type == AccountType.CLIENT:
                commission = profit * float(account.fee_rate)

            return {
                'account_id': account_id,
                'account_name': account.name,
                'account_type': account.account_type.value,
                'initial_deposit': float(account.initial_deposit),
                'current_balance': float(portfolio_stats['total_value']),
                'total_pnl': profit,
                'pnl_percent': ((float(portfolio_stats['total_value']) - float(account.initial_deposit)) / float(
                    account.initial_deposit)) * 100,
                'commission_owed': commission,
                'net_profit': profit - commission,
                'positions_count': portfolio_stats['positions_count'],
                'risk_profile': account.risk_profile,
                'strategies': [s.name for s in self.account_strategies.get(account_id, [])],
                'active': account.active
            }

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ {account_id}: {e}")
            return {'error': str(e)}

    async def get_all_accounts_performance(self) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
        performances = []

        for account_id in self.accounts.keys():
            performance = await self.get_account_performance(account_id)
            performances.append(performance)

        return performances

    async def _send_account_notification(self, account: ClientAccount, message: str, notification_type: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞"""
        try:
            # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å–∏—Å—Ç–µ–º–æ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            # –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü–∞–º –∞–∫–∫–∞—É–Ω—Ç–æ–≤
            logger.info(f"üì± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è {account.name}: {message}")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–≤–∏–∂–∫–∞"""
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ–≥–æ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –¥–≤–∏–∂–∫–∞")
        self.is_running = False

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        final_performance = await self.get_all_accounts_performance()
        logger.info(f"üìä –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {len(final_performance)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤")

        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—â–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        if self.exchange_manager:
            await self.exchange_manager.stop()
        if self.event_bus:
            await self.event_bus.stop()


class PerformanceTracker:
    """–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã"""

    def __init__(self):
        self.daily_stats = {}
        self.monthly_stats = {}

    async def update_stats(self, accounts: Dict[str, ClientAccount], portfolios: Dict):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        try:
            today = datetime.utcnow().date()

            total_balance = 0
            total_profit = 0
            active_accounts = 0

            for account_id, account in accounts.items():
                if account.active and account_id in portfolios:
                    portfolio = portfolios[account_id]
                    stats = await portfolio.get_portfolio_stats()

                    total_balance += float(stats['total_value'])
                    total_profit += float(stats['total_pnl'])
                    active_accounts += 1

            self.daily_stats[today] = {
                'total_balance': total_balance,
                'total_profit': total_profit,
                'active_accounts': active_accounts,
                'timestamp': datetime.utcnow()
            }

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

    def get_performance_summary(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        if not self.daily_stats:
            return {'error': 'No performance data available'}

        latest_stats = list(self.daily_stats.values())[-1]

        return {
            'total_accounts': latest_stats['active_accounts'],
            'total_aum': latest_stats['total_balance'],  # Assets Under Management
            'total_profit': latest_stats['total_profit'],
            'avg_profit_per_account': latest_stats['total_profit'] / max(1, latest_stats['active_accounts']),
            'last_updated': latest_stats['timestamp'].isoformat()
        }