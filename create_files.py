#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞
–ó–∞–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —Ñ–∞–π–ª –≤ PyCharm: Right Click ‚Üí Run 'create_files'
"""

import os
from pathlib import Path

# –°–ª–æ–≤–∞—Ä—å: –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É ‚Üí —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
FILES_CONTENT = {
    "requirements.txt": """ccxt>=4.2.0
pandas>=2.0.0
numpy>=1.24.0
python-dotenv>=1.0.0
click>=8.1.0
pydantic>=2.5.0
aiohttp>=3.9.0
asyncio-mqtt>=0.13.0
redis>=5.0.0
psycopg2-binary>=2.9.0
sqlalchemy>=2.0.0
loguru>=0.7.0
pyyaml>=6.0
requests>=2.31.0""",

    "requirements-dev.txt": """# –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
pytest>=7.4.0
pytest-asyncio>=0.21.0
pytest-cov>=4.1.0
black>=23.7.0
isort>=5.12.0
flake8>=6.0.0
mypy>=1.5.0

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
ipython>=8.14.0
jupyter>=1.0.0
pre-commit>=3.3.0""",

    ".env.example": """# –û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
APP_NAME="Crypto AI Trader"
DEBUG=false
LOG_LEVEL="INFO"

# OpenAI API
OPENAI_API_KEY=your_openai_api_key_here

# Telegram Bot
TELEGRAM_BOT_TOKEN=your_telegram_bot_token_here

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
DATABASE_URL="sqlite:///./crypto_trader.db"
REDIS_URL="redis://localhost:6379"

# Bybit API (Testnet)
BYBIT_API_KEY=your_bybit_api_key_here
BYBIT_API_SECRET=your_bybit_api_secret_here
BYBIT_TESTNET=true

# Binance API (Testnet)
BINANCE_API_KEY=your_binance_api_key_here
BINANCE_API_SECRET=your_binance_api_secret_here
BINANCE_TESTNET=true""",

    ".gitignore": """# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
*.egg-info/
.installed.cfg
*.egg

# PyInstaller
*.manifest
*.spec

# Unit test / coverage reports
htmlcov/
.tox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
.hypothesis/
.pytest_cache/

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# IDE
.idea/
.vscode/
*.swp
*.swo

# Project specific
logs/
*.db
secrets/
!secrets/.env.example
data/historical/
backtest_results/
*.pid""",

    "config/__init__.py": """from .settings import Settings
from .trading_config import TradingConfig

__all__ = ['Settings', 'TradingConfig']""",

    "config/settings.py": """from pydantic_settings import BaseSettings
from typing import Optional

class Settings(BaseSettings):
    # –û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    app_name: str = "Crypto AI Trader"
    debug: bool = False
    log_level: str = "INFO"

    # API –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    openai_api_key: Optional[str] = None
    telegram_bot_token: Optional[str] = None

    # –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
    database_url: str = "sqlite:///./crypto_trader.db"
    redis_url: str = "redis://localhost:6379"

    # –ë–∏—Ä–∂–∏
    bybit_api_key: Optional[str] = None
    bybit_api_secret: Optional[str] = None
    bybit_testnet: bool = True

    binance_api_key: Optional[str] = None
    binance_api_secret: Optional[str] = None
    binance_testnet: bool = True

    class Config:
        env_file = ".env"
        case_sensitive = False

settings = Settings()""",

    "config/trading_config.py": """from pydantic import BaseModel
from typing import Dict, List
from decimal import Decimal

class RiskConfig(BaseModel):
    max_position_size_percent: float = 2.0  # % –æ—Ç –¥–µ–ø–æ–∑–∏—Ç–∞ –Ω–∞ —Å–¥–µ–ª–∫—É
    max_daily_loss_percent: float = 5.0     # % –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–Ω–µ–≤–Ω–æ–π –ø—Ä–æ—Å–∞–¥–∫–∏
    max_drawdown_percent: float = 15.0      # % –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –æ–±—â–µ–π –ø—Ä–æ—Å–∞–¥–∫–∏
    stop_loss_percent: float = 2.0          # % —Å—Ç–æ–ø-–ª–æ—Å—Å
    take_profit_percent: float = 4.0        # % —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç

class TradingPair(BaseModel):
    symbol: str
    min_quantity: Decimal
    tick_size: Decimal
    enabled: bool = True

class TradingConfig(BaseModel):
    # –¢–æ—Ä–≥—É–µ–º—ã–µ –ø–∞—Ä—ã
    trading_pairs: List[TradingPair] = [
        TradingPair(symbol="BTCUSDT", min_quantity=Decimal("0.001"), tick_size=Decimal("0.1")),
        TradingPair(symbol="ETHUSDT", min_quantity=Decimal("0.01"), tick_size=Decimal("0.01")),
        TradingPair(symbol="SOLUSDT", min_quantity=Decimal("0.1"), tick_size=Decimal("0.001")),
    ]

    # –¢–∞–π–º—Ñ—Ä–µ–π–º—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    timeframes: List[str] = ["5m", "15m", "1h", "4h"]
    primary_timeframe: str = "15m"

    # –†–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç
    risk: RiskConfig = RiskConfig()

    # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
    technical_indicators: Dict[str, Dict] = {
        "rsi": {"period": 14, "overbought": 70, "oversold": 30},
        "ema_fast": {"period": 9},
        "ema_slow": {"period": 21},
        "volume_sma": {"period": 20}
    }""",

    "cli.py": """import click
import asyncio
from loguru import logger
from config import Settings, TradingConfig
from utils.logger import setup_logger

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
setup_logger()

@click.group()
def cli():
    \"\"\"Crypto AI Trader CLI\"\"\"
    pass

@cli.command()
@click.option('--symbol', default='BTCUSDT', help='–¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞')
@click.option('--timeframe', default='5m', help='–¢–∞–π–º—Ñ—Ä–µ–π–º')
@click.option('--limit', default=100, help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π')
def analyze(symbol, timeframe, limit):
    \"\"\"–ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞\"\"\"
    asyncio.run(_analyze_market(symbol, timeframe, limit))

@cli.command()
@click.option('--exchange', default='bybit', help='–ë–∏—Ä–∂–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è')
def test_connection(exchange):
    \"\"\"–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∏—Ä–∂–µ\"\"\"
    asyncio.run(_test_exchange_connection(exchange))

@cli.command()
@click.option('--symbol', default='BTCUSDT', help='–¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞')
@click.option('--mock', is_flag=True, help='–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å mock AI')
def ai_analyze(symbol, mock):
    \"\"\"AI –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞\"\"\"
    asyncio.run(_ai_analyze_market(symbol, mock))

@cli.command()
def run():
    \"\"\"–ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –¥–≤–∏–∂–∫–∞\"\"\"
    asyncio.run(_run_trading_engine())

# –ë–∞–∑–æ–≤—ã–µ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥ (–±—É–¥—É—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω—ã –ø–æ–∑–∂–µ)
async def _analyze_market(symbol: str, timeframe: str, limit: int):
    click.echo(f"üîç –ê–Ω–∞–ª–∏–∑ {symbol} –Ω–∞ {timeframe} (Phase 0 - –±–∞–∑–æ–≤–∞—è –≤–µ—Ä—Å–∏—è)")
    click.echo("üìù –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –º–æ–¥—É–ª–∏ –∏–∑ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤")

async def _test_exchange_connection(exchange: str):
    click.echo(f"üîå –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ {exchange}")
    click.echo("üìù –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ exchange_collector.py")

async def _ai_analyze_market(symbol: str, mock: bool):
    click.echo(f"ü§ñ AI –∞–Ω–∞–ª–∏–∑ {symbol} (Mock —Ä–µ–∂–∏–º: {mock})")
    click.echo("üìù –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ mock_analyzer.py")

async def _run_trading_engine():
    click.echo("üöÄ –ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –¥–≤–∏–∂–∫–∞ (Phase 0)")
    click.echo("üìù –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ engine.py")

if __name__ == "__main__":
    cli()""",

    "main.py": """\"\"\"
–ì–ª–∞–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
\"\"\"
import asyncio
from loguru import logger

async def main():
    \"\"\"–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è\"\"\"
    logger.info("–ó–∞–ø—É—Å–∫ Crypto AI Trading Bot")
    logger.info("Phase 0 - –ë–∞–∑–æ–≤–∞—è –≤–µ—Ä—Å–∏—è")
    logger.info("–î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –≤—Å–µ –º–æ–¥—É–ª–∏ –∏–∑ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤")

    # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ø–æ–ª–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
    print("ü§ñ Crypto AI Trading Bot")
    print("üìã –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ CLI –¥–ª—è —Ä–∞–±–æ—Ç—ã: python cli.py --help")

if __name__ == "__main__":
    asyncio.run(main())""",

    # –û—Å–Ω–æ–≤–Ω—ã–µ __init__.py —Ñ–∞–π–ª—ã
    "core/__init__.py": "",
    "data/__init__.py": "",
    "ai/__init__.py": "",
    "utils/__init__.py": "",
    "trading/__init__.py": "",
    "risk/__init__.py": "",
    "notifications/__init__.py": "",
    "backtest/__init__.py": "",
    "api/__init__.py": "",
    "bot/__init__.py": "",
    "tests/__init__.py": "",
    "data/collectors/__init__.py": "",
    "data/processors/__init__.py": "",
    "data/storage/__init__.py": "",

    "README.md": """# ü§ñ Crypto AI Trading Bot

## üìã Phase 0 - –ë–∞–∑–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞

–≠—Ç–æ –±–∞–∑–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è AI —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞. 

### üöÄ –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç:

1. **–°–æ–∑–¥–∞–π—Ç–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã** –∏–∑ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ Claude
2. **–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ:**
   ```bash
   python -m venv venv
   source venv/bin/activate  # Linux/Mac
   # venv\\Scripts\\activate  # Windows
   ```

3. **–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:**
   ```bash
   pip install -r requirements.txt
   ```

4. **–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é:**
   ```bash
   cp .env.example .env
   # –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ .env —Å –≤–∞—à–∏–º–∏ API –∫–ª—é—á–∞–º–∏
   ```

5. **–¢–µ—Å—Ç CLI:**
   ```bash
   python cli.py --help
   ```

### üìÅ –°–ª–µ–¥—É—é—â–∏–µ —Ñ–∞–π–ª—ã –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å:

–ò–∑ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞ "Phase 0 - –°—Ç–∞—Ä—Ç–æ–≤—ã–π –∫–æ–¥":
- `core/exceptions.py`
- `core/engine.py`  
- `data/collectors/exchange_collector.py`
- `ai/mock_analyzer.py`
- `utils/logger.py`

–ò–∑ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞ "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã":
- `data/processors/technical_processor.py`
- `trading/strategies/base_strategy.py`
- `trading/strategies/simple_momentum.py`
- `tests/test_basic.py`

### ‚ö†Ô∏è –í–∞–∂–Ω–æ:
- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ testnet API –∫–ª—é—á–∏
- –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –¥–∞–≤–∞–π—Ç–µ –ø—Ä–∞–≤–∞ –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤
- –ù–∞—á–∏–Ω–∞–π—Ç–µ —Å –º–∞–ª—ã—Ö —Å—É–º–º –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

üéØ **–¶–µ–ª—å Phase 0:** –°–æ–∑–¥–∞—Ç—å —Ä–∞–±–æ—á—É—é –æ—Å–Ω–æ–≤—É –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è AI —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞."""
}


def create_file(file_path: str, content: str):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º"""
    path = Path(file_path)

    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    path.parent.mkdir(parents=True, exist_ok=True)

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
    with open(path, 'w', encoding='utf-8') as f:
        f.write(content)

    print(f"‚úÖ –°–æ–∑–¥–∞–Ω: {file_path}")


def main():
    """–°–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö –±–∞–∑–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    print("üöÄ –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞...")

    created_count = 0
    for file_path, content in FILES_CONTENT.items():
        try:
            create_file(file_path, content)
            created_count += 1
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è {file_path}: {e}")

    print(f"\nüéâ –°–æ–∑–¥–∞–Ω–æ {created_count} –±–∞–∑–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤!")
    print("\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("1. –£–¥–∞–ª–∏—Ç–µ —ç—Ç–æ—Ç —Ñ–∞–π–ª (create_files.py)")
    print("2. –°–æ–∑–¥–∞–π—Ç–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ .py —Ñ–∞–π–ª—ã –∏–∑ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ Claude –≤—Ä—É—á–Ω—É—é")
    print("3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ virtual environment –≤ PyCharm")
    print("4. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install -r requirements.txt")
    print("5. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ .env.example –≤ .env –∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ API –∫–ª—é—á–∏")
    print("6. –¢–µ—Å—Ç: python cli.py --help")

    print("\nüìÅ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è:")
    print("   - core/exceptions.py")
    print("   - core/engine.py")
    print("   - data/collectors/exchange_collector.py")
    print("   - ai/mock_analyzer.py")
    print("   - utils/logger.py")


if __name__ == "__main__":
    main()