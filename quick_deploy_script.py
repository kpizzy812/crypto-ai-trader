#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –±—ã—Å—Ç—Ä–æ–≥–æ –¥–µ–ø–ª–æ—è –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã
"""
import subprocess
import sys
import os
import json
from pathlib import Path
from datetime import datetime


def print_header(text):
    """–ö—Ä–∞—Å–∏–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫"""
    print(f"\n{'=' * 60}")
    print(f"üöÄ {text}")
    print(f"{'=' * 60}")


def print_step(step, text):
    """–®–∞–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
    print(f"\n{step}Ô∏è‚É£ {text}")


def run_command(command, description="", check=True):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    if description:
        print(f"   üìã {description}")

    print(f"   üíª {command}")

    try:
        result = subprocess.run(
            command.split() if isinstance(command, str) else command,
            capture_output=True,
            text=True,
            check=check
        )

        if result.stdout:
            print(f"   ‚úÖ {result.stdout.strip()}")

        return result.returncode == 0, result.stdout, result.stderr

    except subprocess.CalledProcessError as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
        if e.stderr:
            print(f"   üìù {e.stderr}")
        return False, "", e.stderr
    except Exception as e:
        print(f"   ‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False, "", str(e)


def check_python_version():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Python"""
    print_step("1", "–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Python")

    version = sys.version_info
    print(f"   üìä Python {version.major}.{version.minor}.{version.micro}")

    if version.major < 3 or (version.major == 3 and version.minor < 11):
        print("   ‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.11 –∏–ª–∏ –≤—ã—à–µ")
        return False

    print("   ‚úÖ –í–µ—Ä—Å–∏—è Python –ø–æ–¥—Ö–æ–¥–∏—Ç")
    return True


def setup_virtual_environment():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    print_step("2", "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è")

    if not os.path.exists("venv"):
        success, _, _ = run_command("python -m venv venv", "–°–æ–∑–¥–∞–Ω–∏–µ venv")
        if not success:
            return False
    else:
        print("   ‚ÑπÔ∏è –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
    if os.name == 'nt':  # Windows
        activate_cmd = "venv\\Scripts\\activate"
        pip_cmd = "venv\\Scripts\\pip"
        python_cmd = "venv\\Scripts\\python"
    else:  # Linux/Mac
        activate_cmd = "source venv/bin/activate"
        pip_cmd = "venv/bin/pip"
        python_cmd = "venv/bin/python"

    print(f"   üìã –î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: {activate_cmd}")
    return True, pip_cmd, python_cmd


def install_dependencies(pip_cmd):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    print_step("3", "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")

    # –û–±–Ω–æ–≤–ª—è–µ–º pip
    success, _, _ = run_command(f"{pip_cmd} install --upgrade pip", "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ pip")
    if not success:
        print("   ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å pip, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...")

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    success, _, _ = run_command(f"{pip_cmd} install -r requirements.txt", "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ requirements.txt")
    if not success:
        return False

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º dev –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –µ—Å–ª–∏ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if os.path.exists("requirements-dev.txt"):
        success, _, _ = run_command(f"{pip_cmd} install -r requirements-dev.txt", "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ dev –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")
        if not success:
            print("   ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å dev –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...")

    return True


def setup_environment_file():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ .env —Ñ–∞–π–ª–∞"""
    print_step("4", "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∞–π–ª–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è")

    if not os.path.exists(".env"):
        if os.path.exists(".env.example"):
            import shutil
            shutil.copy(".env.example", ".env")
            print("   ‚úÖ –°–æ–∑–¥–∞–Ω .env –∏–∑ .env.example")
        else:
            # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π .env —Ñ–∞–π–ª
            env_content = """# Crypto AI Trading Bot Configuration
APP_NAME="Crypto AI Trader"
DEBUG=false
LOG_LEVEL="INFO"

# OpenAI API (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
OPENAI_API_KEY=your_openai_api_key_here

# Telegram Bot (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
TELEGRAM_BOT_TOKEN=your_telegram_bot_token_here

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
DATABASE_URL="sqlite:///./crypto_trader.db"

# Bybit API (TESTNET)
BYBIT_API_KEY=your_bybit_testnet_api_key
BYBIT_API_SECRET=your_bybit_testnet_secret
BYBIT_TESTNET=true

# Binance API (TESTNET)
BINANCE_API_KEY=your_binance_testnet_api_key
BINANCE_API_SECRET=your_binance_testnet_secret
BINANCE_TESTNET=true
"""
            with open(".env", "w") as f:
                f.write(env_content)
            print("   ‚úÖ –°–æ–∑–¥–∞–Ω –±–∞–∑–æ–≤—ã–π .env —Ñ–∞–π–ª")
    else:
        print("   ‚ÑπÔ∏è –§–∞–π–ª .env —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

    print("   ‚ö†Ô∏è –í–ê–ñ–ù–û: –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ .env —Ñ–∞–π–ª –∏ –¥–æ–±–∞–≤—å—Ç–µ –≤–∞—à–∏ API –∫–ª—é—á–∏!")
    return True


def create_directories():
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π"""
    print_step("5", "–°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π")

    directories = [
        "logs",
        "data/historical",
        "backtest_results",
        "web/static",
        "web/templates"
    ]

    for directory in directories:
        os.makedirs(directory, exist_ok=True)
        print(f"   üìÅ {directory}")

    print("   ‚úÖ –í—Å–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–æ–∑–¥–∞–Ω—ã")
    return True


def run_system_tests(python_cmd):
    """–ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤"""
    print_step("6", "–ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤")

    # –ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–æ–≤
    test_imports = """
try:
    from config import Settings, TradingConfig
    from utils.helpers import create_sample_data
    from ai.mock_analyzer import MockAIAnalyzer
    print("‚úÖ –ë–∞–∑–æ–≤—ã–µ –∏–º–ø–æ—Ä—Ç—ã —É—Å–ø–µ—à–Ω—ã")
    exit(0)
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    exit(1)
"""

    with open("temp_test.py", "w") as f:
        f.write(test_imports)

    try:
        success, _, stderr = run_command(f"{python_cmd} temp_test.py", "–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–æ–≤")
        if not success:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤: {stderr}")
            return False
    finally:
        if os.path.exists("temp_test.py"):
            os.remove("temp_test.py")

    # –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç
    success, stdout, stderr = run_command(
        f"{python_cmd} main.py --mode test",
        "–ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã",
        check=False
    )

    if "–í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´" in stdout:
        print("   üéâ –í—Å–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        return True
    else:
        print("   ‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏, –Ω–æ —Å–∏—Å—Ç–µ–º–∞ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å")
        print("   üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á–∏ –≤ .env –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞")
        return True  # –ù–µ –±–ª–æ–∫–∏—Ä—É–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É


def create_start_scripts():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–æ–≤ –∑–∞–ø—É—Å–∫–∞"""
    print_step("7", "–°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–æ–≤ –∑–∞–ø—É—Å–∫–∞")

    # Windows batch —Ñ–∞–π–ª
    windows_script = """@echo off
echo Starting Crypto AI Trading Bot...
call venv\\Scripts\\activate
python main.py --mode test
pause
"""

    with open("start_test.bat", "w") as f:
        f.write(windows_script)

    # Linux/Mac shell script
    unix_script = """#!/bin/bash
echo "Starting Crypto AI Trading Bot..."
source venv/bin/activate
python main.py --mode test
"""

    with open("start_test.sh", "w") as f:
        f.write(unix_script)

    # –î–µ–ª–∞–µ–º –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º –Ω–∞ Unix
    if os.name != 'nt':
        os.chmod("start_test.sh", 0o755)

    print("   ‚úÖ –°–æ–∑–¥–∞–Ω—ã —Å–∫—Ä–∏–ø—Ç—ã –∑–∞–ø—É—Å–∫–∞:")
    print("   üìù start_test.bat (Windows)")
    print("   üìù start_test.sh (Linux/Mac)")

    return True


def generate_deployment_report():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ –¥–µ–ø–ª–æ–µ"""
    print_step("8", "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞")

    report = {
        "deployment_date": datetime.now().isoformat(),
        "python_version": f"{sys.version_info.major}.{sys.version_info.minor}.{sys.version_info.micro}",
        "project_structure": {
            "env_file": os.path.exists(".env"),
            "venv": os.path.exists("venv"),
            "logs_dir": os.path.exists("logs"),
            "requirements": os.path.exists("requirements.txt")
        },
        "next_steps": [
            "1. –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ .env —Ñ–∞–π–ª —Å –≤–∞—à–∏–º–∏ API –∫–ª—é—á–∞–º–∏",
            "2. –ü–æ–ª—É—á–∏—Ç–µ —Ç–µ—Å—Ç–æ–≤—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–∞ testnet –±–∏—Ä–∂–∞—Ö",
            "3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python main.py --mode test",
            "4. –ü—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º —Ç–µ—Å—Ç–µ: python main.py --mode trading",
            "5. –î–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞: python main.py --mode api"
        ],
        "useful_commands": {
            "comprehensive_test": "python main.py --mode test",
            "real_trading": "python main.py --mode trading",
            "backtest": "python main.py --mode backtest",
            "api_server": "python main.py --mode api",
            "live_position_test": "python main.py --mode live-test"
        }
    }

    with open("deployment_report.json", "w") as f:
        json.dump(report, f, indent=2)

    print("   ‚úÖ –°–æ–∑–¥–∞–Ω deployment_report.json")
    return True


def print_final_instructions():
    """–§–∏–Ω–∞–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏"""
    print_header("–£–°–¢–ê–ù–û–í–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê")

    print("""
üéâ Crypto AI Trading Bot —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!

üìã –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:

1Ô∏è‚É£ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ API –∫–ª—é—á–µ–π:
   üìù –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —Ñ–∞–π–ª .env
   üîë –î–æ–±–∞–≤—å—Ç–µ API –∫–ª—é—á–∏ –¥–ª—è testnet
   ‚ö†Ô∏è –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ mainnet –∫–ª—é—á–∏!

2Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤:
   üåê Bybit Testnet: https://testnet.bybit.com
   üåê Binance Testnet: https://testnet.binance.vision
   üí∞ –ü–æ–ª—É—á–∏—Ç–µ —Ç–µ—Å—Ç–æ–≤—ã–µ USDT –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏

3Ô∏è‚É£ –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫:""")

    if os.name == 'nt':
        print("   üñ±Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç–µ start_test.bat")
    else:
        print("   üñ±Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç–µ ./start_test.sh")

    print("""   üìù –ò–ª–∏ –≤—Ä—É—á–Ω—É—é: python main.py --mode test

4Ô∏è‚É£ –†–µ–∂–∏–º—ã —Ä–∞–±–æ—Ç—ã:
   üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: python main.py --mode test
   ü§ñ –¢–æ—Ä–≥–æ–≤–ª—è: python main.py --mode trading
   üìä –ë—ç–∫—Ç–µ—Å—Ç: python main.py --mode backtest
   üåê API —Å–µ—Ä–≤–µ—Ä: python main.py --mode api
   üí∞ –¢–µ—Å—Ç –ø–æ–∑–∏—Ü–∏–∏: python main.py --mode live-test

5Ô∏è‚É£ –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å:
   üöÄ python main.py --mode api
   üåê –û—Ç–∫—Ä–æ–π—Ç–µ: http://localhost:8000

‚ö†Ô∏è –í–ê–ñ–ù–´–ï –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–Ø:
   üîí –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ testnet –¥–ª—è –Ω–∞—á–∞–ª–∞
   üí° –ù–∞—á–∏–Ω–∞–π—Ç–µ —Å –º–∞–ª—ã—Ö —Å—É–º–º
   üìä –ò–∑—É—á–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—ç–∫—Ç–µ—Å—Ç–æ–≤
   üõ°Ô∏è –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç

üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è:
   üìñ README.md - –æ—Å–Ω–æ–≤–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
   üìä deployment_report.json - –æ—Ç—á–µ—Ç –æ –¥–µ–ø–ª–æ–µ
   üîß logs/ - –ª–æ–≥–∏ —Å–∏—Å—Ç–µ–º—ã

üÜò –ü—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö:
   1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤ –ø–∞–ø–∫–µ logs/
   2. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ API –∫–ª—é—á–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã
   3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É
   4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python main.py --mode test

–£–¥–∞—á–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏! üöÄüìà
""")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–ø–ª–æ—è"""
    print_header("CRYPTO AI TRADING BOT - –ë–´–°–¢–†–´–ô –î–ï–ü–õ–û–ô")

    print("ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–µ–ø–ª–æ—è!")
    print("üìã –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –Ω–∞—Å—Ç—Ä–æ–∏—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞—Ö–æ–¥–∏–º—Å—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    if not os.path.exists("main.py"):
        print("\n‚ùå –û—à–∏–±–∫–∞: –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞")
        print("üí° –í –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ñ–∞–π–ª main.py")
        return False

    try:
        # –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ Python
        if not check_python_version():
            return False

        # –®–∞–≥ 2: –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
        success, pip_cmd, python_cmd = setup_virtual_environment()
        if not success:
            return False

        # –®–∞–≥ 3: –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        if not install_dependencies(pip_cmd):
            return False

        # –®–∞–≥ 4: .env —Ñ–∞–π–ª
        if not setup_environment_file():
            return False

        # –®–∞–≥ 5: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        if not create_directories():
            return False

        # –®–∞–≥ 6: –¢–µ—Å—Ç—ã
        if not run_system_tests(python_cmd):
            print("   ‚ö†Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –æ—à–∏–±–∫–∏ —Ç–µ—Å—Ç–æ–≤")

        # –®–∞–≥ 7: –°–∫—Ä–∏–ø—Ç—ã
        if not create_start_scripts():
            return False

        # –®–∞–≥ 8: –û—Ç—á–µ—Ç
        if not generate_deployment_report():
            return False

        # –§–∏–Ω–∞–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
        print_final_instructions()

        return True

    except KeyboardInterrupt:
        print("\n\n‚ùå –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return False
    except Exception as e:
        print(f"\n\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏: {e}")
        return False


if __name__ == "__main__":
    success = main()
    exit_code = 0 if success else 1

    if success:
        print(f"\nüéâ –î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
    else:
        print(f"\n‚ùå –î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–∞–º–∏")

    sys.exit(exit_code)