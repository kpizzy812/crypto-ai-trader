# risk/risk_manager.py - –û–°–ù–û–í–ù–û–ô –§–ê–ô–õ
"""
–û—Å–Ω–æ–≤–Ω–æ–π —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–µ—Ä (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
"""
from typing import Dict, Optional
from decimal import Decimal
from datetime import datetime, timedelta
from loguru import logger
from core.portfolio import Portfolio
from config.trading_config import RiskConfig
from .metrics import RiskMetrics, PerformanceMetrics
from .calculators import RiskCalculator
from .monitors import RiskMonitor


class RiskManager:
    """–ì–ª–∞–≤–Ω—ã–π —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–µ—Ä"""

    def __init__(self, risk_config: RiskConfig, portfolio: Portfolio):
        self.config = risk_config
        self.portfolio = portfolio

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self.calculator = RiskCalculator(risk_config)
        self.monitor = RiskMonitor(risk_config, portfolio)

        # –ü–∏–∫–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        self.peak_balance = portfolio.initial_balance
        self.daily_start_balance = portfolio.initial_balance
        self.last_reset = datetime.utcnow()
        self.max_historical_drawdown = Decimal("0")

    async def check_position_risk(self, symbol: str, side: str,
                                  entry_price: Decimal, quantity: Decimal) -> bool:
        """–û—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∏—Å–∫–∞ –ø–æ–∑–∏—Ü–∏–∏"""
        try:
            # 1. –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
            position_value = entry_price * quantity
            portfolio_stats = await self.portfolio.get_portfolio_stats()
            total_value = portfolio_stats['total_value']

            position_percent = (position_value / total_value) * 100

            if position_percent > self.config.max_position_size_percent:
                logger.warning(f"–ü–æ–∑–∏—Ü–∏—è {symbol} –ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {position_percent:.2f}%")
                return False

            # 2. –î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç
            if await self._check_daily_loss_limit():
                logger.warning("–î–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –ø–æ—Ç–µ—Ä—å")
                return False

            # 3. –û–±—â–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞
            if await self._check_drawdown_limit():
                logger.warning("–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ø—Ä–æ—Å–∞–¥–∫–∏")
                return False

            # 4. –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è –ø–æ–∑–∏—Ü–∏–π
            if await self._check_position_correlation(symbol, side):
                logger.warning(f"–í—ã—Å–æ–∫–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –ø–æ–∑–∏—Ü–∏—è–º–∏: {symbol}")
                return False

            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∏—Å–∫–∞: {e}")
            return False

    async def calculate_position_size(self, balance: Decimal, risk_amount: Decimal,
                                      stop_distance: Decimal) -> Decimal:
        """–†–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏"""
        return await self.calculator.calculate_position_size(
            balance, risk_amount, stop_distance
        )

    async def get_risk_metrics(self) -> RiskMetrics:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ —Ä–∏—Å–∫–∞"""
        try:
            portfolio_stats = await self.portfolio.get_portfolio_stats()
            current_balance = portfolio_stats['total_value']

            # –ë–∞–∑–æ–≤—ã–µ —Ä–∞—Å—á–µ—Ç—ã
            current_drawdown = await self._calculate_current_drawdown(current_balance)
            daily_loss = await self._calculate_daily_loss(current_balance)
            position_risk = await self._calculate_position_risk()

            # –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            sharpe_ratio = await self.calculator.calculate_sharpe_ratio(self.monitor.daily_returns)
            sortino_ratio = await self.calculator.calculate_sortino_ratio(self.monitor.daily_returns)
            var_95 = await self.calculator.calculate_value_at_risk(
                current_balance, self.monitor.daily_returns
            )

            risk_score = self._calculate_risk_score(current_drawdown, daily_loss, position_risk)

            return RiskMetrics(
                current_drawdown=current_drawdown,
                max_drawdown=max(current_drawdown, self.max_historical_drawdown),
                daily_loss=daily_loss,
                position_risk=position_risk,
                sharpe_ratio=sharpe_ratio,
                sortino_ratio=sortino_ratio,
                calmar_ratio=0.0,  # –£–ø—Ä–æ—â–∞–µ–º
                value_at_risk=var_95,
                risk_score=risk_score
            )

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –º–µ—Ç—Ä–∏–∫ —Ä–∏—Å–∫–∞: {e}")
            return self._get_default_risk_metrics()

    async def should_stop_trading(self) -> tuple[bool, str]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        try:
            risk_metrics = await self.get_risk_metrics()

            # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —É—Å–ª–æ–≤–∏—è
            if risk_metrics.current_drawdown >= Decimal(str(self.config.max_drawdown_percent)):
                return True, f"–ü—Ä–µ–≤—ã—à–µ–Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞: {risk_metrics.current_drawdown:.2f}%"

            if risk_metrics.daily_loss >= Decimal(str(self.config.max_daily_loss_percent)):
                return True, f"–ü—Ä–µ–≤—ã—à–µ–Ω –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –ø–æ—Ç–µ—Ä—å: {risk_metrics.daily_loss:.2f}%"

            if risk_metrics.risk_score >= 90:
                return True, f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞: {risk_metrics.risk_score}/100"

            return False, "–†–∏—Å–∫–∏ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –Ω–æ—Ä–º—ã"

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {e}")
            return True, "–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ä–∏—Å–∫–æ–≤ - –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–∑ –ø—Ä–µ–¥–æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç–∏"

    async def emergency_stop(self, reason: str = "Emergency risk limit breached"):
        """–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        try:
            logger.critical(f"üö® –≠–ö–°–¢–†–ï–ù–ù–ê–Ø –û–°–¢–ê–ù–û–í–ö–ê: {reason}")

            # –ü—É–±–ª–∏–∫—É–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–±—ã—Ç–∏–µ
            if hasattr(self.portfolio, 'event_bus'):
                await self.portfolio.event_bus.publish({
                    'type': 'EMERGENCY_STOP',
                    'data': {
                        'reason': reason,
                        'timestamp': datetime.utcnow().isoformat(),
                        'current_positions': len(self.portfolio.positions),
                        'total_value': float((await self.portfolio.get_portfolio_stats())['total_value'])
                    }
                })

            logger.warning("‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–π —á–µ—Ä–µ–∑ Position Manager")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {e}")

    # –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    async def _calculate_current_drawdown(self, current_balance: Decimal) -> Decimal:
        """–†–∞—Å—á–µ—Ç —Ç–µ–∫—É—â–µ–π –ø—Ä–æ—Å–∞–¥–∫–∏"""
        if current_balance < self.peak_balance:
            drawdown = ((self.peak_balance - current_balance) / self.peak_balance) * 100
            self.max_historical_drawdown = max(self.max_historical_drawdown, drawdown)
            return drawdown
        return Decimal("0")

    async def _calculate_daily_loss(self, current_balance: Decimal) -> Decimal:
        """–†–∞—Å—á–µ—Ç –¥–Ω–µ–≤–Ω—ã—Ö –ø–æ—Ç–µ—Ä—å"""
        # –°–±—Ä–æ—Å –≤ –Ω–∞—á–∞–ª–µ –¥–Ω—è
        if datetime.utcnow().date() > self.last_reset.date():
            self.daily_start_balance = current_balance
            self.last_reset = datetime.utcnow()

        if current_balance < self.daily_start_balance:
            return ((self.daily_start_balance - current_balance) / self.daily_start_balance) * 100
        return Decimal("0")

    async def _calculate_position_risk(self) -> Decimal:
        """–†–∞—Å—á–µ—Ç —Ä–∏—Å–∫–∞ –ø–æ –ø–æ–∑–∏—Ü–∏—è–º"""
        total_risk = Decimal("0")

        for position in self.portfolio.positions.values():
            if position.stop_loss:
                if position.side == 'long':
                    risk = position.quantity * (position.entry_price - position.stop_loss)
                else:
                    risk = position.quantity * (position.stop_loss - position.entry_price)
                total_risk += max(risk, Decimal("0"))

        portfolio_stats = await self.portfolio.get_portfolio_stats()
        total_value = portfolio_stats['total_value']

        return (total_risk / total_value) * 100 if total_value > 0 else Decimal("0")

    async def _check_daily_loss_limit(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–Ω–µ–≤–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞"""
        portfolio_stats = await self.portfolio.get_portfolio_stats()
        daily_loss = await self._calculate_daily_loss(portfolio_stats['total_value'])
        return daily_loss >= Decimal(str(self.config.max_daily_loss_percent))

    async def _check_drawdown_limit(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –ø—Ä–æ—Å–∞–¥–∫–∏"""
        portfolio_stats = await self.portfolio.get_portfolio_stats()
        current_drawdown = await self._calculate_current_drawdown(portfolio_stats['total_value'])
        return current_drawdown >= Decimal(str(self.config.max_drawdown_percent))

    async def _check_position_correlation(self, symbol: str, side: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –ø–æ–∑–∏—Ü–∏–π"""
        same_direction_count = sum(
            1 for pos in self.portfolio.positions.values()
            if pos.side == side.lower()
        )
        return same_direction_count >= 3

    def _calculate_risk_score(self, drawdown: Decimal, daily_loss: Decimal,
                              position_risk: Decimal) -> int:
        """–†–∞—Å—á–µ—Ç –æ–±—â–µ–≥–æ —Ä–∏—Å–∫-—Å–∫–æ—Ä–∞"""
        try:
            # –ü—Ä–æ—Å—Ç–æ–π —Ä–∞—Å—á–µ—Ç
            score = float(drawdown) * 0.4 + float(daily_loss) * 0.3 + float(position_risk) * 0.3
            return int(min(max(score, 0), 100))
        except Exception:
            return 50

    def _get_default_risk_metrics(self) -> RiskMetrics:
        """–ú–µ—Ç—Ä–∏–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        return RiskMetrics(
            current_drawdown=Decimal("0"),
            max_drawdown=Decimal("0"),
            daily_loss=Decimal("0"),
            position_risk=Decimal("0"),
            sharpe_ratio=0.0,
            sortino_ratio=0.0,
            calmar_ratio=0.0,
            value_at_risk=Decimal("0"),
            risk_score=50
        )