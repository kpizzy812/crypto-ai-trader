# client_management/deposit_system.py
"""
–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–º–∏ –¥–µ–ø–æ–∑–∏—Ç–∞–º–∏ –∏ —Ñ–æ–Ω–¥–∞–º–∏
"""
import asyncio
from typing import Dict, List, Optional, Any
from decimal import Decimal, ROUND_DOWN
from datetime import datetime, timedelta
from enum import Enum
from dataclasses import dataclass, field
from loguru import logger
import uuid

from core.portfolio import Portfolio
from risk.risk_manager import RiskManager
from models.trading_signals import TradingSignal


class DepositStatus(str, Enum):
    PENDING = "pending"
    ACTIVE = "active"
    WITHDRAWN = "withdrawn"
    SUSPENDED = "suspended"


class FeeType(str, Enum):
    MANAGEMENT = "management"  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–æ–º–∏—Å—Å–∏—è –∑–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
    PERFORMANCE = "performance"  # –ü—Ä–æ—Ü–µ–Ω—Ç —Å –ø—Ä–∏–±—ã–ª–∏
    ENTRY = "entry"  # –ö–æ–º–∏—Å—Å–∏—è –ø—Ä–∏ –≤—Ö–æ–¥–µ
    EXIT = "exit"  # –ö–æ–º–∏—Å—Å–∏—è –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ


@dataclass
class FeeStructure:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ–º–∏—Å—Å–∏–π"""
    management_fee_percent: Decimal = Decimal("2.0")  # 2% –≥–æ–¥–æ–≤—ã—Ö
    performance_fee_percent: Decimal = Decimal("20.0")  # 20% —Å –ø—Ä–∏–±—ã–ª–∏
    entry_fee_percent: Decimal = Decimal("0.0")  # –ë–µ–∑ –≤—Ö–æ–¥–Ω–æ–π –∫–æ–º–∏—Å—Å–∏–∏
    exit_fee_percent: Decimal = Decimal("0.0")  # –ë–µ–∑ –≤—ã—Ö–æ–¥–Ω–æ–π –∫–æ–º–∏—Å—Å–∏–∏
    high_water_mark: bool = True  # –í—ã—Å—à–∏–π –ø–∏–∫ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏


@dataclass
class ClientDeposit:
    """–ö–ª–∏–µ–Ω—Ç—Å–∫–∏–π –¥–µ–ø–æ–∑–∏—Ç"""
    id: str
    client_name: str
    client_email: str
    initial_amount: Decimal
    current_value: Decimal

    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∏—Å–∫–∞
    risk_profile: str  # "conservative", "moderate", "aggressive"
    max_drawdown_percent: Decimal = Decimal("15.0")

    # –°—Ç—Ä–∞—Ç–µ–≥–∏–∏
    allocated_strategies: List[str] = field(default_factory=lambda: ["AI_Driven"])
    strategy_weights: Dict[str, float] = field(default_factory=dict)

    # –ö–æ–º–∏—Å—Å–∏–∏
    fee_structure: FeeStructure = field(default_factory=FeeStructure)

    # –°—Ç–∞—Ç—É—Å –∏ –¥–∞—Ç—ã
    status: DepositStatus = DepositStatus.PENDING
    created_at: datetime = field(default_factory=datetime.utcnow)
    activated_at: Optional[datetime] = None
    last_fee_calculation: Optional[datetime] = None

    # –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    high_water_mark: Decimal = Decimal("0")
    total_fees_paid: Decimal = Decimal("0")

    # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    notes: str = ""
    referral_source: Optional[str] = None


class FundManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —Ñ–æ–Ω–¥–æ–≤ –∏ –∫–ª–∏–µ–Ω—Ç—Å–∫–∏—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤"""

    def __init__(self, trading_engine):
        self.trading_engine = trading_engine
        self.client_deposits: Dict[str, ClientDeposit] = {}
        self.fund_portfolio = Portfolio(Decimal("0"))  # –û–±—â–∏–π —Ñ–æ–Ω–¥
        self.client_portfolios: Dict[str, Portfolio] = {}

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ–æ–Ω–¥–∞
        self.total_aum = Decimal("0")  # Assets Under Management
        self.total_clients = 0
        self.performance_history = []

    async def accept_client_deposit(self, client_data: Dict[str, Any]) -> str:
        """–ü—Ä–∏–µ–º –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ –¥–µ–ø–æ–∑–∏—Ç–∞"""

        try:
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞
            self._validate_client_data(client_data)

            # –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–ø–æ–∑–∏—Ç–∞
            deposit = ClientDeposit(
                id=f"deposit_{uuid.uuid4().hex[:8]}",
                client_name=client_data['name'],
                client_email=client_data['email'],
                initial_amount=Decimal(str(client_data['amount'])),
                current_value=Decimal(str(client_data['amount'])),
                risk_profile=client_data.get('risk_profile', 'moderate'),
                max_drawdown_percent=Decimal(str(client_data.get('max_drawdown', '15.0'))),
                allocated_strategies=client_data.get('strategies', ['AI_Driven']),
                notes=client_data.get('notes', ''),
                referral_source=client_data.get('referral_source')
            )

            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–æ–º–∏—Å—Å–∏–π
            if 'fee_structure' in client_data:
                fee_data = client_data['fee_structure']
                deposit.fee_structure = FeeStructure(
                    management_fee_percent=Decimal(str(fee_data.get('management', '2.0'))),
                    performance_fee_percent=Decimal(str(fee_data.get('performance', '20.0'))),
                    entry_fee_percent=Decimal(str(fee_data.get('entry', '0.0'))),
                    exit_fee_percent=Decimal(str(fee_data.get('exit', '0.0')))
                )

            # –†–∞—Å—á–µ—Ç –≤—Ö–æ–¥–Ω–æ–π –∫–æ–º–∏—Å—Å–∏–∏
            entry_fee = self._calculate_entry_fee(deposit)
            net_deposit = deposit.initial_amount - entry_fee

            # –°–æ–∑–¥–∞–Ω–∏–µ –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ—Ä—Ç—Ñ–µ–ª—è –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
            client_portfolio = Portfolio(net_deposit)
            self.client_portfolios[deposit.id] = client_portfolio

            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –æ–±—â–∏–π —Ñ–æ–Ω–¥
            self.fund_portfolio.assets['USDT'].free += net_deposit
            self.fund_portfolio.assets['USDT'].total += net_deposit

            # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –¥–µ–ø–æ–∑–∏—Ç–∞
            self.client_deposits[deposit.id] = deposit
            self.total_aum += net_deposit
            self.total_clients += 1

            # –ê–∫—Ç–∏–≤–∞—Ü–∏—è –¥–µ–ø–æ–∑–∏—Ç–∞
            await self._activate_deposit(deposit.id)

            logger.info(
                f"‚úÖ –ü—Ä–∏–Ω—è—Ç –¥–µ–ø–æ–∑–∏—Ç –æ—Ç {deposit.client_name}: ${deposit.initial_amount} (–∫–æ–º–∏—Å—Å–∏—è: ${entry_fee})")

            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
            await self._send_client_notification(
                deposit,
                f"–í–∞—à –¥–µ–ø–æ–∑–∏—Ç ${deposit.initial_amount} —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç. –ß–∏—Å—Ç–∞—è —Å—É–º–º–∞ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏: ${net_deposit}",
                "deposit_accepted"
            )

            return deposit.id

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–µ–º–∞ –¥–µ–ø–æ–∑–∏—Ç–∞: {e}")
            raise

    def _validate_client_data(self, data: Dict[str, Any]):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞"""
        required_fields = ['name', 'email', 'amount']
        missing = [field for field in required_fields if field not in data]

        if missing:
            raise ValueError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: {missing}")

        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—É–º–º—ã
        amount = Decimal(str(data['amount']))
        if amount < Decimal("1000"):  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –¥–µ–ø–æ–∑–∏—Ç $1000
            raise ValueError("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–µ–ø–æ–∑–∏—Ç–∞: $1,000")

        if amount > Decimal("1000000"):  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –¥–µ–ø–æ–∑–∏—Ç $1M
            raise ValueError("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–µ–ø–æ–∑–∏—Ç–∞: $1,000,000")

        # –í–∞–ª–∏–¥–∞—Ü–∏—è email
        if '@' not in data['email'] or '.' not in data['email']:
            raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å")

    def _calculate_entry_fee(self, deposit: ClientDeposit) -> Decimal:
        """–†–∞—Å—á–µ—Ç –≤—Ö–æ–¥–Ω–æ–π –∫–æ–º–∏—Å—Å–∏–∏"""
        return deposit.initial_amount * (deposit.fee_structure.entry_fee_percent / 100)

    async def _activate_deposit(self, deposit_id: str):
        """–ê–∫—Ç–∏–≤–∞—Ü–∏—è –¥–µ–ø–æ–∑–∏—Ç–∞"""
        deposit = self.client_deposits[deposit_id]

        # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
        deposit.status = DepositStatus.ACTIVE
        deposit.activated_at = datetime.utcnow()
        deposit.high_water_mark = deposit.current_value
        deposit.last_fee_calculation = datetime.utcnow()

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
        await self._setup_client_strategies(deposit)

        logger.info(f"‚úÖ –î–µ–ø–æ–∑–∏—Ç {deposit.client_name} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")

    async def _setup_client_strategies(self, deposit: ClientDeposit):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞"""
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –ø–æ–¥ —Ä–∏—Å–∫-–ø—Ä–æ—Ñ–∏–ª—å
            strategy_configs = self._get_client_strategy_configs(deposit.risk_profile)

            for strategy_name in deposit.allocated_strategies:
                # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ—Å–æ–≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
                if not deposit.strategy_weights:
                    # –†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    weight = 1.0 / len(deposit.allocated_strategies)
                    deposit.strategy_weights[strategy_name] = weight

                logger.info(
                    f"üìä –ù–∞—Å—Ç—Ä–æ–µ–Ω–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è {strategy_name} –¥–ª—è {deposit.client_name} (–≤–µ—Å: {deposit.strategy_weights[strategy_name]:.2%})")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –¥–ª—è {deposit.client_name}: {e}")

    def _get_client_strategy_configs(self, risk_profile: str) -> Dict[str, Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –¥–ª—è —Ä–∏—Å–∫-–ø—Ä–æ—Ñ–∏–ª—è"""

        if risk_profile == "conservative":
            return {
                "AI_Driven": {
                    "min_confidence": 0.85,
                    "position_size_percent": 1.0,
                    "max_positions": 2,
                    "stop_loss_percent": 1.5,
                    "take_profit_percent": 3.0
                },
                "SimpleMomentum": {
                    "position_size_percent": 0.5,
                    "rsi_oversold": 25,
                    "rsi_overbought": 75
                }
            }
        elif risk_profile == "aggressive":
            return {
                "AI_Driven": {
                    "min_confidence": 0.65,
                    "position_size_percent": 4.0,
                    "max_positions": 8,
                    "stop_loss_percent": 3.0,
                    "take_profit_percent": 6.0
                },
                "SimpleMomentum": {
                    "position_size_percent": 3.0,
                    "rsi_oversold": 35,
                    "rsi_overbought": 65
                }
            }
        else:  # moderate
            return {
                "AI_Driven": {
                    "min_confidence": 0.75,
                    "position_size_percent": 2.0,
                    "max_positions": 5,
                    "stop_loss_percent": 2.0,
                    "take_profit_percent": 4.0
                },
                "SimpleMomentum": {
                    "position_size_percent": 1.5,
                    "rsi_oversold": 30,
                    "rsi_overbought": 70
                }
            }

    async def process_trading_signal_for_clients(self, signal: TradingSignal):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤"""

        for deposit_id, deposit in self.client_deposits.items():
            if deposit.status != DepositStatus.ACTIVE:
                continue

            try:
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Å–∏–≥–Ω–∞–ª–∞
                if signal.strategy in deposit.allocated_strategies:
                    # –†–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
                    client_position_size = await self._calculate_client_position_size(
                        deposit, signal
                    )

                    if client_position_size > 0:
                        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
                        await self._execute_client_trade(deposit, signal, client_position_size)

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {deposit.client_name}: {e}")

    async def _calculate_client_position_size(self, deposit: ClientDeposit, signal: TradingSignal) -> Decimal:
        """–†–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞"""
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è –∫–ª–∏–µ–Ω—Ç–∞
            portfolio = self.client_portfolios[deposit.id]
            portfolio_stats = await portfolio.get_portfolio_stats()

            available_balance = portfolio_stats['available_balance']

            # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–µ—Å–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            strategy_weight = deposit.strategy_weights.get(signal.strategy, 0.0)

            # –†–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏
            strategy_allocation = float(available_balance) * strategy_weight
            position_percent = 2.0  # –ë–∞–∑–æ–≤—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –ø–æ–∑–∏—Ü–∏–∏

            # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ–¥ —Ä–∏—Å–∫-–ø—Ä–æ—Ñ–∏–ª—å
            if deposit.risk_profile == "conservative":
                position_percent *= 0.5
            elif deposit.risk_profile == "aggressive":
                position_percent *= 1.5

            # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –Ω–∞ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å —Å–∏–≥–Ω–∞–ª–∞
            position_percent *= signal.confidence

            position_value = strategy_allocation * (position_percent / 100)

            # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞
            estimated_price = float(signal.position_size_usd / signal.quantity)
            position_size = position_value / estimated_price

            return Decimal(str(max(0.001, position_size)))

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞: {e}")
            return Decimal("0")

    async def _execute_client_trade(self, deposit: ClientDeposit, signal: TradingSignal, position_size: Decimal):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞"""
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è –∫–ª–∏–µ–Ω—Ç–∞
            portfolio = self.client_portfolios[deposit.id]

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ —Ä–∏—Å–∫–∞
            if not await self._check_client_risk_limits(deposit, portfolio):
                logger.warning(f"‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω—ã –ª–∏–º–∏—Ç—ã —Ä–∏—Å–∫–∞ –¥–ª—è {deposit.client_name}")
                return

            # –†–∞–∑–º–µ—â–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ —á–µ—Ä–µ–∑ –æ–±—â–∏–π –¥–≤–∏–∂–æ–∫
            order_result = await self.trading_engine.exchange_manager.place_order(
                symbol=signal.symbol,
                side=signal.action.value.lower(),
                order_type="market",
                quantity=float(position_size),
                strategy=f"{signal.strategy}_client_{deposit.id}"
            )

            if order_result:
                logger.info(
                    f"üìà –í—ã–ø–æ–ª–Ω–µ–Ω–∞ —Å–¥–µ–ª–∫–∞ –¥–ª—è {deposit.client_name}: {signal.symbol} {signal.action.value} {position_size}")

                # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
                await self._send_client_notification(
                    deposit,
                    f"–û—Ç–∫—Ä—ã—Ç–∞ –ø–æ–∑–∏—Ü–∏—è: {signal.symbol} {signal.action.value} –Ω–∞ —Å—É–º–º—É ${float(position_size) * float(signal.position_size_usd / signal.quantity):.2f}",
                    "trade_executed"
                )

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {deposit.client_name}: {e}")

    async def _check_client_risk_limits(self, deposit: ClientDeposit, portfolio: Portfolio) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ —Ä–∏—Å–∫–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞"""
        try:
            portfolio_stats = await portfolio.get_portfolio_stats()
            current_value = float(portfolio_stats['total_value'])
            initial_value = float(deposit.initial_amount)

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ—Å–∞–¥–∫–∏
            drawdown_percent = ((initial_value - current_value) / initial_value) * 100

            if drawdown_percent > float(deposit.max_drawdown_percent):
                logger.warning(f"‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞ –¥–ª—è {deposit.client_name}: {drawdown_percent:.2f}%")

                # –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
                await self._suspend_client_trading(deposit.id,
                                                   f"–ü—Ä–µ–≤—ã—à–µ–Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞ ({drawdown_percent:.2f}%)")
                return False

            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–æ–≤ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞: {e}")
            return False

    async def _suspend_client_trading(self, deposit_id: str, reason: str):
        """–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞"""
        try:
            deposit = self.client_deposits[deposit_id]
            deposit.status = DepositStatus.SUSPENDED
            deposit.notes += f"\n–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ {datetime.utcnow()}: {reason}"

            logger.warning(f"‚ö†Ô∏è –¢–æ—Ä–≥–æ–≤–ª—è –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è {deposit.client_name}: {reason}")

            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
            await self._send_client_notification(
                deposit,
                f"–¢–æ—Ä–≥–æ–≤–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {reason}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º.",
                "trading_suspended"
            )

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏: {e}")

    async def calculate_client_fees(self, deposit_id: str) -> Dict[str, Decimal]:
        """–†–∞—Å—á–µ—Ç –∫–æ–º–∏—Å—Å–∏–π –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞"""
        try:
            deposit = self.client_deposits[deposit_id]
            portfolio = self.client_portfolios[deposit_id]
            portfolio_stats = await portfolio.get_portfolio_stats()

            current_value = Decimal(str(portfolio_stats['total_value']))
            fees = {}

            # 1. –ö–æ–º–∏—Å—Å–∏—è –∑–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (–ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –≤—Ä–µ–º–µ–Ω–∏)
            if deposit.last_fee_calculation:
                days_since_last = (datetime.utcnow() - deposit.last_fee_calculation).days
                if days_since_last > 0:
                    daily_management_rate = deposit.fee_structure.management_fee_percent / 365
                    management_fee = current_value * (daily_management_rate / 100) * days_since_last
                    fees['management'] = management_fee

            # 2. –ö–æ–º–∏—Å—Å–∏—è —Å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (high water mark)
            performance_fee = Decimal("0")
            if deposit.fee_structure.high_water_mark:
                if current_value > deposit.high_water_mark:
                    profit = current_value - deposit.high_water_mark
                    performance_fee = profit * (deposit.fee_structure.performance_fee_percent / 100)
                    fees['performance'] = performance_fee

                    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ high water mark
                    deposit.high_water_mark = current_value
            else:
                # –ö–æ–º–∏—Å—Å–∏—è —Å –æ–±—â–µ–π –ø—Ä–∏–±—ã–ª–∏
                total_profit = current_value - deposit.initial_amount
                if total_profit > 0:
                    performance_fee = total_profit * (deposit.fee_structure.performance_fee_percent / 100)
                    fees['performance'] = performance_fee

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ä–∞—Å—á–µ—Ç–∞
            deposit.last_fee_calculation = datetime.utcnow()

            return fees

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∫–æ–º–∏—Å—Å–∏–π –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {deposit_id}: {e}")
            return {}

    async def process_monthly_fees(self):
        """–ï–∂–µ–º–µ—Å—è—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∏—Å—Å–∏–π"""
        logger.info("üí∞ –ù–∞—á–∞–ª–æ –µ–∂–µ–º–µ—Å—è—á–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∏—Å—Å–∏–π")

        total_fees_collected = Decimal("0")

        for deposit_id, deposit in self.client_deposits.items():
            if deposit.status != DepositStatus.ACTIVE:
                continue

            try:
                # –†–∞—Å—á–µ—Ç –∫–æ–º–∏—Å—Å–∏–π
                fees = await self.calculate_client_fees(deposit_id)

                if fees:
                    total_client_fees = sum(fees.values())

                    if total_client_fees > 0:
                        # –°–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–∏—Å—Å–∏–π —Å –ø–æ—Ä—Ç—Ñ–µ–ª—è –∫–ª–∏–µ–Ω—Ç–∞
                        portfolio = self.client_portfolios[deposit_id]

                        # –£–º–µ–Ω—å—à–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∫–ª–∏–µ–Ω—Ç–∞
                        portfolio.assets['USDT'].free -= total_client_fees
                        portfolio.assets['USDT'].total -= total_client_fees

                        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫ –æ–±—â–∏–º –∫–æ–º–∏—Å—Å–∏—è–º
                        deposit.total_fees_paid += total_client_fees
                        total_fees_collected += total_client_fees

                        logger.info(f"üí∞ –°–ø–∏—Å–∞–Ω—ã –∫–æ–º–∏—Å—Å–∏–∏ —Å {deposit.client_name}: ${total_client_fees}")

                        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
                        await self._send_client_notification(
                            deposit,
                            f"–ï–∂–µ–º–µ—Å—è—á–Ω—ã–µ –∫–æ–º–∏—Å—Å–∏–∏: ${total_client_fees} (—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: ${fees.get('management', 0)}, –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${fees.get('performance', 0)})",
                            "fees_charged"
                        )

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∏—Å—Å–∏–π –¥–ª—è {deposit.client_name}: {e}")

        logger.info(f"üí∞ –í—Å–µ–≥–æ —Å–æ–±—Ä–∞–Ω–æ –∫–æ–º–∏—Å—Å–∏–π: ${total_fees_collected}")
        return total_fees_collected

    async def client_withdrawal_request(self, deposit_id: str, amount: Optional[Decimal] = None) -> Dict:
        """–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –∫–ª–∏–µ–Ω—Ç–æ–º"""
        try:
            deposit = self.client_deposits[deposit_id]
            portfolio = self.client_portfolios[deposit_id]
            portfolio_stats = await portfolio.get_portfolio_stats()

            current_value = Decimal(str(portfolio_stats['total_value']))

            # –ï—Å–ª–∏ —Å—É–º–º–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞, –≤—ã–≤–æ–¥–∏–º –≤—Å–µ
            withdrawal_amount = amount or current_value

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤
            if withdrawal_amount > current_value:
                return {
                    'success': False,
                    'error': '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞',
                    'available': float(current_value),
                    'requested': float(withdrawal_amount)
                }

            # –†–∞—Å—á–µ—Ç –≤—ã—Ö–æ–¥–Ω–æ–π –∫–æ–º–∏—Å—Å–∏–∏
            exit_fee = withdrawal_amount * (deposit.fee_structure.exit_fee_percent / 100)
            net_withdrawal = withdrawal_amount - exit_fee

            # –ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π –µ—Å–ª–∏ –ø–æ–ª–Ω—ã–π –≤—ã–≤–æ–¥
            if withdrawal_amount == current_value:
                await self._close_all_client_positions(deposit_id)
                deposit.status = DepositStatus.WITHDRAWN

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è
            portfolio.assets['USDT'].free -= withdrawal_amount
            portfolio.assets['USDT'].total -= withdrawal_amount

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—â–µ–≥–æ —Ñ–æ–Ω–¥–∞
            self.fund_portfolio.assets['USDT'].free -= withdrawal_amount
            self.fund_portfolio.assets['USDT'].total -= withdrawal_amount
            self.total_aum -= withdrawal_amount

            logger.info(f"üí∏ –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ {deposit.client_name}: ${withdrawal_amount} (–∫–æ–º–∏—Å—Å–∏—è: ${exit_fee})")

            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
            await self._send_client_notification(
                deposit,
                f"–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∞–Ω: ${net_withdrawal} (–∫–æ–º–∏—Å—Å–∏—è: ${exit_fee})",
                "withdrawal_processed"
            )

            return {
                'success': True,
                'withdrawal_amount': float(withdrawal_amount),
                'exit_fee': float(exit_fee),
                'net_amount': float(net_withdrawal),
                'remaining_balance': float(current_value - withdrawal_amount)
            }

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–≤–æ–¥–∞ –¥–ª—è {deposit_id}: {e}")
            return {'success': False, 'error': str(e)}

    async def _close_all_client_positions(self, deposit_id: str):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π –∫–ª–∏–µ–Ω—Ç–∞"""
        try:
            portfolio = self.client_portfolios[deposit_id]

            for position_id, position in portfolio.positions.items():
                # –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –ø–æ —Ä—ã–Ω–æ—á–Ω–æ–π —Ü–µ–Ω–µ
                await portfolio.close_position(position_id, position.entry_price * Decimal("1.01"))  # –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Ü–µ–Ω–∞

            logger.info(f"üìä –ó–∞–∫—Ä—ã—Ç—ã –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {deposit_id}")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {deposit_id}: {e}")

    async def _send_client_notification(self, deposit: ClientDeposit, message: str, notification_type: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É"""
        try:
            # –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å–∏—Å—Ç–µ–º–æ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (email, SMS, Telegram)
            notification_data = {
                'client_name': deposit.client_name,
                'client_email': deposit.client_email,
                'message': message,
                'type': notification_type,
                'timestamp': datetime.utcnow().isoformat(),
                'deposit_id': deposit.id
            }

            # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
            logger.info(f"üìß –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è {deposit.client_name}: {message}")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

    async def generate_client_report(self, deposit_id: str, period_days: int = 30) -> Dict:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞"""
        try:
            deposit = self.client_deposits[deposit_id]
            portfolio = self.client_portfolios[deposit_id]
            portfolio_stats = await portfolio.get_portfolio_stats()

            current_value = Decimal(str(portfolio_stats['total_value']))
            initial_value = deposit.initial_amount

            # –†–∞—Å—á–µ—Ç –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
            total_return = current_value - initial_value
            total_return_percent = (total_return / initial_value) * 100

            # –†–∞—Å—á–µ—Ç –∫–æ–º–∏—Å—Å–∏–π
            fees = await self.calculate_client_fees(deposit_id)

            report = {
                'client_info': {
                    'name': deposit.client_name,
                    'deposit_id': deposit.id,
                    'risk_profile': deposit.risk_profile,
                    'strategies': deposit.allocated_strategies
                },
                'performance': {
                    'initial_deposit': float(initial_value),
                    'current_value': float(current_value),
                    'total_return': float(total_return),
                    'total_return_percent': float(total_return_percent),
                    'high_water_mark': float(deposit.high_water_mark),
                    'total_fees_paid': float(deposit.total_fees_paid)
                },
                'portfolio': {
                    'total_value': float(portfolio_stats['total_value']),
                    'available_balance': float(portfolio_stats['available_balance']),
                    'unrealized_pnl': float(portfolio_stats['unrealized_pnl']),
                    'positions_count': portfolio_stats['positions_count']
                },
                'current_fees': {
                    'management': float(fees.get('management', 0)),
                    'performance': float(fees.get('performance', 0)),
                    'total': float(sum(fees.values()))
                },
                'period': {
                    'start_date': (datetime.utcnow() - timedelta(days=period_days)).isoformat(),
                    'end_date': datetime.utcnow().isoformat(),
                    'days': period_days
                },
                'status': deposit.status.value,
                'created_at': deposit.created_at.isoformat(),
                'last_updated': datetime.utcnow().isoformat()
            }

            return report

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {deposit_id}: {e}")
            return {'error': str(e)}

    async def get_fund_summary(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –ø–æ —Ñ–æ–Ω–¥—É"""
        try:
            active_deposits = [d for d in self.client_deposits.values() if d.status == DepositStatus.ACTIVE]

            total_initial = sum(d.initial_amount for d in active_deposits)
            total_current = sum(float((await self.client_portfolios[d.id].get_portfolio_stats())['total_value'])
                                for d in active_deposits)
            total_fees = sum(d.total_fees_paid for d in active_deposits)

            return {
                'fund_statistics': {
                    'total_clients': len(active_deposits),
                    'total_aum': float(self.total_aum),
                    'total_initial_deposits': float(total_initial),
                    'total_current_value': total_current,
                    'total_return': total_current - float(total_initial),
                    'total_return_percent': ((total_current - float(total_initial)) / float(
                        total_initial)) * 100 if total_initial > 0 else 0,
                    'total_fees_collected': float(total_fees)
                },
                'client_breakdown': {
                    'conservative': len([d for d in active_deposits if d.risk_profile == 'conservative']),
                    'moderate': len([d for d in active_deposits if d.risk_profile == 'moderate']),
                    'aggressive': len([d for d in active_deposits if d.risk_profile == 'aggressive'])
                },
                'average_performance': {
                    'avg_return_percent': sum(((float(
                        (await self.client_portfolios[d.id].get_portfolio_stats())['total_value']) - float(
                        d.initial_amount)) / float(d.initial_amount)) * 100 for d in active_deposits) / len(
                        active_deposits) if active_deposits else 0,
                    'avg_deposit_size': float(total_initial) / len(active_deposits) if active_deposits else 0
                },
                'last_updated': datetime.utcnow().isoformat()
            }

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–¥–∫–∏ –ø–æ —Ñ–æ–Ω–¥—É: {e}")
            return {'error': str(e)}