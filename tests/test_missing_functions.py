# test_missing_functions.py - –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
–ó–∞–ø—É—Å–∫: python test_missing_functions.py
"""
import asyncio
import sys
import traceback
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ PATH
sys.path.append(str(Path(__file__).parent))


async def test_missing_functions():
    """–ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π"""
    print("üß™ === –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–• –§–£–ù–ö–¶–ò–ô ===")

    try:
        # –ò–º–ø–æ—Ä—Ç—ã
        from utils.helpers import create_sample_data
        from data.processors.technical_processor import TechnicalProcessor

        print("‚úÖ –ë–∞–∑–æ–≤—ã–µ –∏–º–ø–æ—Ä—Ç—ã —É—Å–ø–µ—à–Ω—ã")

        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        print("\nüìä –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
        data = create_sample_data("BTCUSDT", periods=100, start_price=45000)
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(data)} —Å–≤–µ—á–µ–π –¥–∞–Ω–Ω—ã—Ö")

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
        print("\n‚öôÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤...")
        processor = TechnicalProcessor()
        config = {
            'rsi': {'period': 14},
            'ema_fast': {'period': 9},
            'ema_slow': {'period': 21},
            'volume_sma': {'period': 20}
        }

        processed_data = processor.process_ohlcv(data, config)
        print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã: {list(processed_data.columns)}")

        # –¢–µ—Å—Ç 1: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞
        print("\n1Ô∏è‚É£ === –¢–ï–°–¢ –û–ü–†–ï–î–ï–õ–ï–ù–ò–Ø –¢–†–ï–ù–î–ê ===")
        await test_trend_detection(processed_data)

        # –¢–µ—Å—Ç 2: –ü–æ–∏—Å–∫ —É—Ä–æ–≤–Ω–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏/—Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è
        print("\n2Ô∏è‚É£ === –¢–ï–°–¢ –ü–û–ò–°–ö–ê –£–†–û–í–ù–ï–ô ===")
        await test_support_resistance(processed_data)

        # –¢–µ—Å—Ç 3: –í—Ä–µ–º–µ–Ω–Ω–æ–π –≥–æ—Ä–∏–∑–æ–Ω—Ç
        print("\n3Ô∏è‚É£ === –¢–ï–°–¢ –í–†–ï–ú–ï–ù–ù–û–ì–û –ì–û–†–ò–ó–û–ù–¢–ê ===")
        await test_time_horizon(processed_data)

        # –¢–µ—Å—Ç 4: Market Analyzer
        print("\n4Ô∏è‚É£ === –¢–ï–°–¢ MARKET ANALYZER ===")
        await test_market_analyzer()

        # –¢–µ—Å—Ç 5: AI Driven Strategy
        print("\n5Ô∏è‚É£ === –¢–ï–°–¢ AI DRIVEN STRATEGY ===")
        await test_ai_driven_strategy()

        print("\nüéâ === –í–°–ï –¢–ï–°–¢–´ –ó–ê–í–ï–†–®–ï–ù–´ –£–°–ü–ï–®–ù–û ===")

    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        print(f"Traceback: {traceback.format_exc()}")
        return False

    return True


async def test_trend_detection(data):
    """–¢–µ—Å—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–¥–∞"""
    try:
        # –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã —Ç—Ä–µ–Ω–¥–æ–≤
        import pandas as pd
        import numpy as np

        # –í–æ—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥
        up_data = data.copy()
        up_data['close'] = up_data['close'] * (1 + np.linspace(0, 0.1, len(up_data)))

        # –ù–∏—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥
        down_data = data.copy()
        down_data['close'] = down_data['close'] * (1 - np.linspace(0, 0.1, len(down_data)))

        # –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ (–Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –≤ —Ä–µ–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö)
        from core.engine.market_analyzer import MarketAnalyzer
        from config.trading_config import TradingConfig
        from core.event_bus import EventBus

        # –°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
        event_bus = EventBus()
        config = TradingConfig()
        analyzer = MarketAnalyzer(config, event_bus)

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞
        up_trend = analyzer._determine_trend(up_data)
        down_trend = analyzer._determine_trend(down_data)
        neutral_trend = analyzer._determine_trend(data)

        print(f"   üìà –í–æ—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥: {up_trend}")
        print(f"   üìâ –ù–∏—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥: {down_trend}")
        print(f"   ‚ÜîÔ∏è –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–¥: {neutral_trend}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if 'up' in up_trend.lower():
            print("   ‚úÖ –í–æ—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        else:
            print(f"   ‚ö†Ô∏è –í–æ—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–∞–∫: {up_trend}")

        if 'down' in down_trend.lower():
            print("   ‚úÖ –ù–∏—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        else:
            print(f"   ‚ö†Ô∏è –ù–∏—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–∞–∫: {down_trend}")

        await event_bus.stop()

    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—Ä–µ–Ω–¥–∞: {e}")


async def test_support_resistance(data):
    """–¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ —É—Ä–æ–≤–Ω–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è"""
    try:
        from core.engine.market_analyzer import MarketAnalyzer
        from config.trading_config import TradingConfig
        from core.event_bus import EventBus

        event_bus = EventBus()
        config = TradingConfig()
        analyzer = MarketAnalyzer(config, event_bus)

        levels = analyzer._find_support_resistance(data)

        print(f"   üìä –ù–∞–π–¥–µ–Ω–æ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–π: {len(levels['resistance_levels'])}")
        print(f"   üìä –ù–∞–π–¥–µ–Ω–æ –ø–æ–¥–¥–µ—Ä–∂–µ–∫: {len(levels['support_levels'])}")

        if levels['nearest_resistance']:
            print(f"   üî¥ –ë–ª–∏–∂–∞–π—à–µ–µ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ: ${levels['nearest_resistance']:.2f}")

        if levels['nearest_support']:
            print(f"   üü¢ –ë–ª–∏–∂–∞–π—à–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞: ${levels['nearest_support']:.2f}")

        current_price = data['close'].iloc[-1]
        print(f"   üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${current_price:.2f}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–∫—É
        if levels['nearest_resistance'] and levels['nearest_resistance'] > current_price:
            print("   ‚úÖ –°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ –≤—ã—à–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã - –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        elif levels['nearest_resistance']:
            print("   ‚ö†Ô∏è –°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ –Ω–∏–∂–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã - –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

        if levels['nearest_support'] and levels['nearest_support'] < current_price:
            print("   ‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –Ω–∏–∂–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã - –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        elif levels['nearest_support']:
            print("   ‚ö†Ô∏è –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≤—ã—à–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã - –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

        await event_bus.stop()

    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É—Ä–æ–≤–Ω–µ–π: {e}")


async def test_time_horizon(data):
    """–¢–µ—Å—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞"""
    try:
        # –≠–º—É–ª–∏—Ä—É–µ–º AI Driven Strategy
        print("   üìÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞...")

        # –í—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å - –∫–æ—Ä–æ—Ç–∫–∏–π –≥–æ—Ä–∏–∑–æ–Ω—Ç
        volatile_data = data.copy()
        returns = volatile_data['close'].pct_change()
        volatile_data['close'] = volatile_data['close'] * (1 + returns * 5)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å

        # –¢–µ—Å—Ç —Ä–∞–∑–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
        scenarios = [
            ("–û–±—ã—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", data),
            ("–í—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å", volatile_data),
            ("–ö–æ—Ä–æ—Ç–∫–∏–µ –¥–∞–Ω–Ω—ã–µ", data.tail(15))
        ]

        for scenario_name, test_data in scenarios:
            try:
                # –ü—Ä–æ—Å—Ç–∞—è —ç–º—É–ª—è—Ü–∏—è –ª–æ–≥–∏–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞
                if len(test_data) < 20:
                    horizon = 'short'
                else:
                    returns = test_data['close'].pct_change().dropna()
                    volatility = returns.tail(20).std()

                    if volatility > 0.03:
                        horizon = 'short'
                    else:
                        horizon = 'medium'

                print(f"   üìä {scenario_name}: {horizon}")

            except Exception as e:
                print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è {scenario_name}: {e}")

        print("   ‚úÖ –¢–µ—Å—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω")

    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞: {e}")


async def test_market_analyzer():
    """–¢–µ—Å—Ç Market Analyzer –≤ —Ü–µ–ª–æ–º"""
    try:
        from core.engine.market_analyzer import MarketAnalyzer
        from config.trading_config import TradingConfig
        from core.event_bus import EventBus

        print("   üî¨ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Market Analyzer...")

        event_bus = EventBus()
        await event_bus.start()

        config = TradingConfig()
        analyzer = MarketAnalyzer(config, event_bus)
        await analyzer.initialize()

        print("   ‚úÖ Market Analyzer –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

        # –≠–º—É–ª—è—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ —Å–∏–º–≤–æ–ª–∞ (–±–µ–∑ exchange_manager)
        print("   üìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ —Å–∏–º–≤–æ–ª–∞...")
        try:
            # –ë–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ exchange_manager –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∑–∞–≥–ª—É—à–∫–∞
            await analyzer.analyze_symbol("BTCUSDT")
            print("   ‚úÖ –ê–Ω–∞–ª–∏–∑ —Å–∏–º–≤–æ–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω (—Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏)")
        except Exception as e:
            print(f"   ‚ö†Ô∏è –ê–Ω–∞–ª–∏–∑ —Å–∏–º–≤–æ–ª–∞: {e} (–æ–∂–∏–¥–∞–µ–º–æ –±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö)")

        await analyzer.stop()
        await event_bus.stop()

    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ Market Analyzer: {e}")


async def test_ai_driven_strategy():
    """–¢–µ—Å—Ç AI Driven Strategy"""
    try:
        from trading.strategies.ai_driven import AIDrivenStrategy
        from core.event_bus import EventBus
        from utils.helpers import create_sample_data

        print("   ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI Driven Strategy...")

        event_bus = EventBus()
        await event_bus.start()

        config = {
            'min_confidence': 0.7,
            'use_news': False,  # –û—Ç–∫–ª—é—á–∞–µ–º –¥–ª—è —Ç–µ—Å—Ç–æ–≤
            'technical_indicators': {
                'rsi': {'period': 14},
                'ema_fast': {'period': 9},
                'ema_slow': {'period': 21}
            }
        }

        strategy = AIDrivenStrategy(config, event_bus)

        print("   ‚úÖ AI Driven Strategy –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞
        test_data = create_sample_data("BTCUSDT", periods=100)

        print("   üìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞...")
        analysis = await strategy.analyze(test_data, "BTCUSDT")

        print(f"   üìà –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω: {analysis.get('symbol', 'N/A')}")
        print(f"   üéØ –ù–∞–π–¥–µ–Ω—ã —É—Ä–æ–≤–Ω–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏/—Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è")

        # –¢–µ—Å—Ç —É—Å–ª–æ–≤–∏–π –≤—Ö–æ–¥–∞/–≤—ã—Ö–æ–¥–∞
        test_analysis = {
            'action': 'BUY',
            'adjusted_confidence': 0.8,
            'risk_score': 0.3,
            'technical_validation': {'score': 0.7}
        }

        should_enter = await strategy.should_enter(test_analysis)
        print(f"   üö™ –¢–µ—Å—Ç –≤—Ö–æ–¥–∞: {should_enter}")

        await event_bus.stop()

    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ AI Driven Strategy: {e}")


async def test_integration():
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã"""
    print("\nüîó === –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–´–ô –¢–ï–°–¢ ===")

    try:
        from core.engine.trading_engine import TradingEngine
        from config.settings import Settings
        from config.trading_config import TradingConfig

        print("   üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –¥–≤–∏–∂–∫–∞...")

        settings = Settings()
        settings.bybit_testnet = True
        settings.binance_testnet = True

        trading_config = TradingConfig()

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è —Ç–µ—Å—Ç–∞
        trading_config.trading_pairs = trading_config.trading_pairs[:1]  # –¢–æ–ª—å–∫–æ BTC

        engine = TradingEngine(settings, trading_config)

        print("   ‚öôÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")
        await engine.initialize()

        print("   ‚úÖ –¢–æ—Ä–≥–æ–≤—ã–π –¥–≤–∏–∂–æ–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

        # –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
        status = await engine.get_system_status()
        print(f"   üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã: {status['status']}")
        print(f"   üîå –ë–∏—Ä–∂–∏: {status['exchanges']}")
        print(f"   üéØ –°—Ç—Ä–∞—Ç–µ–≥–∏–∏: {status['active_strategies']}")

        # –¢–µ—Å—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è)
        if status['exchanges']:
            print("   üì° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞...")
            result = await engine.test_real_analysis("BTCUSDT")
            if result:
                print(f"   ‚úÖ –†–µ–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑: —Ü–µ–Ω–∞ ${result['current_price']}")
            else:
                print("   ‚ö†Ô∏è –†–µ–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è testnet)")

        await engine.stop()
        print("   ‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω")

    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞: {e}")
        print(f"   üìù –î–µ—Ç–∞–ª–∏: {traceback.format_exc()}")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üß™ –ó–ê–ü–£–°–ö –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–• –§–£–ù–ö–¶–ò–ô")
    print("=" * 60)

    try:
        # –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
        success = asyncio.run(test_missing_functions())

        if success:
            print("\nüîó –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞...")
            asyncio.run(test_integration())

        print("\n" + "=" * 60)
        print("üéâ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!")
        print("\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("1. –í–Ω–µ–¥—Ä–∏—Ç–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ —Ñ–∞–π–ª—ã")
        print("2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python main.py --mode demo")
        print("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ: python cli.py analyze --symbol BTCUSDT")
        print("4. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ: python main.py --mode real-test")

    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        print(f"Traceback: {traceback.format_exc()}")


if __name__ == "__main__":
    main()