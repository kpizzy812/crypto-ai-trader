# cli.py - –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø –° –†–ï–ê–õ–¨–ù–´–ú–ò –î–ê–ù–ù–´–ú–ò
import click
import asyncio
import pandas as pd
from loguru import logger
from config import Settings, TradingConfig
from utils.logger import setup_logger
import traceback

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
setup_logger()


@click.group()
def cli():
    """Crypto AI Trader CLI - –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    pass


@cli.command()
@click.option('--symbol', default='BTCUSDT', help='–¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞')
@click.option('--timeframe', default='5m', help='–¢–∞–π–º—Ñ—Ä–µ–π–º')
@click.option('--limit', default=100, help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π')
@click.option('--real', is_flag=True, help='–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –±–∏—Ä–∂–∏')
def analyze(symbol, timeframe, limit, real):
    """–ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞"""
    asyncio.run(_analyze_market(symbol, timeframe, limit, real))


@cli.command()
@click.option('--exchange', default='bybit', help='–ë–∏—Ä–∂–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è')
def test_connection(exchange):
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∏—Ä–∂–µ"""
    asyncio.run(_test_exchange_connection(exchange))


@cli.command()
@click.option('--symbol', default='BTCUSDT', help='–¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞')
@click.option('--real', is_flag=True, help='–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ')
@click.option('--mock', is_flag=True, help='–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å mock AI')
def ai_analyze(symbol, real, mock):
    """AI –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞"""
    asyncio.run(_ai_analyze_market(symbol, real, mock))


@cli.command()
def run():
    """–ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –¥–≤–∏–∂–∫–∞"""
    asyncio.run(_run_trading_engine())


@cli.command()
def demo():
    """–ó–∞–ø—É—Å–∫ –¥–µ–º–æ —Ä–µ–∂–∏–º–∞"""
    asyncio.run(_run_demo())


@cli.command()
@click.option('--symbols', default='BTCUSDT,ETHUSDT,SOLUSDT', help='–°–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é')
def real_test(symbols):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    symbol_list = [s.strip() for s in symbols.split(',')]
    asyncio.run(_real_data_test(symbol_list))


# –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥
async def _analyze_market(symbol: str, timeframe: str, limit: int, use_real: bool):
    """–ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    settings = Settings()

    click.echo(f"üîç –ê–Ω–∞–ª–∏–∑ {symbol} –Ω–∞ —Ç–∞–π–º—Ñ—Ä–µ–π–º–µ {timeframe}")

    if use_real:
        click.echo("üì° –†–µ–∂–∏–º: –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –±–∏—Ä–∂–∏")
    else:
        click.echo("üß™ –†–µ–∂–∏–º: –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ")

    try:
        if use_real:
            # –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –±–∏—Ä–∂–∏
            from core.event_bus import EventBus
            from core.engine.exchange_manager import ExchangeManager

            event_bus = EventBus()
            await event_bus.start()

            try:
                exchange_manager = ExchangeManager(settings, event_bus)
                await exchange_manager.initialize()

                exchanges = await exchange_manager.get_connected_exchanges()
                if exchanges:
                    click.echo(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω—ã –±–∏—Ä–∂–∏: {exchanges}")

                    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                    ohlcv_data = await exchange_manager.get_market_data(symbol, timeframe, limit)

                    if not ohlcv_data.empty:
                        # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                        current_price = ohlcv_data['close'].iloc[-1]
                        volume_avg = ohlcv_data['volume'].rolling(20).mean().iloc[-1]
                        current_volume = ohlcv_data['volume'].iloc[-1]

                        click.echo(f"\nüìä –†–µ–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ {symbol}:")
                        click.echo(f"üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${current_price:,.2f}")
                        click.echo(f"üìä –û–±—ä–µ–º: {current_volume:,.0f} (—Å—Ä. {volume_avg:,.0f})")
                        click.echo(f"üîä –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {'–í—ã—Å–æ–∫–∞—è' if current_volume > volume_avg * 1.5 else '–û–±—ã—á–Ω–∞—è'}")

                        # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
                        from data.processors.technical_processor import TechnicalProcessor
                        processor = TechnicalProcessor()

                        config = {
                            'rsi': {'period': 14},
                            'ema_fast': {'period': 9},
                            'ema_slow': {'period': 21}
                        }

                        processed = processor.process_ohlcv(ohlcv_data, config)
                        current = processed.iloc[-1]

                        if 'rsi' in current and not pd.isna(current['rsi']):
                            click.echo(f"üìà RSI: {current['rsi']:.2f}")

                        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–≤–µ—á–µ–π
                        click.echo(f"\nüìà –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–≤–µ—á–µ–π:")
                        recent_data = ohlcv_data.tail(5)
                        for idx, row in recent_data.iterrows():
                            direction = "üü¢" if row['close'] > row['open'] else "üî¥"
                            click.echo(
                                f"{direction} {idx.strftime('%H:%M')} | O: {row['open']:.2f} H: {row['high']:.2f} L: {row['low']:.2f} C: {row['close']:.2f}")
                    else:
                        click.echo("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
                else:
                    click.echo("‚ö†Ô∏è –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –±–∏—Ä–∂. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á–∏ –≤ .env")

                await exchange_manager.stop()

            finally:
                await event_bus.stop()
        else:
            # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            from utils.helpers import create_sample_data
            ohlcv_data = create_sample_data(symbol, periods=limit)

            current_price = ohlcv_data['close'].iloc[-1]
            volume_avg = ohlcv_data['volume'].rolling(20).mean().iloc[-1]
            current_volume = ohlcv_data['volume'].iloc[-1]

            click.echo(f"\nüìä –¢–µ—Å—Ç–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ {symbol}:")
            click.echo(f"üí∞ –¶–µ–Ω–∞: ${current_price:,.2f}")
            click.echo(f"üìä –û–±—ä–µ–º: {current_volume:,.0f} (—Å—Ä. {volume_avg:,.0f})")

    except ImportError:
        click.echo("‚ùå –ú–æ–¥—É–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        click.echo("üí° –°–æ–∑–¥–∞–π—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ñ–∞–π–ª—ã –∏–∑ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤")
    except Exception as e:
        click.echo(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        if logger.level <= 10:  # DEBUG level
            click.echo(f"–î–µ—Ç–∞–ª–∏: {traceback.format_exc()}")


async def _test_exchange_connection(exchange: str):
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∏—Ä–∂–µ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π"""
    settings = Settings()

    try:
        from core.event_bus import EventBus
        from core.engine.exchange_manager import ExchangeManager

        event_bus = EventBus()
        await event_bus.start()

        try:
            exchange_manager = ExchangeManager(settings, event_bus)
            await exchange_manager.initialize()

            exchanges = await exchange_manager.get_connected_exchanges()

            if exchanges:
                click.echo(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!")
                click.echo(f"üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ –±–∏—Ä–∂–∏: {exchanges}")

                # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
                try:
                    data = await exchange_manager.get_market_data("BTCUSDT", "5m", 5)
                    if not data.empty:
                        current_price = data['close'].iloc[-1]
                        click.echo(f"üìä BTC/USDT: ${current_price:,.2f}")
                    else:
                        click.echo("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ")
                except Exception as e:
                    click.echo(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {e}")
            else:
                click.echo(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∏—Ä–∂–∞–º")
                click.echo("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á–∏ –≤ .env —Ñ–∞–π–ª–µ")

            await exchange_manager.stop()

        finally:
            await event_bus.stop()

    except ImportError:
        click.echo("‚ùå –ú–æ–¥—É–ª—å exchange_manager –Ω–µ –Ω–∞–π–¥–µ–Ω")
        click.echo("üí° –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª –∏–∑ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞ '–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π Exchange Manager'")
    except Exception as e:
        click.echo(f"‚ùå –û—à–∏–±–∫–∞: {e}")


async def _ai_analyze_market(symbol: str, use_real: bool, mock: bool):
    """AI –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        if use_real:
            click.echo(f"üåêü§ñ –†–µ–∞–ª—å–Ω—ã–π AI –∞–Ω–∞–ª–∏–∑ {symbol}")

            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            settings = Settings()
            from core.event_bus import EventBus
            from core.engine.exchange_manager import ExchangeManager

            event_bus = EventBus()
            await event_bus.start()

            try:
                exchange_manager = ExchangeManager(settings, event_bus)
                await exchange_manager.initialize()

                exchanges = await exchange_manager.get_connected_exchanges()
                if exchanges:
                    ohlcv_data = await exchange_manager.get_market_data(symbol, "5m", 100)

                    if not ohlcv_data.empty:
                        current_price = ohlcv_data['close'].iloc[-1]
                        price_change = (ohlcv_data['close'].iloc[-1] - ohlcv_data['close'].iloc[0]) / \
                                       ohlcv_data['close'].iloc[0] * 100

                        # AI –∞–Ω–∞–ª–∏–∑
                        if mock:
                            from ai.mock_analyzer import MockAIAnalyzer
                            analyzer = MockAIAnalyzer()
                        else:
                            from ai.openai_analyzer import OpenAIAnalyzer
                            analyzer = OpenAIAnalyzer()

                        analysis = await analyzer.analyze_market(ohlcv_data, symbol)

                        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                        click.echo(f"\nüéØ AI –ê–Ω–∞–ª–∏–∑ {symbol}:")
                        click.echo(f"üìà –¶–µ–Ω–∞: ${current_price:,.2f}")
                        click.echo(f"üìä –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {price_change:+.2f}%")
                        click.echo(f"ü§ñ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {analysis['action']}")
                        click.echo(f"üí™ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {analysis['confidence']:.1%}")
                        click.echo(f"üí≠ –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ: {analysis['reasoning']}")
                    else:
                        click.echo("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
                else:
                    click.echo("‚ö†Ô∏è –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –±–∏—Ä–∂–∞–º")

                await exchange_manager.stop()

            finally:
                await event_bus.stop()
        else:
            # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            from utils.helpers import create_sample_data
            from ai.mock_analyzer import MockAIAnalyzer

            ohlcv_data = create_sample_data(symbol, periods=100)
            analyzer = MockAIAnalyzer()

            click.echo(f"üß™ü§ñ –¢–µ—Å—Ç–æ–≤—ã–π AI –∞–Ω–∞–ª–∏–∑ {symbol}")
            analysis = await analyzer.analyze_market(ohlcv_data, symbol)

            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            click.echo(f"\nüéØ AI –ê–Ω–∞–ª–∏–∑ {symbol}:")
            click.echo(f"üìà –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {analysis['action']}")
            click.echo(f"üí™ –°–∏–ª–∞ —Å–∏–≥–Ω–∞–ª–∞: {analysis['signal_strength']:.2f}")
            click.echo(f"üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {analysis['confidence']:.1%}")
            click.echo(f"‚ö†Ô∏è –£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞: {analysis['risk_level']}")
            click.echo(f"üí≠ –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ: {analysis['reasoning']}")

        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç—É
        if analysis['confidence'] > 0.7 and analysis['action'] != 'HOLD':
            click.echo(f"\n‚úÖ –°–∏–≥–Ω–∞–ª –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É–≤–µ—Ä–µ–Ω–Ω—ã–π –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏")
        else:
            click.echo(f"\n‚ö†Ô∏è –°–∏–≥–Ω–∞–ª –Ω–µ—É–≤–µ—Ä–µ–Ω–Ω—ã–π, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –≤–æ–∑–¥–µ—Ä–∂–∞—Ç—å—Å—è –æ—Ç —Ç–æ—Ä–≥–æ–≤–ª–∏")

    except ImportError as e:
        click.echo(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        click.echo("üí° –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —Å–æ–∑–¥–∞–Ω—ã –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã")
    except Exception as e:
        click.echo(f"‚ùå –û—à–∏–±–∫–∞: {e}")


async def _real_data_test(symbols: list):
    """–ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    click.echo("üåê === –ö–û–ú–ü–õ–ï–ö–°–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –° –†–ï–ê–õ–¨–ù–´–ú–ò –î–ê–ù–ù–´–ú–ò ===")

    try:
        # –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ main.py
        from main import run_real_data_test

        # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        results = await run_real_data_test()

        if results:
            click.echo("\nüéâ === –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø ===")
            for symbol, result in results.items():
                click.echo(f"\nüìä {symbol}:")
                click.echo(f"   üí∞ –¶–µ–Ω–∞: ${result['current_price']:,.2f}")
                click.echo(f"   üìà –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {result['price_change_24h']:+.2f}%")
                click.echo(f"   ü§ñ AI: {result['analysis']['action']}")
                click.echo(f"   üí™ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result['analysis']['confidence']:.1%}")
        else:
            click.echo("‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –¥–∞–ª–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")

    except Exception as e:
        click.echo(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")


async def _run_trading_engine():
    """–ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –¥–≤–∏–∂–∫–∞"""
    click.echo("üöÄ –ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –¥–≤–∏–∂–∫–∞...")
    click.echo("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è testnet —Ä–µ–∂–∏–º –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")

    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–ª–Ω—ã–π –¥–≤–∏–∂–æ–∫
        from main import run_bot_mode
        await run_bot_mode()
    except Exception as e:
        click.echo(f"‚ùå –û—à–∏–±–∫–∞: {e}")


async def _run_demo():
    """–ó–∞–ø—É—Å–∫ –¥–µ–º–æ —Ä–µ–∂–∏–º–∞"""
    click.echo("üéØ –ó–∞–ø—É—Å–∫ –¥–µ–º–æ —Ä–µ–∂–∏–º–∞...")

    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –¥–µ–º–æ –∏–∑ main
        from main import run_demo_mode
        await run_demo_mode()

    except ImportError:
        click.echo("‚ùå –ú–æ–¥—É–ª—å main –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω")
        click.echo("üí° –û–±–Ω–æ–≤–∏—Ç–µ main.py –∏–∑ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞")
    except Exception as e:
        click.echo(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–º–æ —Ä–µ–∂–∏–º–∞: {e}")


if __name__ == "__main__":
    try:
        cli()
    except Exception as e:
        click.echo(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ CLI: {e}")
        logger.error(f"CLI error: {e}")
        logger.error(traceback.format_exc())