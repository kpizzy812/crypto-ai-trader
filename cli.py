# cli.py
import click
import asyncio
from loguru import logger
from config import Settings, TradingConfig
from core import TradingEngine
from data.collectors.exchange_collector import ExchangeDataCollector
from ai.mock_analyzer import MockAIAnalyzer
from utils.logger import setup_logger

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
setup_logger()


@click.group()
def cli():
    """Crypto AI Trader CLI"""
    pass


@cli.command()
@click.option('--symbol', default='BTCUSDT', help='–¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞')
@click.option('--timeframe', default='5m', help='–¢–∞–π–º—Ñ—Ä–µ–π–º')
@click.option('--limit', default=100, help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π')
def analyze(symbol, timeframe, limit):
    """–ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞"""
    asyncio.run(_analyze_market(symbol, timeframe, limit))


@cli.command()
@click.option('--exchange', default='bybit', help='–ë–∏—Ä–∂–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è')
def test_connection(exchange):
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∏—Ä–∂–µ"""
    asyncio.run(_test_exchange_connection(exchange))


@cli.command()
@click.option('--symbol', default='BTCUSDT', help='–¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞')
@click.option('--mock', is_flag=True, help='–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å mock AI')
def ai_analyze(symbol, mock):
    """AI –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞"""
    asyncio.run(_ai_analyze_market(symbol, mock))


@cli.command()
def run():
    """–ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –¥–≤–∏–∂–∫–∞"""
    asyncio.run(_run_trading_engine())


# –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥
async def _analyze_market(symbol: str, timeframe: str, limit: int):
    """–ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞"""
    settings = Settings()
    collector = None

    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∏—Ä–∂–µ
        collector = ExchangeDataCollector(
            'bybit',
            settings.bybit_api_key,
            settings.bybit_api_secret,
            settings.bybit_testnet
        )

        logger.info(f"–ê–Ω–∞–ª–∏–∑ {symbol} –Ω–∞ —Ç–∞–π–º—Ñ—Ä–µ–π–º–µ {timeframe}")

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        ohlcv_data = await collector.get_ohlcv(symbol, timeframe, limit)
        ticker = await collector.get_ticker(symbol)

        # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
        current_price = ohlcv_data['close'].iloc[-1]
        sma_20 = ohlcv_data['close'].rolling(20).mean().iloc[-1]
        volume_avg = ohlcv_data['volume'].rolling(20).mean().iloc[-1]
        current_volume = ohlcv_data['volume'].iloc[-1]

        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
        click.echo(f"\nüìä –ê–Ω–∞–ª–∏–∑ {symbol}:")
        click.echo(f"üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${current_price:,.2f}")
        click.echo(f"üìà SMA(20): ${sma_20:,.2f}")
        click.echo(f"üìä –û–±—ä–µ–º: {current_volume:,.0f} (—Å—Ä. {volume_avg:,.0f})")
        click.echo(f"üìà –¢—Ä–µ–Ω–¥: {'‚ÜóÔ∏è –í–æ—Å—Ö–æ–¥—è—â–∏–π' if current_price > sma_20 else '‚ÜòÔ∏è –ù–∏—Å—Ö–æ–¥—è—â–∏–π'}")
        click.echo(f"üîä –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {'–í—ã—Å–æ–∫–∞—è' if current_volume > volume_avg * 1.5 else '–û–±—ã—á–Ω–∞—è'}")

        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–≤–µ—á–µ–π
        click.echo(f"\nüìà –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–≤–µ—á–µ–π:")
        recent_data = ohlcv_data.tail(5)
        for idx, row in recent_data.iterrows():
            direction = "üü¢" if row['close'] > row['open'] else "üî¥"
            click.echo(
                f"{direction} {idx.strftime('%H:%M')} | O: {row['open']:.2f} H: {row['high']:.2f} L: {row['low']:.2f} C: {row['close']:.2f}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
        click.echo(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    finally:
        # –í–ê–ñ–ù–û: –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        if collector:
            await collector.close()


async def _test_exchange_connection(exchange: str):
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∏—Ä–∂–µ"""
    settings = Settings()
    collector = None

    try:
        if exchange.lower() == 'bybit':
            collector = ExchangeDataCollector(
                'bybit',
                settings.bybit_api_key,
                settings.bybit_api_secret,
                settings.bybit_testnet
            )
        elif exchange.lower() == 'binance':
            collector = ExchangeDataCollector(
                'binance',
                settings.binance_api_key,
                settings.binance_api_secret,
                settings.binance_testnet
            )
        else:
            click.echo(f"‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –±–∏—Ä–∂–∞: {exchange}")
            return

        success = await collector.test_connection()

        if success:
            click.echo(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {exchange} —É—Å–ø–µ—à–Ω–æ!")

            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä—ã–Ω–∫–∞—Ö
            try:
                ticker = await collector.get_ticker('BTCUSDT')
                click.echo(f"üìä BTC/USDT: ${ticker['last']:,.2f}")
            except Exception as e:
                click.echo(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–∏–∫–µ—Ä: {e}")
        else:
            click.echo(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ {exchange}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        click.echo(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    finally:
        # –í–ê–ñ–ù–û: –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        if collector:
            await collector.close()


async def _ai_analyze_market(symbol: str, mock: bool):
    """AI –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞"""
    settings = Settings()
    collector = None

    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        collector = ExchangeDataCollector(
            'bybit',
            settings.bybit_api_key,
            settings.bybit_api_secret,
            settings.bybit_testnet
        )

        ohlcv_data = await collector.get_ohlcv(symbol, '15m', 100)

        # AI –∞–Ω–∞–ª–∏–∑
        if mock or not settings.openai_api_key:
            analyzer = MockAIAnalyzer()
            click.echo("ü§ñ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ Mock AI –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞")
        else:
            # –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π OpenAI –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
            analyzer = MockAIAnalyzer()
            click.echo("ü§ñ Mock AI (OpenAI –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω)")

        click.echo(f"üîç –ê–Ω–∞–ª–∏–∑ {symbol}...")
        analysis = await analyzer.analyze_market(ohlcv_data, symbol)

        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        click.echo(f"\nüéØ AI –ê–Ω–∞–ª–∏–∑ {symbol}:")
        click.echo(f"üìà –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {analysis['action']}")
        click.echo(f"üí™ –°–∏–ª–∞ —Å–∏–≥–Ω–∞–ª–∞: {analysis['signal_strength']:.2f}")
        click.echo(f"üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {analysis['confidence']:.1%}")
        click.echo(f"‚ö†Ô∏è  –£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞: {analysis['risk_level']}")
        click.echo(f"üí≠ –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ: {analysis['reasoning']}")

        if analysis['action'] != 'HOLD':
            click.echo(f"üí∞ –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º–∞—è —Ü–µ–Ω–∞ –≤—Ö–æ–¥–∞: ${analysis['suggested_entry']:.2f}")

        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç—É
        if analysis['confidence'] > 0.7 and analysis['action'] != 'HOLD':
            click.echo(f"\n‚úÖ –°–∏–≥–Ω–∞–ª –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É–≤–µ—Ä–µ–Ω–Ω—ã–π –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏")
        else:
            click.echo(f"\n‚ö†Ô∏è  –°–∏–≥–Ω–∞–ª –Ω–µ—É–≤–µ—Ä–µ–Ω–Ω—ã–π, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –≤–æ–∑–¥–µ—Ä–∂–∞—Ç—å—Å—è –æ—Ç —Ç–æ—Ä–≥–æ–≤–ª–∏")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ AI –∞–Ω–∞–ª–∏–∑–∞: {e}")
        click.echo(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    finally:
        # –í–ê–ñ–ù–û: –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        if collector:
            await collector.close()


async def _run_trading_engine():
    """–ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –¥–≤–∏–∂–∫–∞"""
    settings = Settings()
    trading_config = TradingConfig()

    click.echo("üöÄ –ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –¥–≤–∏–∂–∫–∞...")
    click.echo("‚ö†Ô∏è  Phase 0: –¢–æ–ª—å–∫–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è, —Ä–µ–∞–ª—å–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∞")

    engine = TradingEngine(settings, trading_config)

    try:
        await engine.start()
    except KeyboardInterrupt:
        click.echo("\n‚èπÔ∏è  –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–≤–∏–∂–∫–∞: {e}")
        click.echo(f"‚ùå –û—à–∏–±–∫–∞: {e}")


if __name__ == "__main__":
    cli()