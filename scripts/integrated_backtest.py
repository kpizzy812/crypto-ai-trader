# scripts/integrated_backtest.py
"""
–ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
"""
import asyncio
import pandas as pd
from datetime import datetime, timedelta
from typing import Dict, List, Optional
from loguru import logger

from config.settings import Settings
from config.trading_config import TradingConfig
from backtest.backtester import Backtester, BacktestResult
from trading.strategies.simple_momentum import SimpleMomentumStrategy
from trading.strategies.ai_driven import AIDrivenStrategy
from core.engine.exchange_manager import ExchangeManager
from core.event_bus import EventBus
from utils.helpers import create_sample_data


class IntegratedBacktester:
    """–ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –±—ç–∫—Ç–µ—Å—Ç–µ—Ä —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""

    def __init__(self, settings: Settings, trading_config: TradingConfig):
        self.settings = settings
        self.trading_config = trading_config
        self.event_bus = EventBus()
        self.exchange_manager = ExchangeManager(settings, self.event_bus)
        self.backtester = Backtester()

    async def run_comprehensive_backtest(self,
                                         symbols: List[str] = None,
                                         start_date: datetime = None,
                                         end_date: datetime = None,
                                         use_real_data: bool = True) -> Dict[str, BacktestResult]:
        """–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –±—ç–∫—Ç–µ—Å—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∏ —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""

        logger.info("üî¨ –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞")

        # –°–∏–º–≤–æ–ª—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if symbols is None:
            symbols = [tp.symbol for tp in self.trading_config.trading_pairs if tp.enabled]

        # –î–∞—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π)
        if end_date is None:
            end_date = datetime.utcnow()
        if start_date is None:
            start_date = end_date - timedelta(days=30)

        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
            if use_real_data:
                await self.event_bus.start()
                await self.exchange_manager.initialize()

            # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
            data = await self._collect_backtest_data(symbols, start_date, end_date, use_real_data)

            if not data:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –±—ç–∫—Ç–µ—Å—Ç–∞")
                return {}

            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
            strategies = await self._prepare_strategies()

            # –ó–∞–ø—É—Å–∫ –±—ç–∫—Ç–µ—Å—Ç–æ–≤
            results = {}
            for strategy in strategies:
                logger.info(f"üìä –ë—ç–∫—Ç–µ—Å—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {strategy.name}")

                try:
                    result = await self.backtester.run(
                        strategy=strategy,
                        data=data,
                        start_date=start_date,
                        end_date=end_date
                    )

                    results[strategy.name] = result

                    logger.info(f"‚úÖ {strategy.name}: –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å {result.total_return_percent:.2f}%, "
                                f"–í–∏–Ω—Ä–µ–π—Ç {result.win_rate:.1%}, –°–¥–µ–ª–æ–∫ {result.total_trades}")

                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –±—ç–∫—Ç–µ—Å—Ç–∞ {strategy.name}: {e}")
                    results[strategy.name] = None

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            await self._save_backtest_results(results, symbols, start_date, end_date)

            return results

        finally:
            if use_real_data:
                await self.exchange_manager.stop()
                await self.event_bus.stop()

    async def _collect_backtest_data(self, symbols: List[str],
                                     start_date: datetime, end_date: datetime,
                                     use_real_data: bool) -> Dict[str, pd.DataFrame]:
        """–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞"""

        data = {}

        for symbol in symbols:
            logger.info(f"üì° –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}")

            try:
                if use_real_data and self.exchange_manager.exchanges:
                    # –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–∏–æ–¥–æ–≤
                    periods = int((end_date - start_date).total_seconds() / (5 * 60))  # 5-–º–∏–Ω—É—Ç–Ω—ã–µ —Å–≤–µ—á–∏
                    periods = min(periods, 1000)  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è API

                    symbol_data = await self.exchange_manager.get_market_data(
                        symbol,
                        self.trading_config.primary_timeframe,
                        periods
                    )

                    if not symbol_data.empty:
                        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –¥–∞—Ç–∞–º
                        symbol_data = symbol_data[
                            (symbol_data.index >= start_date) &
                            (symbol_data.index <= end_date)
                            ]

                        if len(symbol_data) > 10:
                            data[symbol] = symbol_data
                            logger.info(f"‚úÖ {symbol}: {len(symbol_data)} —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–≤–µ—á–µ–π")
                        else:
                            logger.warning(f"‚ö†Ô∏è {symbol}: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ")
                            data[symbol] = create_sample_data(symbol, periods=200)
                    else:
                        logger.warning(f"‚ö†Ô∏è {symbol}: –ü—É—Å—Ç—ã–µ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ")
                        data[symbol] = create_sample_data(symbol, periods=200)

                else:
                    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
                    logger.info(f"üß™ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}")
                    periods = int((end_date - start_date).total_seconds() / (5 * 60))
                    periods = min(max(periods, 100), 1000)

                    data[symbol] = create_sample_data(symbol, periods=periods)

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö {symbol}: {e}")
                # Fallback –∫ —Ç–µ—Å—Ç–æ–≤—ã–º –¥–∞–Ω–Ω—ã–º
                data[symbol] = create_sample_data(symbol, periods=200)

        logger.info(f"üìä –°–æ–±—Ä–∞–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {len(data)} —Å–∏–º–≤–æ–ª–æ–≤")
        return data

    async def _prepare_strategies(self) -> List:
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –¥–ª—è –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞"""

        strategies = []

        # SimpleMomentum —Å—Ç—Ä–∞—Ç–µ–≥–∏—è
        momentum_config = {
            'indicators': self.trading_config.technical_indicators,
            'position_size_percent': 2.0,
            'confidence_threshold': 0.6
        }
        momentum_strategy = SimpleMomentumStrategy(momentum_config)
        strategies.append(momentum_strategy)

        # AI-Driven —Å—Ç—Ä–∞—Ç–µ–≥–∏—è (—Å mock –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–æ–º –¥–ª—è –±—ç–∫—Ç–µ—Å—Ç–∞)
        ai_config = {
            'min_confidence': 0.7,
            'use_news': False,  # –û—Ç–∫–ª—é—á–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è –±—ç–∫—Ç–µ—Å—Ç–∞
            'technical_indicators': self.trading_config.technical_indicators,
            'risk_multiplier': 1.0
        }
        ai_strategy = AIDrivenStrategy(ai_config, self.event_bus)
        strategies.append(ai_strategy)

        return strategies

    async def _save_backtest_results(self, results: Dict[str, BacktestResult],
                                     symbols: List[str], start_date: datetime, end_date: datetime):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞"""

        try:
            import os
            from datetime import datetime

            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            results_dir = "backtest_results"
            os.makedirs(results_dir, exist_ok=True)

            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤–æ–¥–∫—É
            summary = {
                'timestamp': timestamp,
                'period': f"{start_date.strftime('%Y-%m-%d')} to {end_date.strftime('%Y-%m-%d')}",
                'symbols': symbols,
                'strategies': {}
            }

            for strategy_name, result in results.items():
                if result is not None:
                    summary['strategies'][strategy_name] = {
                        'total_return_percent': result.total_return_percent,
                        'sharpe_ratio': result.sharpe_ratio,
                        'max_drawdown_percent': result.max_drawdown_percent,
                        'win_rate': result.win_rate,
                        'profit_factor': result.profit_factor,
                        'total_trades': result.total_trades
                    }

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–¥—Ä–æ–±–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                    self.backtester.save_results(result, strategy_name, results_dir)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤–æ–¥–∫—É
            import json
            with open(f"{results_dir}/summary_{timestamp}.json", 'w') as f:
                json.dump(summary, f, indent=2, default=str)

            logger.info(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {results_dir}")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")

    async def run_strategy_optimization(self, strategy_name: str, symbol: str,
                                        parameter_ranges: Dict) -> Dict:
        """–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""

        logger.info(f"üîß –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ {strategy_name} –¥–ª—è {symbol}")

        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            data = await self._collect_backtest_data([symbol],
                                                     datetime.utcnow() - timedelta(days=60),
                                                     datetime.utcnow(),
                                                     True)

            if symbol not in data:
                logger.error(f"‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}")
                return {}

            best_result = None
            best_params = None
            best_sharpe = -999

            # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            import itertools

            param_combinations = list(itertools.product(*parameter_ranges.values()))
            logger.info(f"üßÆ –¢–µ—Å—Ç–∏—Ä—É–µ–º {len(param_combinations)} –∫–æ–º–±–∏–Ω–∞—Ü–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")

            for i, param_values in enumerate(param_combinations):
                # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
                config = dict(zip(parameter_ranges.keys(), param_values))
                config['indicators'] = self.trading_config.technical_indicators

                # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
                if strategy_name == "SimpleMomentum":
                    strategy = SimpleMomentumStrategy(config)
                else:
                    continue  # –ü–æ–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ SimpleMomentum

                # –ó–∞–ø—É—Å–∫–∞–µ–º –±—ç–∫—Ç–µ—Å—Ç
                try:
                    result = await self.backtester.run(strategy, {symbol: data[symbol]})

                    # –û—Ü–µ–Ω–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    if result.sharpe_ratio > best_sharpe and result.total_trades >= 10:
                        best_sharpe = result.sharpe_ratio
                        best_result = result
                        best_params = config

                    if i % 10 == 0:
                        logger.info(f"üîÑ –ü—Ä–æ–≥—Ä–µ—Å—Å: {i}/{len(param_combinations)}")

                except Exception as e:
                    logger.debug(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ {config}: {e}")
                    continue

            if best_result:
                logger.info(f"‚úÖ –õ—É—á—à–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è {strategy_name}:")
                logger.info(f"   –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {best_params}")
                logger.info(f"   Sharpe ratio: {best_result.sharpe_ratio:.3f}")
                logger.info(f"   –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {best_result.total_return_percent:.2f}%")
                logger.info(f"   –í–∏–Ω—Ä–µ–π—Ç: {best_result.win_rate:.1%}")

                return {
                    'best_params': best_params,
                    'best_result': best_result,
                    'optimization_summary': {
                        'tested_combinations': len(param_combinations),
                        'best_sharpe': best_sharpe,
                        'best_return': best_result.total_return_percent,
                        'best_win_rate': best_result.win_rate
                    }
                }
            else:
                logger.warning("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ —É—Å–ø–µ—à–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
                return {}

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {e}")
            return {}


async def run_integrated_backtest():
    """–ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞"""

    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞")

    settings = Settings()
    trading_config = TradingConfig()

    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ testnet
    settings.bybit_testnet = True
    settings.binance_testnet = True

    backtester = IntegratedBacktester(settings, trading_config)

    try:
        # –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –±—ç–∫—Ç–µ—Å—Ç
        results = await backtester.run_comprehensive_backtest(
            symbols=["BTCUSDT", "ETHUSDT"],
            start_date=datetime.utcnow() - timedelta(days=7),  # –ü–æ—Å–ª–µ–¥–Ω—è—è –Ω–µ–¥–µ–ª—è
            end_date=datetime.utcnow(),
            use_real_data=True
        )

        # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        if results:
            logger.info("\nüìä === –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ë–≠–ö–¢–ï–°–¢–ò–ù–ì–ê ===")

            for strategy_name, result in results.items():
                if result:
                    logger.info(f"\nüéØ {strategy_name}:")
                    logger.info(f"   üí∞ –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {result.total_return_percent:.2f}%")
                    logger.info(f"   üìà Sharpe ratio: {result.sharpe_ratio:.3f}")
                    logger.info(f"   üìâ –ú–∞–∫—Å. –ø—Ä–æ—Å–∞–¥–∫–∞: {result.max_drawdown_percent:.2f}%")
                    logger.info(f"   üéØ –í–∏–Ω—Ä–µ–π—Ç: {result.win_rate:.1%}")
                    logger.info(f"   üî¢ –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {result.total_trades}")
                    logger.info(f"   üí™ Profit factor: {result.profit_factor:.2f}")

        # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è SimpleMomentum —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        logger.info("\nüîß === –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø –°–¢–†–ê–¢–ï–ì–ò–ò ===")

        optimization_params = {
            'position_size_percent': [1.0, 2.0, 3.0],
            'confidence_threshold': [0.5, 0.6, 0.7, 0.8]
        }

        optimization_result = await backtester.run_strategy_optimization(
            "SimpleMomentum",
            "BTCUSDT",
            optimization_params
        )

        if optimization_result:
            logger.info("‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞: {e}")

    logger.info("üèÅ –ë—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω")


if __name__ == "__main__":
    asyncio.run(run_integrated_backtest())