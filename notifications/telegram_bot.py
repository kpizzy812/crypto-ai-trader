# notifications/telegram_bot.py
"""
Telegram –±–æ—Ç –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
"""
import asyncio
from typing import Optional, List, Dict, Callable
from datetime import datetime
from loguru import logger
import aiohttp
from config.settings import settings
from core.event_bus import EventBus, Event, EventType


class TelegramBot:
    """Telegram –±–æ—Ç –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""

    def __init__(self, token: str, event_bus: EventBus):
        self.token = token
        self.event_bus = event_bus
        self.chat_ids: List[int] = []  # –°–ø–∏—Å–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤
        self.api_url = f"https://api.telegram.org/bot{token}"
        self._running = False
        self._poll_task = None
        self._last_update_id = 0

        # –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è
        self._subscribe_to_events()

        # –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
        self.commands = {
            '/start': self._cmd_start,
            '/status': self._cmd_status,
            '/balance': self._cmd_balance,
            '/positions': self._cmd_positions,
            '/stop': self._cmd_stop,
            '/help': self._cmd_help
        }

    def _subscribe_to_events(self):
        """–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è —Å–∏—Å—Ç–µ–º—ã"""
        # –¢–æ—Ä–≥–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è
        self.event_bus.subscribe(EventType.ORDER_PLACED, self._on_order_placed)
        self.event_bus.subscribe(EventType.ORDER_FILLED, self._on_order_filled)
        self.event_bus.subscribe(EventType.POSITION_OPENED, self._on_position_opened)
        self.event_bus.subscribe(EventType.POSITION_CLOSED, self._on_position_closed)

        # AI —Å–æ–±—ã—Ç–∏—è
        self.event_bus.subscribe(EventType.AI_ANALYSIS_COMPLETE, self._on_ai_analysis)
        self.event_bus.subscribe(EventType.SIGNAL_GENERATED, self._on_signal_generated)

        # –°–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
        self.event_bus.subscribe(EventType.RISK_ALERT, self._on_risk_alert)
        self.event_bus.subscribe(EventType.SYSTEM_ERROR, self._on_system_error)

    async def start(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        self._running = True
        self._poll_task = asyncio.create_task(self._poll_updates())

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        await self._broadcast("ü§ñ Crypto AI Trading Bot –∑–∞–ø—É—â–µ–Ω!")
        logger.info("Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω")

    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
        self._running = False
        if self._poll_task:
            await self._poll_task

        await self._broadcast("üõë Crypto AI Trading Bot –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        logger.info("Telegram –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    async def send_message(self, chat_id: int, text: str,
                           parse_mode: str = "HTML") -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(
                        f"{self.api_url}/sendMessage",
                        json={
                            "chat_id": chat_id,
                            "text": text,
                            "parse_mode": parse_mode
                        }
                ) as response:
                    return response.status == 200

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: {e}")
            return False

    async def _broadcast(self, message: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–º —á–∞—Ç–∞–º"""
        for chat_id in self.chat_ids:
            await self.send_message(chat_id, message)

    async def _poll_updates(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç Telegram"""
        while self._running:
            try:
                async with aiohttp.ClientSession() as session:
                    async with session.get(
                            f"{self.api_url}/getUpdates",
                            params={
                                "offset": self._last_update_id + 1,
                                "timeout": 30
                            }
                    ) as response:
                        if response.status == 200:
                            data = await response.json()

                            for update in data.get('result', []):
                                self._last_update_id = update['update_id']
                                await self._process_update(update)

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π Telegram: {e}")
                await asyncio.sleep(5)

    async def _process_update(self, update: Dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram"""

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
        if 'message' in update:
            message = update['message']
            chat_id = message['chat']['id']

            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —á–∞—Ç–∞ –≤ —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö
            if chat_id not in self.chat_ids:
                self.chat_ids.append(chat_id)
                await self.send_message(
                    chat_id,
                    "‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç Crypto AI Trading Bot"
                )

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
            if 'text' in message:
                text = message['text']

                # –ü–æ–∏—Å–∫ –∫–æ–º–∞–Ω–¥—ã
                command = text.split()[0]
                if command in self.commands:
                    await self.commands[command](chat_id, message)

    async def _cmd_start(self, chat_id: int, message: Dict):
        """–ö–æ–º–∞–Ω–¥–∞ /start"""
        welcome_text = """
ü§ñ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Crypto AI Trading Bot!</b>

–Ø –±—É–¥—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤–∞–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ:
‚Ä¢ üìà –¢–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–∞—Ö
‚Ä¢ üí∞ –û—Ç–∫—Ä—ã—Ç–∏–∏/–∑–∞–∫—Ä—ã—Ç–∏–∏ –ø–æ–∑–∏—Ü–∏–π
‚Ä¢ üìä –ê–Ω–∞–ª–∏–∑–µ —Ä—ã–Ω–∫–∞ –æ—Ç AI
‚Ä¢ ‚ö†Ô∏è –í–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö –∏ —Ä–∏—Å–∫–∞—Ö

<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/status - –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞
/balance - –ë–∞–ª–∞–Ω—Å —Å—á–µ—Ç–∞
/positions - –û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏
/help - –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º

–ë–æ—Ç —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –≥–æ—Ç–æ–≤ –∫ —Ç–æ—Ä–≥–æ–≤–ª–µ! üöÄ
"""
        await self.send_message(chat_id, welcome_text)

    async def _cmd_status(self, chat_id: int, message: Dict):
        """–ö–æ–º–∞–Ω–¥–∞ /status"""
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π
        status_text = """
üìä <b>–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã</b>

üü¢ –ë–æ—Ç: <i>–ê–∫—Ç–∏–≤–µ–Ω</i>
üü¢ –ë–∏—Ä–∂–∞: <i>–ü–æ–¥–∫–ª—é—á–µ–Ω–∞</i>
üü¢ AI: <i>–†–∞–±–æ—Ç–∞–µ—Ç</i>

‚è± –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: 2—á 15–º
üìà –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π: 3
üí∞ –ü—Ä–∏–±—ã–ª—å –∑–∞ —Å–µ–≥–æ–¥–Ω—è: +2.5%
"""
        await self.send_message(chat_id, status_text)

    async def _cmd_balance(self, chat_id: int, message: Dict):
        """–ö–æ–º–∞–Ω–¥–∞ /balance"""
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ø–æ—Ä—Ç—Ñ–µ–ª–µ–º
        balance_text = """
üí∞ <b>–ë–∞–ª–∞–Ω—Å —Å—á–µ—Ç–∞</b>

USDT: 10,500.25
‚îú‚îÄ‚îÄ –î–æ—Å—Ç—É–ø–Ω–æ: 8,500.25
‚îî‚îÄ‚îÄ –í –æ—Ä–¥–µ—Ä–∞—Ö: 2,000.00

BTC: 0.15
ETH: 2.5

<i>–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: $15,234.50</i>
"""
        await self.send_message(chat_id, balance_text)

    async def _cmd_positions(self, chat_id: int, message: Dict):
        """–ö–æ–º–∞–Ω–¥–∞ /positions"""
        positions_text = """
üìà <b>–û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏</b>

1Ô∏è‚É£ <b>BTCUSDT</b> LONG
   –í—Ö–æ–¥: $45,230 | –¢–µ–∫—É—â–∞—è: $45,450
   PnL: <code>+$220 (+0.49%)</code>

2Ô∏è‚É£ <b>ETHUSDT</b> LONG  
   –í—Ö–æ–¥: $2,340 | –¢–µ–∫—É—â–∞—è: $2,355
   PnL: <code>+$15 (+0.64%)</code>

3Ô∏è‚É£ <b>SOLUSDT</b> SHORT
   –í—Ö–æ–¥: $98.50 | –¢–µ–∫—É—â–∞—è: $97.80
   PnL: <code>+$0.70 (+0.71%)</code>

<i>–û–±—â–∏–π PnL: +$235.70 (+0.58%)</i>
"""
        await self.send_message(chat_id, positions_text)

    async def _cmd_stop(self, chat_id: int, message: Dict):
        """–ö–æ–º–∞–Ω–¥–∞ /stop"""
        self.chat_ids.remove(chat_id)
        await self.send_message(
            chat_id,
            "‚ùå –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è."
        )

    async def _cmd_help(self, chat_id: int, message: Dict):
        """–ö–æ–º–∞–Ω–¥–∞ /help"""
        help_text = """
üìö <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º</b>

/start - –ù–∞—á–∞—Ç—å –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
/status - –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
/balance - –ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å —Å—á–µ—Ç–∞  
/positions - –°–ø–∏—Å–æ–∫ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π
/stop - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

<b>–¢–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:</b>
‚Ä¢ üü¢ –£—Å–ø–µ—à–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
‚Ä¢ üî¥ –û—à–∏–±–∫–∏ –∏ –ø—Ä–æ–±–ª–µ–º—ã
‚Ä¢ üü° –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
‚Ä¢ üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ —Å–∏–≥–Ω–∞–ª—ã
‚Ä¢ üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã

<i>–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º: @your_support</i>
"""
        await self.send_message(chat_id, help_text)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    async def _on_order_placed(self, event: Event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞"""
        data = event.data
        message = f"""
üìù <b>–ù–æ–≤—ã–π –æ—Ä–¥–µ—Ä</b>

–°–∏–º–≤–æ–ª: <b>{data['symbol']}</b>
–¢–∏–ø: {data['side'].upper()}
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {data['quantity']}
{'–¶–µ–Ω–∞: ' + str(data['price']) if data['price'] else '–ü–æ —Ä—ã–Ω–∫—É'}
–°—Ç—Ä–∞—Ç–µ–≥–∏—è: <i>{data['strategy']}</i>
"""
        await self._broadcast(message)

    async def _on_order_filled(self, event: Event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞"""
        data = event.data
        message = f"""
‚úÖ <b>–û—Ä–¥–µ—Ä –∏—Å–ø–æ–ª–Ω–µ–Ω</b>

–°–∏–º–≤–æ–ª: <b>{data['symbol']}</b>
–¢–∏–ø: {data['side'].upper()}
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {data['quantity']}
–¶–µ–Ω–∞: {data['price']}
"""
        await self._broadcast(message)

    async def _on_position_opened(self, event: Event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏"""
        data = event.data
        message = f"""
üü¢ <b>–û—Ç–∫—Ä—ã—Ç–∞ –ø–æ–∑–∏—Ü–∏—è</b>

–°–∏–º–≤–æ–ª: <b>{data['symbol']}</b>
–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {data['side'].upper()}
–û–±—ä–µ–º: ${data['volume']:.2f}
–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: ${data['entry_price']}
"""
        await self._broadcast(message)

    async def _on_position_closed(self, event: Event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏"""
        data = event.data
        pnl = data['pnl']
        pnl_percent = data['pnl_percent']

        emoji = "üü¢" if pnl > 0 else "üî¥" if pnl < 0 else "‚ö™"

        message = f"""
{emoji} <b>–ó–∞–∫—Ä—ã—Ç–∞ –ø–æ–∑–∏—Ü–∏—è</b>

–°–∏–º–≤–æ–ª: <b>{data['symbol']}</b>
PnL: <code>${pnl:+.2f} ({pnl_percent:+.2f}%)</code>
–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {data['duration']}
"""
        await self._broadcast(message)

    async def _on_ai_analysis(self, event: Event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ AI –∞–Ω–∞–ª–∏–∑–∞"""
        data = event.data
        message = f"""
ü§ñ <b>AI –ê–Ω–∞–ª–∏–∑ {data['symbol']}</b>

–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: <b>{data['action']}</b>
–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {data['confidence']:.1%}
–†–∏—Å–∫: {data['risk_level']}

<i>{data['reasoning']}</i>
"""
        await self._broadcast(message)

    async def _on_signal_generated(self, event: Event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞"""
        data = event.data
        message = f"""
üìä <b>–¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª</b>

–°–∏–º–≤–æ–ª: <b>{data['symbol']}</b>
–î–µ–π—Å—Ç–≤–∏–µ: <b>{data['action']}</b>
–°–∏–ª–∞ —Å–∏–≥–Ω–∞–ª–∞: {data['strength']}/10
–¢–∞–π–º—Ñ—Ä–µ–π–º: {data['timeframe']}

{data.get('description', '')}
"""
        await self._broadcast(message)

    async def _on_risk_alert(self, event: Event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∏—Å–∫-–∞–ª–µ—Ä—Ç–∞"""
        data = event.data
        message = f"""
‚ö†Ô∏è <b>–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ —Ä–∏—Å–∫–µ</b>

–¢–∏–ø: {data['type']}
–£—Ä–æ–≤–µ–Ω—å: {data['level']}

{data['message']}

<i>–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–∑–∏—Ü–∏–∏</i>
"""
        await self._broadcast(message)

    async def _on_system_error(self, event: Event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–π –æ—à–∏–±–∫–∏"""
        data = event.data
        message = f"""
üî¥ <b>–°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞</b>

–ö–æ–º–ø–æ–Ω–µ–Ω—Ç: {data['component']}
–û—à–∏–±–∫–∞: {data['error']}

<i>–°–∏—Å—Ç–µ–º–∞ –ø—ã—Ç–∞–µ—Ç—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É...</i>
"""
        await self._broadcast(message)