# main.py - –ú–æ–¥—É–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è
"""
–ì–ª–∞–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ —Å –º–æ–¥—É–ª—å–Ω—ã–º —Ç–æ—Ä–≥–æ–≤—ã–º –¥–≤–∏–∂–∫–æ–º
"""
import asyncio
import uvicorn
from loguru import logger
from config.settings import Settings
from config.trading_config import TradingConfig
from core.engine.trading_engine import TradingEngine  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥—É–ª—å–Ω—ã–π –¥–≤–∏–∂–æ–∫
from utils.logger import setup_logger
from api.main import app

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –¥–≤–∏–∂–∫–∞
trading_engine = None


async def run_trading_bot():
    """–ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞ —Å –º–æ–¥—É–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π"""
    global trading_engine

    setup_logger("INFO", "logs/trading_bot.log")

    settings = Settings()
    trading_config = TradingConfig()

    logger.info("ü§ñ –ó–∞–ø—É—Å–∫ Crypto AI Trading Bot v2.1 (Modular)")
    logger.info("üß© –†–µ–∂–∏–º: –ú–æ–¥—É–ª—å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞")

    # –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥—É–ª—å–Ω–æ–≥–æ –¥–≤–∏–∂–∫–∞
    trading_engine = TradingEngine(settings, trading_config)

    try:
        await trading_engine.start()

    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        raise
    finally:
        if trading_engine:
            await trading_engine.stop()


async def run_web_api():
    """–ó–∞–ø—É—Å–∫ –≤–µ–± API"""
    global trading_engine

    if trading_engine:
        app.state.trading_engine = trading_engine

    config = uvicorn.Config(
        app=app,
        host="0.0.0.0",
        port=8000,
        log_level="info",
        reload=False
    )
    server = uvicorn.Server(config)
    await server.serve()


async def run_demo_mode():
    """–î–µ–º–æ —Ä–µ–∂–∏–º —Å –º–æ–¥—É–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π"""
    setup_logger("INFO", "logs/demo.log")

    logger.info("üéØ –î–ï–ú–û —Ä–µ–∂–∏–º - –ú–æ–¥—É–ª—å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞")
    logger.info("üß© –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏")

    settings = Settings()
    trading_config = TradingConfig()

    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ testnet
    settings.bybit_testnet = True
    settings.binance_testnet = True

    engine = TradingEngine(settings, trading_config)

    try:
        logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—å–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")
        await engine.initialize()

        logger.info("üìä === –¢–ï–°–¢ –ö–û–ú–ü–û–ù–ï–ù–¢–û–í ===")

        # 1. –¢–µ—Å—Ç Exchange Manager
        logger.info("üîå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Exchange Manager...")
        exchanges = await engine.exchange_manager.get_connected_exchanges()
        logger.info(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ –±–∏—Ä–∂–∏: {exchanges}")

        # 2. –¢–µ—Å—Ç Market Analyzer
        logger.info("üìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Market Analyzer...")
        await engine.market_analyzer.analyze_symbol("BTCUSDT")
        logger.info("‚úÖ –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω")

        # 3. –¢–µ—Å—Ç Strategy Manager
        logger.info("üéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Strategy Manager...")
        active_strategies = await engine.strategy_manager.get_active_strategies()
        logger.info(f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {active_strategies}")

        # 4. –¢–µ—Å—Ç Position Manager
        logger.info("üìà –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Position Manager...")
        position_stats = await engine.position_manager.get_position_statistics()
        logger.info(f"‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∑–∏—Ü–∏–π: {position_stats}")

        # 5. –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
        logger.info("üìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞...")
        status = await engine.get_system_status()
        logger.info(f"‚úÖ –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã: {status['status']}")

        logger.info("üéâ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")

        # –î–µ–º–æ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞
        logger.info("üîÑ –î–µ–º–æ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞ (30 —Å–µ–∫—É–Ω–¥)...")
        await asyncio.sleep(30)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –¥–µ–º–æ: {e}")
    finally:
        await engine.stop()


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –≤—ã–±–æ—Ä–æ–º —Ä–µ–∂–∏–º–∞"""
    import argparse

    parser = argparse.ArgumentParser(description='Crypto AI Trading Bot v2.1 (Modular)')
    parser.add_argument('--mode', choices=['bot', 'api', 'both', 'demo', 'test'],
                        default='demo', help='–†–µ–∂–∏–º –∑–∞–ø—É—Å–∫–∞')
    parser.add_argument('--testnet', action='store_true',
                        help='–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å testnet')
    parser.add_argument('--component', choices=['exchanges', 'analyzer', 'strategies', 'positions'],
                        help='–¢–µ—Å—Ç –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞')
    args = parser.parse_args()

    if args.mode == 'demo':
        await run_demo_mode()
    elif args.mode == 'test':
        await run_component_test(args.component)
    elif args.mode == 'bot':
        await run_trading_bot()
    elif args.mode == 'api':
        await run_web_api()
    else:  # both
        await asyncio.gather(
            run_trading_bot(),
            run_web_api()
        )


async def run_component_test(component: str = None):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
    setup_logger("DEBUG", "logs/component_test.log")

    settings = Settings()
    trading_config = TradingConfig()

    logger.info(f"üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞: {component or 'all'}")

    if component == 'exchanges' or not component:
        await test_exchange_manager(settings)

    if component == 'analyzer' or not component:
        await test_market_analyzer(trading_config)

    if component == 'strategies' or not component:
        await test_strategy_manager(trading_config)

    if component == 'positions' or not component:
        await test_position_manager()


async def test_exchange_manager(settings: Settings):
    """–¢–µ—Å—Ç Exchange Manager"""
    logger.info("üîå === –¢–ï–°–¢ EXCHANGE MANAGER ===")

    from core.event_bus import EventBus
    from core.engine.exchange_manager import ExchangeManager

    event_bus = EventBus()
    await event_bus.start()

    exchange_manager = ExchangeManager(settings, event_bus)

    try:
        await exchange_manager.initialize()

        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        data = await exchange_manager.get_market_data("BTCUSDT", "5m", 10)
        logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(data)} —Å–≤–µ—á–µ–π –¥–ª—è BTCUSDT")

        exchanges = await exchange_manager.get_connected_exchanges()
        logger.info(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ –±–∏—Ä–∂–∏: {exchanges}")

    finally:
        await exchange_manager.stop()
        await event_bus.stop()


async def test_market_analyzer(trading_config: TradingConfig):
    """–¢–µ—Å—Ç Market Analyzer"""
    logger.info("üìä === –¢–ï–°–¢ MARKET ANALYZER ===")

    from core.event_bus import EventBus
    from core.engine.market_analyzer import MarketAnalyzer

    event_bus = EventBus()
    await event_bus.start()

    analyzer = MarketAnalyzer(trading_config, event_bus)

    try:
        await analyzer.initialize()
        await analyzer.analyze_symbol("BTCUSDT")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—ç—à–∞
        cached = analyzer.get_cached_analysis("BTCUSDT")
        if cached:
            logger.info(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –∫—ç—à–∏—Ä–æ–≤–∞–Ω: {cached['ai_analysis']['action']}")

    finally:
        await analyzer.stop()
        await event_bus.stop()


async def test_strategy_manager(trading_config: TradingConfig):
    """–¢–µ—Å—Ç Strategy Manager"""
    logger.info("üéØ === –¢–ï–°–¢ STRATEGY MANAGER ===")

    from core.event_bus import EventBus
    from core.engine.strategy_manager import StrategyManager

    event_bus = EventBus()
    await event_bus.start()

    strategy_manager = StrategyManager(trading_config, event_bus)

    try:
        await strategy_manager.initialize()

        strategies = await strategy_manager.get_active_strategies()
        logger.info(f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: {len(strategies)}")

        # –¢–µ—Å—Ç –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        result = await strategy_manager.toggle_strategy("SimpleMomentum", False)
        logger.info(f"‚úÖ –°—Ç—Ä–∞—Ç–µ–≥–∏—è –≤—ã–∫–ª—é—á–µ–Ω–∞: {result}")

    finally:
        await strategy_manager.stop()
        await event_bus.stop()


async def test_position_manager():
    """–¢–µ—Å—Ç Position Manager"""
    logger.info("üìà === –¢–ï–°–¢ POSITION MANAGER ===")

    from core.event_bus import EventBus
    from core.portfolio import Portfolio
    from core.engine.position_manager import PositionManager

    event_bus = EventBus()
    await event_bus.start()

    portfolio = Portfolio()
    position_manager = PositionManager(portfolio, event_bus)

    try:
        await position_manager.initialize()

        stats = await position_manager.get_position_statistics()
        logger.info(f"‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∑–∏—Ü–∏–π: {stats}")

    finally:
        await position_manager.stop()
        await event_bus.stop()


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("üëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"üí• –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        raise