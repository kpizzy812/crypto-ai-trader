# main.py - PRODUCTION READY VERSION
"""
–ì–ª–∞–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ - –≥–æ—Ç–æ–≤–∞—è –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É –≤–µ—Ä—Å–∏—è
"""
import asyncio
import uvicorn
import argparse
import sys
import traceback
from pathlib import Path
from loguru import logger

from config.settings import Settings
from config.trading_config import TradingConfig
from utils.logger import setup_logger


async def run_real_trading():
    """–ó–∞–ø—É—Å–∫ —Ä–µ–∞–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏ –≤ testnet"""
    setup_logger("INFO", "logs/real_trading.log")

    logger.info("ü§ñ === –ó–ê–ü–£–°–ö –†–ï–ê–õ–¨–ù–û–ô –¢–û–†–ì–û–í–õ–ò (TESTNET) ===")

    settings = Settings()
    trading_config = TradingConfig()

    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ testnet –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    settings.bybit_testnet = True
    settings.binance_testnet = True

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
    if not _validate_settings(settings):
        logger.error("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ .env —Ñ–∞–π–ª")
        return False

    try:
        from core.engine.trading_engine import TradingEngine

        logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –¥–≤–∏–∂–∫–∞...")
        engine = TradingEngine(settings, trading_config)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
        await engine.initialize()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –±–∏—Ä–∂–∞–º
        exchanges = await engine.exchange_manager.get_connected_exchanges()
        if not exchanges:
            logger.error("‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –±–∏—Ä–∂–∞–º. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á–∏")
            return False

        logger.info(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω—ã –±–∏—Ä–∂–∏: {exchanges}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–æ–≤
        balance_summary = await engine.exchange_manager.get_balance_summary()
        for exchange, info in balance_summary.items():
            if info['connected']:
                logger.info(f"üí∞ {exchange}: {info['total_assets']} –∞–∫—Ç–∏–≤–æ–≤")
            else:
                logger.warning(f"‚ö†Ô∏è {exchange}: –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω - {info.get('error', 'unknown')}")

        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        logger.info("üì° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
        test_data = await engine.exchange_manager.get_market_data("BTCUSDT", "5m", 10)
        if not test_data.empty:
            current_price = test_data['close'].iloc[-1]
            logger.info(f"‚úÖ BTC/USDT: ${current_price:,.2f}")
        else:
            logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")

        # –ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞
        logger.info("üéØ –ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞...")
        logger.warning("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –¢–æ—Ä–≥–æ–≤–ª—è –≤ TESTNET —Ä–µ–∂–∏–º–µ")

        await engine.start()

    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return True
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        logger.error(f"Traceback: {traceback.format_exc()}")
        return False


async def run_comprehensive_test():
    """–ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º"""
    setup_logger("DEBUG", "logs/comprehensive_test.log")

    logger.info("üß™ === –ö–û–ú–ü–õ–ï–ö–°–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú ===")

    settings = Settings()
    trading_config = TradingConfig()

    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ testnet
    settings.bybit_testnet = True
    settings.binance_testnet = True

    test_results = {
        'exchange_connections': False,
        'market_data': False,
        'ai_analysis': False,
        'strategies': False,
        'risk_management': False,
        'backtesting': False
    }

    try:
        # 1. –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –±–∏—Ä–∂–∞–º
        logger.info("üîå === –¢–ï–°–¢ –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ô –ö –ë–ò–†–ñ–ê–ú ===")
        test_results['exchange_connections'] = await _test_exchange_connections(settings)

        # 2. –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        logger.info("üì° === –¢–ï–°–¢ –ü–û–õ–£–ß–ï–ù–ò–Ø –î–ê–ù–ù–´–• ===")
        test_results['market_data'] = await _test_market_data(settings)

        # 3. –¢–µ—Å—Ç AI –∞–Ω–∞–ª–∏–∑–∞
        logger.info("ü§ñ === –¢–ï–°–¢ AI –ê–ù–ê–õ–ò–ó–ê ===")
        test_results['ai_analysis'] = await _test_ai_analysis()

        # 4. –¢–µ—Å—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
        logger.info("üéØ === –¢–ï–°–¢ –°–¢–†–ê–¢–ï–ì–ò–ô ===")
        test_results['strategies'] = await _test_strategies(trading_config)

        # 5. –¢–µ—Å—Ç —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞
        logger.info("‚ö†Ô∏è === –¢–ï–°–¢ –†–ò–°–ö-–ú–ï–ù–ï–î–ñ–ú–ï–ù–¢–ê ===")
        test_results['risk_management'] = await _test_risk_management(trading_config)

        # 6. –¢–µ—Å—Ç –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞
        logger.info("üìä === –¢–ï–°–¢ –ë–≠–ö–¢–ï–°–¢–ò–ù–ì–ê ===")
        test_results['backtesting'] = await _test_backtesting()

        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        logger.info("\nüéâ === –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ ===")
        total_tests = len(test_results)
        passed_tests = sum(test_results.values())

        for test_name, result in test_results.items():
            status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ù–ï –ü–†–û–ô–î–ï–ù"
            logger.info(f"   {test_name}: {status}")

        logger.info(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed_tests}/{total_tests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")

        if passed_tests == total_tests:
            logger.info("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ç–æ—Ä–≥–æ–≤–ª–µ")
            return True
        else:
            logger.warning(f"‚ö†Ô∏è {total_tests - passed_tests} —Ç–µ—Å—Ç–æ–≤ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–æ")
            return False

    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        logger.error(f"Traceback: {traceback.format_exc()}")
        return False


async def run_integrated_backtest():
    """–ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞"""
    setup_logger("INFO", "logs/integrated_backtest.log")

    logger.info("üìä === –ó–ê–ü–£–°–ö –ò–ù–¢–ï–ì–†–ò–†–û–í–ê–ù–ù–û–ì–û –ë–≠–ö–¢–ï–°–¢–ò–ù–ì–ê ===")

    try:
        from scripts.integrated_backtest import run_integrated_backtest as run_backtest
        await run_backtest()
        return True

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞: {e}")
        return False


async def run_api_server():
    """–ó–∞–ø—É—Å–∫ API —Å–µ—Ä–≤–µ—Ä–∞"""
    setup_logger("INFO", "logs/api_server.log")

    logger.info("üåê === –ó–ê–ü–£–°–ö API –°–ï–†–í–ï–†–ê ===")

    try:
        from api.main import app

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
        config = uvicorn.Config(
            app=app,
            host="0.0.0.0",
            port=8000,
            log_level="info",
            access_log=True
        )

        server = uvicorn.Server(config)

        logger.info("üöÄ API —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:8000")
        logger.info("üìä Dashboard –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:8000")

        await server.serve()

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ API —Å–µ—Ä–≤–µ—Ä–∞: {e}")
        return False


async def run_position_live_test():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ä–µ–∞–ª—å–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º–æ–π"""
    setup_logger("INFO", "logs/live_position_test.log")

    logger.info("üí∞ === –¢–ï–°–¢ –†–ï–ê–õ–¨–ù–û–ô –ü–û–ó–ò–¶–ò–ò (–ú–ò–ù–ò–ú–ê–õ–¨–ù–ê–Ø –°–£–ú–ú–ê) ===")
    logger.warning("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ë—É–¥–µ—Ç –æ—Ç–∫—Ä—ã—Ç–∞ —Ä–µ–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –≤ testnet!")

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        confirmation = input("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (yes/no): ").lower()
        if confirmation != 'yes':
            logger.info("‚ùå –¢–µ—Å—Ç –æ—Ç–º–µ–Ω–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            return False
    except KeyboardInterrupt:
        logger.info("‚ùå –¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω")
        return False

    settings = Settings()
    trading_config = TradingConfig()

    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ testnet
    settings.bybit_testnet = True
    settings.binance_testnet = True

    try:
        from core.engine.trading_engine import TradingEngine

        engine = TradingEngine(settings, trading_config)
        await engine.initialize()

        exchanges = await engine.exchange_manager.get_connected_exchanges()
        if not exchanges:
            logger.error("‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –±–∏—Ä–∂–∞–º")
            return False

        # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å
        balance_summary = await engine.exchange_manager.get_balance_summary()
        exchange_name = exchanges[0]
        exchange_balance = balance_summary[exchange_name]

        if not exchange_balance['connected']:
            logger.error(f"‚ùå {exchange_name} –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")
            return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ USDT
        usdt_balance = 0
        for asset, data in exchange_balance['balances'].items():
            if asset == 'USDT':
                usdt_balance = float(data['free'])
                break

        logger.info(f"üí∞ –î–æ—Å—Ç—É–ø–Ω–æ USDT: ${usdt_balance:.2f}")

        if usdt_balance < 10:
            logger.error("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ USDT –¥–ª—è —Ç–µ—Å—Ç–∞ (–º–∏–Ω–∏–º—É–º $10)")
            logger.info("üí° –ü–æ–ª—É—á–∏—Ç–µ —Ç–µ—Å—Ç–æ–≤—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–∞ testnet")
            return False

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
        market_data = await engine.exchange_manager.get_market_data("BTCUSDT", "5m", 1)
        if market_data.empty:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É BTC")
            return False

        current_price = float(market_data['close'].iloc[-1])
        logger.info(f"üìà –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ BTC/USDT: ${current_price:,.2f}")

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (–ø—Ä–∏–º–µ—Ä–Ω–æ $5)
        test_amount = 5.0  # $5
        quantity = test_amount / current_price

        # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –ª–æ—Ç–∞
        quantity = round(quantity, 6)  # –û–±—ã—á–Ω–æ –º–∏–Ω–∏–º—É–º 0.000001 BTC

        logger.info(f"üìä –ü–ª–∞–Ω–∏—Ä—É–µ–º–∞—è –ø–æ–∑–∏—Ü–∏—è: {quantity} BTC (~${test_amount:.2f})")

        # –†–∞–∑–º–µ—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –æ—Ä–¥–µ—Ä
        logger.info("üìù –†–∞–∑–º–µ—â–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ—Ä–¥–µ—Ä–∞...")

        try:
            order_result = await engine.exchange_manager.place_order(
                symbol="BTCUSDT",
                side="buy",
                order_type="market",
                quantity=quantity,
                strategy="live_test"
            )

            if order_result:
                logger.info(f"‚úÖ –û—Ä–¥–µ—Ä —Ä–∞–∑–º–µ—â–µ–Ω: {order_result.order.id}")
                logger.info(f"üìä –°—Ç–∞—Ç—É—Å: {order_result.order.status}")

                # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
                await asyncio.sleep(5)

                # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ä–¥–µ—Ä–µ
                updated_order = await engine.exchanges[exchange_name].get_order(
                    order_result.order.id,
                    "BTCUSDT"
                )

                if updated_order:
                    logger.info(f"üìä –§–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {updated_order.status}")

                    if updated_order.status == 'filled':
                        logger.info("üéâ –¢–ï–°–¢–û–í–ê–Ø –ü–û–ó–ò–¶–ò–Ø –£–°–ü–ï–®–ù–û –û–¢–ö–†–´–¢–ê!")
                        logger.info(f"üí∞ –ò—Å–ø–æ–ª–Ω–µ–Ω–æ –ø–æ —Ü–µ–Ω–µ: ${updated_order.price}")

                        # –°—Ä–∞–∑—É –∂–µ –∑–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é
                        logger.info("üîÑ –ó–∞–∫—Ä—ã—Ç–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏...")

                        close_order = await engine.exchange_manager.place_order(
                            symbol="BTCUSDT",
                            side="sell",
                            order_type="market",
                            quantity=quantity,
                            strategy="live_test_close"
                        )

                        if close_order:
                            logger.info("‚úÖ –ü–æ–∑–∏—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞")
                            logger.info("üéâ –¢–ï–°–¢ –†–ï–ê–õ–¨–ù–û–ô –¢–û–†–ì–û–í–õ–ò –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù!")
                            return True
                        else:
                            logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏—é")
                            logger.warning("üí° –ó–∞–∫—Ä–æ–π—Ç–µ –ø–æ–∑–∏—Ü–∏—é –≤—Ä—É—á–Ω—É—é —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –±–∏—Ä–∂–∏")
                    else:
                        logger.warning(f"‚ö†Ô∏è –û—Ä–¥–µ—Ä –Ω–µ –∏—Å–ø–æ–ª–Ω–µ–Ω: {updated_order.status}")
                else:
                    logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ—Ä–¥–µ—Ä–∞")
            else:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ—Ä–¥–µ—Ä")
                return False

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞: {e}")
            return False

    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")
        return False

    finally:
        try:
            await engine.stop()
        except:
            pass


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async def _test_exchange_connections(settings: Settings) -> bool:
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –±–∏—Ä–∂–∞–º"""
    try:
        from core.event_bus import EventBus
        from core.engine.exchange_manager import ExchangeManager

        event_bus = EventBus()
        await event_bus.start()

        exchange_manager = ExchangeManager(settings, event_bus)
        await exchange_manager.initialize()

        exchanges = await exchange_manager.get_connected_exchanges()
        connection_status = await exchange_manager.get_connection_status()

        logger.info(f"üìä –ü–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ –±–∏—Ä–∂–∏: {exchanges}")
        logger.info(f"üìä –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π: {connection_status}")

        # –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
        test_results = await exchange_manager.test_all_connections()

        for exchange, status in test_results.items():
            if status:
                logger.info(f"‚úÖ {exchange}: –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            else:
                logger.warning(f"‚ö†Ô∏è {exchange}: –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º")

        await exchange_manager.stop()
        await event_bus.stop()

        return len(exchanges) > 0

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π: {e}")
        return False


async def _test_market_data(settings: Settings) -> bool:
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    try:
        from core.event_bus import EventBus
        from core.engine.exchange_manager import ExchangeManager

        event_bus = EventBus()
        await event_bus.start()

        exchange_manager = ExchangeManager(settings, event_bus)
        await exchange_manager.initialize()

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
        test_symbols = ["BTCUSDT", "ETHUSDT"]
        success_count = 0

        for symbol in test_symbols:
            try:
                data = await exchange_manager.get_market_data(symbol, "5m", 10)
                if not data.empty and len(data) > 0:
                    current_price = data['close'].iloc[-1]
                    logger.info(f"‚úÖ {symbol}: ${current_price:,.2f} ({len(data)} —Å–≤–µ—á–µ–π)")
                    success_count += 1
                else:
                    logger.warning(f"‚ö†Ô∏è {symbol}: –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è {symbol}: –æ—à–∏–±–∫–∞ - {e}")

        await exchange_manager.stop()
        await event_bus.stop()

        return success_count > 0

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False


async def _test_ai_analysis() -> bool:
    """–¢–µ—Å—Ç AI –∞–Ω–∞–ª–∏–∑–∞"""
    try:
        from ai.mock_analyzer import MockAIAnalyzer
        from utils.helpers import create_sample_data

        analyzer = MockAIAnalyzer()
        test_data = create_sample_data("BTCUSDT", periods=50)

        analysis = await analyzer.analyze_market(test_data, "BTCUSDT")

        required_fields = ['action', 'confidence', 'reasoning']
        if all(field in analysis for field in required_fields):
            logger.info(f"‚úÖ AI –∞–Ω–∞–ª–∏–∑: {analysis['action']} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {analysis['confidence']:.1%})")
            return True
        else:
            logger.error(f"‚ùå AI –∞–Ω–∞–ª–∏–∑: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è {required_fields}")
            return False

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ AI: {e}")
        return False


async def _test_strategies(trading_config: TradingConfig) -> bool:
    """–¢–µ—Å—Ç —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"""
    try:
        from trading.strategies.simple_momentum import SimpleMomentumStrategy
        from utils.helpers import create_sample_data

        # –¢–µ—Å—Ç SimpleMomentum
        config = {
            'indicators': trading_config.technical_indicators,
            'position_size_percent': 2.0
        }

        strategy = SimpleMomentumStrategy(config)
        test_data = create_sample_data("BTCUSDT", periods=100)

        analysis = await strategy.analyze(test_data, "BTCUSDT")

        if 'recommendation' in analysis:
            logger.info(
                f"‚úÖ SimpleMomentum: {analysis['recommendation']} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {analysis.get('confidence', 0):.1%})")
            return True
        else:
            logger.error("‚ùå SimpleMomentum: –Ω–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
            return False

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: {e}")
        return False


async def _test_risk_management(trading_config: TradingConfig) -> bool:
    """–¢–µ—Å—Ç —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞"""
    try:
        from risk.risk_manager import RiskManager
        from core.portfolio import Portfolio
        from decimal import Decimal

        portfolio = Portfolio(Decimal("10000"))
        risk_manager = RiskManager(trading_config.risk, portfolio)

        # –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∏—Å–∫–∞ –ø–æ–∑–∏—Ü–∏–∏
        risk_ok = await risk_manager.check_position_risk(
            symbol="BTCUSDT",
            side="buy",
            entry_price=Decimal("45000"),
            quantity=Decimal("0.002")  # ~$90
        )

        # –¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ –º–µ—Ç—Ä–∏–∫
        metrics = await risk_manager.get_risk_metrics()

        if hasattr(metrics, 'risk_score') and 0 <= metrics.risk_score <= 100:
            logger.info(f"‚úÖ Risk Manager: —Ä–∏—Å–∫-—Å–∫–æ—Ä {metrics.risk_score}/100")
            logger.info(f"‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∑–∏—Ü–∏–∏: {'—Ä–∞–∑—Ä–µ—à–µ–Ω–∞' if risk_ok else '–∑–∞–ø—Ä–µ—â–µ–Ω–∞'}")
            return True
        else:
            logger.error("‚ùå Risk Manager: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏")
            return False

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞: {e}")
        return False


async def _test_backtesting() -> bool:
    """–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞"""
    try:
        from backtest.backtester import Backtester
        from trading.strategies.simple_momentum import SimpleMomentumStrategy
        from utils.helpers import create_sample_data

        backtester = Backtester(initial_capital=10000)

        strategy_config = {
            'indicators': {
                'rsi': {'period': 14},
                'ema_fast': {'period': 9},
                'ema_slow': {'period': 21}
            }
        }

        strategy = SimpleMomentumStrategy(strategy_config)
        test_data = {"BTCUSDT": create_sample_data("BTCUSDT", periods=200)}

        result = await backtester.run(strategy, test_data)

        if result and hasattr(result, 'total_return_percent'):
            logger.info(f"‚úÖ –ë—ç–∫—Ç–µ—Å—Ç: –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å {result.total_return_percent:.2f}%, —Å–¥–µ–ª–æ–∫ {result.total_trades}")
            return True
        else:
            logger.error("‚ùå –ë—ç–∫—Ç–µ—Å—Ç: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
            return False

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞: {e}")
        return False


def _validate_settings(settings: Settings) -> bool:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    issues = []

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–µ–π (—Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –±–∏—Ä–∂–∞)
    if not ((settings.bybit_api_key and settings.bybit_api_secret) or
            (settings.binance_api_key and settings.binance_api_secret)):
        issues.append("–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã API –∫–ª—é—á–∏ –Ω–∏ –¥–ª—è –æ–¥–Ω–æ–π –±–∏—Ä–∂–∏")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ testnet —Ä–µ–∂–∏–º–∞
    if not settings.bybit_testnet and settings.bybit_api_key:
        issues.append("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: Bybit –Ω–µ –≤ testnet —Ä–µ–∂–∏–º–µ!")

    if not settings.binance_testnet and settings.binance_api_key:
        issues.append("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: Binance –Ω–µ –≤ testnet —Ä–µ–∂–∏–º–µ!")

    if issues:
        for issue in issues:
            logger.error(f"‚ùå {issue}")
        return False

    return True


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(description='Crypto AI Trading Bot - Production Ready')
    parser.add_argument('--mode',
                        choices=['trading', 'test', 'backtest', 'api', 'both', 'live-test'],
                        default='test',
                        help='–†–µ–∂–∏–º –∑–∞–ø—É—Å–∫–∞')
    parser.add_argument('--symbols',
                        default='BTCUSDT,ETHUSDT',
                        help='–¢–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é')
    parser.add_argument('--force-mainnet',
                        action='store_true',
                        help='–û–ü–ê–°–ù–û: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å mainnet')

    args = parser.parse_args()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    if args.force_mainnet:
        logger.critical("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ó–∞–ø—Ä–æ—Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è MAINNET!")
        try:
            confirmation = input("–í—ã —É–≤–µ—Ä–µ–Ω—ã? –í–≤–µ–¥–∏—Ç–µ 'YES' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: ")
            if confirmation != 'YES':
                logger.info("‚ùå –ó–∞–ø—É—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω")
                return
        except KeyboardInterrupt:
            logger.info("‚ùå –ó–∞–ø—É—Å–∫ –ø—Ä–µ—Ä–≤–∞–Ω")
            return

    try:
        if args.mode == 'test':
            success = await run_comprehensive_test()
            sys.exit(0 if success else 1)

        elif args.mode == 'trading':
            success = await run_real_trading()
            sys.exit(0 if success else 1)

        elif args.mode == 'backtest':
            success = await run_integrated_backtest()
            sys.exit(0 if success else 1)

        elif args.mode == 'api':
            await run_api_server()

        elif args.mode == 'live-test':
            success = await run_position_live_test()
            sys.exit(0 if success else 1)

        elif args.mode == 'both':
            # –ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–ª–∏ –∏ API –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
            trading_task = asyncio.create_task(run_real_trading())
            api_task = asyncio.create_task(run_api_server())

            done, pending = await asyncio.wait(
                [trading_task, api_task],
                return_when=asyncio.FIRST_COMPLETED
            )

            # –û—Ç–º–µ–Ω—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∑–∞–¥–∞—á–∏
            for task in pending:
                task.cancel()

        else:
            logger.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∂–∏–º: {args.mode}")
            sys.exit(1)

    except KeyboardInterrupt:
        logger.info("üëã –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        logger.error(f"Traceback: {traceback.format_exc()}")
        sys.exit(1)


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("üëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    except Exception as e:
        logger.error(f"üí• –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)