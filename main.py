# main.py - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
"""
–ì–ª–∞–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ —Å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
"""
import asyncio
import uvicorn
from loguru import logger
from config.settings import Settings
from config.trading_config import TradingConfig
from utils.logger import setup_logger
import sys
import traceback
import pandas as pd


async def run_real_data_test():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ —Å –±–∏—Ä–∂"""
    setup_logger("INFO", "logs/real_test.log")

    logger.info("üåê === –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –° –†–ï–ê–õ–¨–ù–´–ú–ò –î–ê–ù–ù–´–ú–ò ===")

    settings = Settings()
    trading_config = TradingConfig()

    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ testnet –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    settings.bybit_testnet = True
    settings.binance_testnet = True

    try:
        from core.engine.trading_engine import TradingEngine

        logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –¥–≤–∏–∂–∫–∞...")
        engine = TradingEngine(settings, trading_config)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è (–Ω–æ –Ω–µ –∑–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞)
        await engine.initialize()

        logger.info(f"üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ –±–∏—Ä–∂–∏: {await engine.exchange_manager.get_connected_exchanges()}")

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–∞—Ä
        test_symbols = ["BTCUSDT", "ETHUSDT"]
        results = {}

        for symbol in test_symbols:
            logger.info(f"üìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {symbol}...")
            result = await engine.test_real_analysis(symbol)

            if result:
                results[symbol] = result
                logger.info(f"‚úÖ {symbol} –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω:")
                logger.info(f"   üìà –¶–µ–Ω–∞: ${result['current_price']:,.2f}")
                logger.info(f"   üìä –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {result['price_change_24h']:+.2f}%")
                logger.info(f"   ü§ñ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {result['analysis']['action']}")
                logger.info(f"   üí™ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result['analysis']['confidence']:.1%}")
            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å {symbol}")

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞
        logger.info("üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞...")

        # –ó–∞–ø—É—Å–∫ –æ–¥–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –∞–Ω–∞–ª–∏–∑–∞
        for trading_pair in trading_config.trading_pairs[:3]:  # –¢–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3
            if trading_pair.enabled:
                await engine.market_analyzer.analyze_symbol(trading_pair.symbol)

        logger.info("üéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

        # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞
        await engine.stop()

        return results

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        logger.error(f"Traceback: {traceback.format_exc()}")
        return None


async def run_demo_mode():
    """–î–µ–º–æ —Ä–µ–∂–∏–º —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    setup_logger("INFO", "logs/demo.log")

    logger.info("üéØ –î–ï–ú–û —Ä–µ–∂–∏–º - –ú–æ–¥—É–ª—å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞")
    logger.info("üß© –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏")

    settings = Settings()
    trading_config = TradingConfig()

    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ testnet
    settings.bybit_testnet = True
    settings.binance_testnet = True

    try:
        logger.info("üìä === –ù–ê–ß–ê–õ–û –î–ï–ú–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø ===")

        # 1. –¢–µ—Å—Ç –±–∞–∑–æ–≤—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
        logger.info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤...")
        await test_imports()

        # 2. –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        logger.info("üìà –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö...")
        await test_data_generation()

        # 3. –¢–µ—Å—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
        logger.info("‚öôÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤...")
        await test_technical_indicators()

        # 4. –¢–µ—Å—Ç AI –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ (mock)
        logger.info("ü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AI –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞...")
        await test_ai_analyzer()

        # 5. –¢–µ—Å—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
        logger.info("üéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π...")
        await test_strategies()

        logger.info("üéâ –í—Å–µ –±–∞–∑–æ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        logger.info("‚ÑπÔ∏è –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ–±–∞–≤—å—Ç–µ API –∫–ª—é—á–∏ –≤ .env")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –¥–µ–º–æ: {e}")
        logger.error(f"Traceback: {traceback.format_exc()}")


async def test_imports():
    """–¢–µ—Å—Ç –±–∞–∑–æ–≤—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤"""
    try:
        from config import Settings, TradingConfig
        from utils.helpers import create_sample_data
        from ai.mock_analyzer import MockAIAnalyzer
        from data.processors.technical_processor import TechnicalProcessor
        from trading.strategies.simple_momentum import SimpleMomentumStrategy
        logger.info("‚úÖ –í—Å–µ –±–∞–∑–æ–≤—ã–µ –∏–º–ø–æ—Ä—Ç—ã —É—Å–ø–µ—à–Ω—ã")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        raise


async def test_data_generation():
    """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    try:
        from utils.helpers import create_sample_data

        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        data = create_sample_data("BTCUSDT", periods=50)

        if not data.empty and len(data) > 0:
            logger.info(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(data)} —Å–≤–µ—á–µ–π —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
            logger.info(f"–¶–µ–Ω–æ–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω: ${data['low'].min():.2f} - ${data['high'].max():.2f}")
        else:
            raise ValueError("–ü—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        raise


async def test_technical_indicators():
    """–¢–µ—Å—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤"""
    try:
        from data.processors.technical_processor import TechnicalProcessor
        from utils.helpers import create_sample_data

        processor = TechnicalProcessor()
        data = create_sample_data("BTCUSDT", periods=50)

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        config = {
            'rsi': {'period': 14},
            'ema_fast': {'period': 9},
            'ema_slow': {'period': 21},
            'volume_sma': {'period': 20}
        }

        processed = processor.process_ohlcv(data, config)

        if 'rsi' in processed.columns:
            logger.info(f"‚úÖ RSI —Ä–∞—Å—Å—á–∏—Ç–∞–Ω. –ü–æ—Å–ª–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {processed['rsi'].iloc[-1]:.2f}")

        if 'ema_fast' in processed.columns and 'ema_slow' in processed.columns:
            logger.info(
                f"‚úÖ EMA —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã. Fast: {processed['ema_fast'].iloc[-1]:.2f}, Slow: {processed['ema_slow'].iloc[-1]:.2f}")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤: {e}")
        raise


async def test_ai_analyzer():
    """–¢–µ—Å—Ç AI –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞"""
    try:
        from ai.mock_analyzer import MockAIAnalyzer
        from utils.helpers import create_sample_data

        analyzer = MockAIAnalyzer()
        data = create_sample_data("BTCUSDT", periods=50)

        analysis = await analyzer.analyze_market(data, "BTCUSDT")

        logger.info(f"‚úÖ AI –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω:")
        logger.info(f"   –î–µ–π—Å—Ç–≤–∏–µ: {analysis.get('action', 'N/A')}")
        logger.info(f"   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {analysis.get('confidence', 0):.1%}")
        logger.info(f"   –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ: {analysis.get('reasoning', 'N/A')}")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ AI –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞: {e}")
        raise


async def test_strategies():
    """–¢–µ—Å—Ç —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"""
    try:
        from trading.strategies.simple_momentum import SimpleMomentumStrategy
        from utils.helpers import create_sample_data

        config = {
            'indicators': {
                'rsi': {'period': 14},
                'ema_fast': {'period': 9},
                'ema_slow': {'period': 21},
                'volume_sma': {'period': 20}
            }
        }

        strategy = SimpleMomentumStrategy(config)
        data = create_sample_data("BTCUSDT", periods=50)

        analysis = await strategy.analyze(data, "BTCUSDT")

        logger.info(f"‚úÖ –°—Ç—Ä–∞—Ç–µ–≥–∏—è SimpleMomentum –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∞:")
        logger.info(f"   –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {analysis.get('recommendation', 'N/A')}")
        logger.info(f"   –ú–æ–º–µ–Ω—Ç—É–º —Å–∫–æ—Ä: {analysis.get('momentum_score', 0):.2f}")
        logger.info(f"   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {analysis.get('confidence', 0):.1%}")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: {e}")
        raise


async def run_component_test(component: str = None):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π"""
    setup_logger("DEBUG", "logs/component_test.log")

    settings = Settings()
    trading_config = TradingConfig()

    logger.info(f"üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞: {component or 'all'}")

    try:
        if component == 'exchanges' or not component:
            await test_exchange_manager(settings)

        if component == 'analyzer' or not component:
            await test_market_analyzer(trading_config)

        if component == 'strategies' or not component:
            await test_strategy_manager(trading_config)

        logger.info("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω—ã")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {e}")
        logger.error(f"Traceback: {traceback.format_exc()}")


async def test_exchange_manager(settings: Settings):
    """–¢–µ—Å—Ç Exchange Manager —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π"""
    logger.info("üîå === –¢–ï–°–¢ EXCHANGE MANAGER ===")

    try:
        from core.event_bus import EventBus
        from core.engine.exchange_manager import ExchangeManager

        event_bus = EventBus()
        await event_bus.start()

        exchange_manager = ExchangeManager(settings, event_bus)

        try:
            # –ü–æ–ø—ã—Ç–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ (–º–æ–∂–µ—Ç —É–ø–∞—Å—Ç—å –∏–∑-–∑–∞ API –∫–ª—é—á–µ–π)
            await exchange_manager.initialize()

            exchanges = await exchange_manager.get_connected_exchanges()
            logger.info(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ –±–∏—Ä–∂–∏: {exchanges}")

            if exchanges:
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                data = await exchange_manager.get_market_data("BTCUSDT", "5m", 10)
                logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(data)} —Å–≤–µ—á–µ–π –¥–ª—è BTCUSDT")
            else:
                logger.warning("‚ö†Ô∏è –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –±–∏—Ä–∂ (–ø—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á–∏ –≤ .env)")

        except Exception as inner_e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∏—Ä–∂–∞–º: {inner_e}")
            logger.info("‚ÑπÔ∏è –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –µ—Å–ª–∏ API –∫–ª—é—á–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")

        finally:
            await exchange_manager.stop()
            await event_bus.stop()

    except ImportError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π exchange_manager: {e}")
        logger.info("‚ÑπÔ∏è –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –≤—Å–µ —Ñ–∞–π–ª—ã —Å–æ–∑–¥–∞–Ω—ã –∏–∑ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤")
    except Exception as e:
        logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ test_exchange_manager: {e}")


async def test_market_analyzer(trading_config: TradingConfig):
    """–¢–µ—Å—Ç Market Analyzer"""
    logger.info("üìä === –¢–ï–°–¢ MARKET ANALYZER ===")

    try:
        from core.event_bus import EventBus
        from core.engine.market_analyzer import MarketAnalyzer

        event_bus = EventBus()
        await event_bus.start()

        analyzer = MarketAnalyzer(trading_config, event_bus)

        try:
            await analyzer.initialize()
            await analyzer.analyze_symbol("BTCUSDT")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—ç—à–∞
            cached = analyzer.get_cached_analysis("BTCUSDT")
            if cached:
                logger.info(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –∫—ç—à–∏—Ä–æ–≤–∞–Ω: {cached['ai_analysis']['action']}")

        finally:
            await analyzer.stop()
            await event_bus.stop()

    except ImportError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ market_analyzer: {e}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ test_market_analyzer: {e}")


async def test_strategy_manager(trading_config: TradingConfig):
    """–¢–µ—Å—Ç Strategy Manager"""
    logger.info("üéØ === –¢–ï–°–¢ STRATEGY MANAGER ===")

    try:
        from core.event_bus import EventBus
        from core.engine.strategy_manager import StrategyManager

        event_bus = EventBus()
        await event_bus.start()

        strategy_manager = StrategyManager(trading_config, event_bus)

        try:
            await strategy_manager.initialize()

            strategies = await strategy_manager.get_active_strategies()
            logger.info(f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: {len(strategies)}")

            # –¢–µ—Å—Ç –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            if strategies:
                result = await strategy_manager.toggle_strategy(strategies[0], False)
                logger.info(f"‚úÖ –°—Ç—Ä–∞—Ç–µ–≥–∏—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∞: {result}")

        finally:
            await strategy_manager.stop()
            await event_bus.stop()

    except ImportError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ strategy_manager: {e}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ test_strategy_manager: {e}")


async def run_bot_mode():
    """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–≥–æ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞"""
    setup_logger("INFO", "logs/bot.log")

    logger.info("ü§ñ === –ó–ê–ü–£–°–ö –¢–û–†–ì–û–í–û–ì–û –ë–û–¢–ê ===")

    settings = Settings()
    trading_config = TradingConfig()

    try:
        from core.engine.trading_engine import TradingEngine

        engine = TradingEngine(settings, trading_config)

        # –ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞
        await engine.start()

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
        logger.error(f"Traceback: {traceback.format_exc()}")


async def run_api_mode():
    """–ó–∞–ø—É—Å–∫ API —Å–µ—Ä–≤–µ—Ä–∞"""
    setup_logger("INFO", "logs/api.log")

    logger.info("üåê === –ó–ê–ü–£–°–ö API –°–ï–†–í–ï–†–ê ===")

    try:
        from api.main import app

        config = uvicorn.Config(
            app=app,
            host="0.0.0.0",
            port=8000,
            log_level="info"
        )

        server = uvicorn.Server(config)
        await server.serve()

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ API: {e}")
        logger.error(f"Traceback: {traceback.format_exc()}")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    import argparse

    parser = argparse.ArgumentParser(description='Crypto AI Trading Bot v2.2 (Real Data)')
    parser.add_argument('--mode', choices=['bot', 'api', 'both', 'demo', 'test', 'real-test'],
                        default='demo', help='–†–µ–∂–∏–º –∑–∞–ø—É—Å–∫–∞')
    parser.add_argument('--component', choices=['exchanges', 'analyzer', 'strategies'],
                        help='–¢–µ—Å—Ç –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞')
    args = parser.parse_args()

    try:
        if args.mode == 'demo':
            await run_demo_mode()
        elif args.mode == 'test':
            await run_component_test(args.component)
        elif args.mode == 'real-test':
            await run_real_data_test()
        elif args.mode == 'bot':
            await run_bot_mode()
        elif args.mode == 'api':
            await run_api_mode()
        elif args.mode == 'both':
            # –ó–∞–ø—É—Å–∫ –≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö
            bot_task = asyncio.create_task(run_bot_mode())
            api_task = asyncio.create_task(run_api_mode())

            await asyncio.gather(bot_task, api_task)
        else:
            logger.info(f"–†–µ–∂–∏–º {args.mode} –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–æ–∫")
            logger.info("–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ: python main.py --mode demo")

    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        logger.error(f"Traceback: {traceback.format_exc()}")
        sys.exit(1)


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("üëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"üí• –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)